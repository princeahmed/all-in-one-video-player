/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/components/Icons.js":
/*!***************************************!*\
  !*** ./assets/js/components/Icons.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Icons; });
function Icons(icon) {
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;
  var icons = {
    play: "<svg width=\"".concat(size, "\"  height=\"").concat(size, "\"  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 26 26\" fill=\"currentColor\"><path d=\"M 20.207031 11.855469 L 6.902344 5.261719 C 6.5 5.058594 6.019531 5.078125 5.632813 5.3125 C 5.246094 5.542969 5.015625 5.957031 5.015625 6.402344 L 5.015625 19.601563 C 5.015625 20.042969 5.246094 20.457031 5.632813 20.6875 C 5.84375 20.816406 6.078125 20.878906 6.316406 20.878906 C 6.519531 20.878906 6.71875 20.832031 6.902344 20.742188 L 20.210938 14.140625 C 20.648438 13.925781 20.925781 13.484375 20.925781 13 C 20.925781 12.515625 20.644531 12.074219 20.207031 11.855469 Z\"></path></svg>"),
    pause: "<svg width=\"".concat(size, "\" height=\"").concat(size, "\"  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 26 26\" fill=\"currentColor\"><path d=\"M 7 5 C 6.449219 5 6 5.449219 6 6 L 6 20 C 6 20.550781 6.449219 21 7 21 L 10 21 C 10.550781 21 11 20.550781 11 20 L 11 6 C 11 5.449219 10.550781 5 10 5 Z M 16 5 C 15.449219 5 15 5.449219 15 6 L 15 20 C 15 20.550781 15.449219 21 16 21 L 19 21 C 19.550781 21 20 20.550781 20 20 L 20 6 C 20 5.449219 19.550781 5 19 5 Z\"></path></svg>"),
    next: "<svg  width=\"".concat(size, "\" height=\"").concat(size, "\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 26 26\" fill=\"currentColor\"><path d=\"M 16 5 C 15.449219 5 15 5.449219 15 6 L 15 10.875 L 7.90625 5.25 C 7.503906 5.046875 7.007813 5.078125 6.625 5.3125 C 6.238281 5.542969 6 5.960938 6 6.40625 L 6 19.59375 C 6 20.035156 6.238281 20.453125 6.625 20.6875 C 6.832031 20.8125 7.074219 20.875 7.3125 20.875 C 7.511719 20.875 7.722656 20.84375 7.90625 20.75 L 15 15.125 L 15 20 C 15 20.550781 15.449219 21 16 21 L 19 21 C 19.550781 21 20 20.550781 20 20 L 20 6 C 20 5.449219 19.550781 5 19 5 Z\"></path></svg>"),
    prev: "<svg  width=\"".concat(size, "\" height=\"").concat(size, "\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 26 26\" fill=\"currentColor\"><path d=\"M 7 5 C 6.449219 5 6 5.449219 6 6 L 6 20 C 6 20.550781 6.449219 21 7 21 L 10 21 C 10.550781 21 11 20.550781 11 20 L 11 15.125 L 18.09375 20.75 C 18.496094 20.953125 18.992188 20.921875 19.375 20.6875 C 19.761719 20.457031 20 20.039063 20 19.59375 L 20 6.40625 C 20 5.964844 19.761719 5.546875 19.375 5.3125 C 19.167969 5.1875 18.925781 5.125 18.6875 5.125 C 18.488281 5.125 18.277344 5.15625 18.09375 5.25 L 11 10.875 L 11 6 C 11 5.449219 10.550781 5 10 5 Z\"></path></svg>"),
    volumeOn: "",
    volumeOff: "",
    pip: "<svg width=\"".concat(size, "\" height=\"").concat(size, "\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M22,18V6c0-1.105-0.895-2-2-2H4C2.895,4,2,4.895,2,6v12c0,1.105,0.895,2,2,2h16C21.105,20,22,19.105,22,18z M19,18h-6 c-0.552,0-1-0.448-1-1v-4c0-0.552,0.448-1,1-1h6c0.552,0,1,0.448,1,1v4C20,17.552,19.552,18,19,18z\"></path></svg>"),
    fullscreen: "",
    exitFullscreen: "",
    playlist: "<svg width=\"".concat(size, "\" height=\"").concat(size, "\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 350 350\" fill=\"currentColor\"><g><g><rect y=\"96\" width=\"256\" height=\"42.667\"/></g></g><g><g><rect y=\"10.667\" width=\"256\" height=\"42.667\"/></g></g><g><g><rect y=\"181.333\" width=\"170.667\" height=\"42.667\"/></g></g><g><g><polygon points=\"213.333,181.333 213.333,309.333 320,245.333\"/></g></g></svg>")
  };
  return icons[icon];
}

/***/ }),

/***/ "./assets/js/frontend.js":
/*!*******************************!*\
  !*** ./assets/js/frontend.js ***!
  \*******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ "./assets/js/player/index.js");


/***/ }),

/***/ "./assets/js/player/Player.js":
/*!************************************!*\
  !*** ./assets/js/player/Player.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Player; });
/* harmony import */ var react_player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-player */ "./node_modules/react-player/lib/index.js");
/* harmony import */ var react_player__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_player__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _components_Icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/Icons */ "./assets/js/components/Icons.js");
/* harmony import */ var _Playlist__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Playlist */ "./assets/js/player/Playlist.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }





var _wp$element = wp.element,
    useState = _wp$element.useState,
    useEffect = _wp$element.useEffect,
    useRef = _wp$element.useRef;
function Player(_ref) {
  var data = _ref.data;
  var id = data.id,
      videos = data.videos;

  var getVolume = function getVolume() {
    var volume = aiovp.settings.volume / 100;

    if (!!localStorage.getItem('aiovp_volume')) {
      volume = parseFloat(localStorage.getItem('aiovp_volume'));
    }

    if (!volume) volume = .8;
    return volume;
  };

  var playerRef = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      playing = _useState2[0],
      setPlaying = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      buffering = _useState4[0],
      setBuffering = _useState4[1];

  var _useState5 = useState(getVolume()),
      _useState6 = _slicedToArray(_useState5, 2),
      volume = _useState6[0],
      setVolume = _useState6[1];

  var _useState7 = useState(null),
      _useState8 = _slicedToArray(_useState7, 2),
      error = _useState8[0],
      setError = _useState8[1];

  var _useState9 = useState(!!sessionStorage.getItem('radio_player_hide')),
      _useState10 = _slicedToArray(_useState9, 2),
      hide = _useState10[0],
      setHide = _useState10[1];

  var _useState11 = useState(0),
      _useState12 = _slicedToArray(_useState11, 2),
      videoIndex = _useState12[0],
      setVideoIndex = _useState12[1];

  var _useState13 = useState(false),
      _useState14 = _slicedToArray(_useState13, 2),
      showPlaylist = _useState14[0],
      setShowPlaylist = _useState14[1];

  var _useState15 = useState(false),
      _useState16 = _slicedToArray(_useState15, 2),
      pip = _useState16[0],
      setPip = _useState16[1];

  var _useState17 = useState(true),
      _useState18 = _slicedToArray(_useState17, 2),
      autoplay = _useState18[0],
      setAutoplay = _useState18[1];

  var _useState19 = useState(2),
      _useState20 = _slicedToArray(_useState19, 2),
      skin = _useState20[0],
      setSkin = _useState20[1];

  var videoItem = videos[videoIndex >= videos.length ? 0 : videoIndex];
  var video = videoItem.video,
      title = videoItem.title,
      source = videoItem.source,
      poster = videoItem.poster;
  /**
   * Init play
   */

  useEffect(function () {
    if (!!aiovp.is_admin) return;
    var playingID = sessionStorage.getItem('aiovp_playing');

    if (playingID == id || !!playingID && 'on' === autoplay) {
      setPlaying(true);
    }
  }, []); // Handle play-pause

  var handlePlayPause = function handlePlayPause() {
    setPlaying(!playing);
  };
  /**
   * Handle volume
   *
   * @param e
   */


  function handleVolume(e) {
    var val = e.target.value;
    setVolume(val);
    localStorage.setItem('aiovp_volume', val);
  }

  var isPro = true;

  var handleNextPrev = function handleNextPrev(type) {
    if ('prev' === type) {
      var index = videoIndex - 1;

      if (videoIndex === 0) {
        index = videos.length - 1;
      }

      setVideoIndex(index);
    } else if ('next' === type) {
      var _index = videoIndex + 1;

      if (videoIndex >= videos.length - 1) {
        _index = 0;
      }

      setVideoIndex(_index);
    }

    setPlaying(true);
  };

  var handlePip = function handlePip() {
    setPip(!pip);
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: classnames__WEBPACK_IMPORTED_MODULE_1___default()("aiovp", {
      pip: pip
    }, "skin-".concat(skin))
  }, /*#__PURE__*/React.createElement("div", {
    className: "aiovp-controls"
  }, /*#__PURE__*/React.createElement("button", {
    type: 'button',
    onClick: function onClick() {
      return handleNextPrev('prev');
    },
    dangerouslySetInnerHTML: {
      __html: Object(_components_Icons__WEBPACK_IMPORTED_MODULE_2__["default"])('prev')
    }
  }), /*#__PURE__*/React.createElement("button", {
    type: 'button',
    onClick: function onClick() {
      return handleNextPrev('next');
    },
    dangerouslySetInnerHTML: {
      __html: Object(_components_Icons__WEBPACK_IMPORTED_MODULE_2__["default"])('next')
    }
  }), /*#__PURE__*/React.createElement("button", {
    className: classnames__WEBPACK_IMPORTED_MODULE_1___default()('control-pip'),
    type: 'button',
    onClick: handlePip,
    dangerouslySetInnerHTML: {
      __html: Object(_components_Icons__WEBPACK_IMPORTED_MODULE_2__["default"])('pip')
    }
  }), /*#__PURE__*/React.createElement("button", {
    className: classnames__WEBPACK_IMPORTED_MODULE_1___default()('control-playlist'),
    type: 'button',
    onClick: function onClick() {
      return setShowPlaylist(!showPlaylist);
    },
    dangerouslySetInnerHTML: {
      __html: Object(_components_Icons__WEBPACK_IMPORTED_MODULE_2__["default"])('playlist')
    }
  })), showPlaylist && /*#__PURE__*/React.createElement(_Playlist__WEBPACK_IMPORTED_MODULE_3__["default"], {
    videos: videos,
    setPlaying: setPlaying,
    setVideoIndex: setVideoIndex,
    videoIndex: videoIndex,
    autoplay: autoplay,
    setAutoplay: setAutoplay,
    setShowPlaylist: setShowPlaylist
  }), /*#__PURE__*/React.createElement(react_player__WEBPACK_IMPORTED_MODULE_0___default.a, {
    className: "aiovp_media",
    style: {
      background: "#000 url(".concat(poster, ") no-repeat")
    },
    ref: playerRef,
    volume: volume,
    playing: playing,
    pip: pip,
    url: video,
    controls: true,
    light: playing ? false : poster // config={{
    //     youtube: {
    //         playerVars: {
    //             controls: 1
    //         }
    //     },
    // }}
    ,
    onPlay: function onPlay() {
      setBuffering(false);
      setError(false);
    },
    onPause: function onPause() {},
    onError: function onError() {
      setPlaying(false);
      setError(true);
      setBuffering(false);
    },
    onBuffer: function onBuffer() {
      setBuffering(true);
    },
    onBufferEnd: function onBufferEnd() {
      setBuffering(false);
    },
    onEnded: function onEnded() {
      if (autoplay) {
        setVideoIndex(videoIndex + 1);
      } else {
        setPlaying(false);
        setBuffering(false);
      }
    },
    onClickPreview: function onClickPreview() {
      setPlaying(true);
    }
  })));
}

/***/ }),

/***/ "./assets/js/player/Playlist.js":
/*!**************************************!*\
  !*** ./assets/js/player/Playlist.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Playlist; });
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components_Icons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/Icons */ "./assets/js/components/Icons.js");


var FormToggle = wp.components.FormToggle;
function Playlist(_ref) {
  var videos = _ref.videos,
      videoIndex = _ref.videoIndex,
      setVideoIndex = _ref.setVideoIndex,
      setPlaying = _ref.setPlaying,
      autoplay = _ref.autoplay,
      setAutoplay = _ref.setAutoplay,
      setShowPlaylist = _ref.setShowPlaylist;
  var skin = 1;
  return /*#__PURE__*/React.createElement("div", {
    className: "aiovp-playlist"
  }, /*#__PURE__*/React.createElement("div", {
    className: "playlist-controls"
  }, /*#__PURE__*/React.createElement("div", {
    className: "playlist-controls__autoplay"
  }, /*#__PURE__*/React.createElement("span", null, "Autoplay : "), /*#__PURE__*/React.createElement(FormToggle, {
    checked: autoplay,
    onChange: function onChange() {
      setAutoplay(!autoplay);
    }
  })), 2 === skin && /*#__PURE__*/React.createElement("button", {
    type: 'button',
    onClick: function onClick() {
      return setShowPlaylist(!setShowPlaylist);
    },
    dangerouslySetInnerHTML: {
      __html: Object(_components_Icons__WEBPACK_IMPORTED_MODULE_1__["default"])('playlist')
    }
  })), /*#__PURE__*/React.createElement("div", {
    className: "playlist-items"
  }, videos.map(function (_ref2, index) {
    var title = _ref2.title,
        poster = _ref2.poster;
    poster = !!poster ? poster : aiovp.plugin_url + '/assets/images/thumbnail.svg';
    return /*#__PURE__*/React.createElement("div", {
      className: classnames__WEBPACK_IMPORTED_MODULE_0___default()('playlist-item', {
        active: videoIndex === index
      }),
      onClick: function onClick() {
        setVideoIndex(index);
        setPlaying(true);
      }
    }, /*#__PURE__*/React.createElement("img", {
      src: poster,
      alt: title
    }), /*#__PURE__*/React.createElement("span", null, title));
  })));
}

/***/ }),

/***/ "./assets/js/player/index.js":
/*!***********************************!*\
  !*** ./assets/js/player/index.js ***!
  \***********************************/
/*! exports provided: aiovpInit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "aiovpInit", function() { return aiovpInit; });
/* harmony import */ var _Player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Player */ "./assets/js/player/Player.js");

function aiovpInit() {
  document.querySelectorAll('.all-in-one-video-player').forEach(function (element) {
    var id = element.getAttribute('data-id');
    var videos = element.getAttribute('data-videos');
    videos = videos ? JSON.parse(videos) : [];
    wp.element.render( /*#__PURE__*/React.createElement(_Player__WEBPACK_IMPORTED_MODULE_0__["default"], {
      data: {
        id: id,
        videos: videos
      }
    }), element);
  });
}
aiovpInit();

/***/ }),

/***/ "./node_modules/classnames/index.js":
/*!******************************************!*\
  !*** ./node_modules/classnames/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

/* global define */
(function () {
  'use strict';

  var hasOwn = {}.hasOwnProperty;

  function classNames() {
    var classes = [];

    for (var i = 0; i < arguments.length; i++) {
      var arg = arguments[i];
      if (!arg) continue;
      var argType = typeof arg;

      if (argType === 'string' || argType === 'number') {
        classes.push(arg);
      } else if (Array.isArray(arg)) {
        if (arg.length) {
          var inner = classNames.apply(null, arg);

          if (inner) {
            classes.push(inner);
          }
        }
      } else if (argType === 'object') {
        if (arg.toString === Object.prototype.toString) {
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes.push(key);
            }
          }
        } else {
          classes.push(arg.toString());
        }
      }
    }

    return classes.join(' ');
  }

  if ( true && module.exports) {
    classNames.default = classNames;
    module.exports = classNames;
  } else if (true) {
    // register as 'classnames', consistent with npm package name
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return classNames;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})();

/***/ }),

/***/ "./node_modules/deepmerge/dist/cjs.js":
/*!********************************************!*\
  !*** ./node_modules/deepmerge/dist/cjs.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isMergeableObject = function isMergeableObject(value) {
  return isNonNullObject(value) && !isSpecial(value);
};

function isNonNullObject(value) {
  return !!value && typeof value === 'object';
}

function isSpecial(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
} // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25


var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
  return value.$$typeof === REACT_ELEMENT_TYPE;
}

function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
}

function cloneUnlessOtherwiseSpecified(value, options) {
  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}

function defaultArrayMerge(target, source, options) {
  return target.concat(source).map(function (element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}

function getMergeFunction(key, options) {
  if (!options.customMerge) {
    return deepmerge;
  }

  var customMerge = options.customMerge(key);
  return typeof customMerge === 'function' ? customMerge : deepmerge;
}

function getEnumerableOwnPropertySymbols(target) {
  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {
    return target.propertyIsEnumerable(symbol);
  }) : [];
}

function getKeys(target) {
  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
}

function propertyIsOnObject(object, property) {
  try {
    return property in object;
  } catch (_) {
    return false;
  }
} // Protects from prototype poisoning and unexpected merging up the prototype chain.


function propertyIsUnsafe(target, key) {
  return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
  && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
  && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.
}

function mergeObject(target, source, options) {
  var destination = {};

  if (options.isMergeableObject(target)) {
    getKeys(target).forEach(function (key) {
      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
  }

  getKeys(source).forEach(function (key) {
    if (propertyIsUnsafe(target, key)) {
      return;
    }

    if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
      destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
    } else {
      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    }
  });
  return destination;
}

function deepmerge(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge;
  options.isMergeableObject = options.isMergeableObject || isMergeableObject; // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
  // implementations can use it. The caller may not replace it.

  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject(target, source, options);
  }
}

deepmerge.all = function deepmergeAll(array, options) {
  if (!Array.isArray(array)) {
    throw new Error('first argument should be an array');
  }

  return array.reduce(function (prev, next) {
    return deepmerge(prev, next, options);
  }, {});
};

var deepmerge_1 = deepmerge;
module.exports = deepmerge_1;

/***/ }),

/***/ "./node_modules/load-script/index.js":
/*!*******************************************!*\
  !*** ./node_modules/load-script/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function load(src, opts, cb) {
  var head = document.head || document.getElementsByTagName('head')[0];
  var script = document.createElement('script');

  if (typeof opts === 'function') {
    cb = opts;
    opts = {};
  }

  opts = opts || {};

  cb = cb || function () {};

  script.type = opts.type || 'text/javascript';
  script.charset = opts.charset || 'utf8';
  script.async = 'async' in opts ? !!opts.async : true;
  script.src = src;

  if (opts.attrs) {
    setAttributes(script, opts.attrs);
  }

  if (opts.text) {
    script.text = '' + opts.text;
  }

  var onend = 'onload' in script ? stdOnEnd : ieOnEnd;
  onend(script, cb); // some good legacy browsers (firefox) fail the 'in' detection above
  // so as a fallback we always set onload
  // old IE will ignore this and new IE will set onload

  if (!script.onload) {
    stdOnEnd(script, cb);
  }

  head.appendChild(script);
};

function setAttributes(script, attrs) {
  for (var attr in attrs) {
    script.setAttribute(attr, attrs[attr]);
  }
}

function stdOnEnd(script, cb) {
  script.onload = function () {
    this.onerror = this.onload = null;
    cb(null, script);
  };

  script.onerror = function () {
    // this.onload = null here is necessary
    // because even IE9 works not like others
    this.onerror = this.onload = null;
    cb(new Error('Failed to load ' + this.src), script);
  };
}

function ieOnEnd(script, cb) {
  script.onreadystatechange = function () {
    if (this.readyState != 'complete' && this.readyState != 'loaded') return;
    this.onreadystatechange = null;
    cb(null, script); // there is no way to catch loading errors in IE8
  };
}

/***/ }),

/***/ "./node_modules/memoize-one/dist/memoize-one.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/memoize-one/dist/memoize-one.esm.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var safeIsNaN = Number.isNaN || function ponyfill(value) {
  return typeof value === 'number' && value !== value;
};

function isEqual(first, second) {
  if (first === second) {
    return true;
  }

  if (safeIsNaN(first) && safeIsNaN(second)) {
    return true;
  }

  return false;
}

function areInputsEqual(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }

  for (var i = 0; i < newInputs.length; i++) {
    if (!isEqual(newInputs[i], lastInputs[i])) {
      return false;
    }
  }

  return true;
}

function memoizeOne(resultFn, isEqual) {
  if (isEqual === void 0) {
    isEqual = areInputsEqual;
  }

  var lastThis;
  var lastArgs = [];
  var lastResult;
  var calledOnce = false;

  function memoized() {
    var newArgs = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      newArgs[_i] = arguments[_i];
    }

    if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
      return lastResult;
    }

    lastResult = resultFn.apply(this, newArgs);
    calledOnce = true;
    lastThis = this;
    lastArgs = newArgs;
    return lastResult;
  }

  return memoized;
}

/* harmony default export */ __webpack_exports__["default"] = (memoizeOne);

/***/ }),

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    } // Detect buggy property enumeration order in older V8 versions.
    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

    test1[5] = 'de';

    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test2 = {};

    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }

    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });

    if (order2.join('') !== '0123456789') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });

    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;

  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }

    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);

      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }

  return to;
};

/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var printWarning = function () {};

if (true) {
  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");

  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function (text) {
    var message = 'Warning: ' + text;

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */


function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (true) {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }

        if (error && !(error instanceof Error)) {
          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        }

        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;
          var stack = getStack ? getStack() : '';
          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
      }
    }
  }
}
/**
 * Resets warning cache when testing.
 *
 * @private
 */


checkPropTypes.resetWarningCache = function () {
  if (true) {
    loggedTypeFailures = {};
  }
};

module.exports = checkPropTypes;

/***/ }),

/***/ "./node_modules/prop-types/factoryWithTypeCheckers.js":
/*!************************************************************!*\
  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");

var assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");

var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");

var checkPropTypes = __webpack_require__(/*! ./checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");

var has = Function.call.bind(Object.prototype.hasOwnProperty);

var printWarning = function () {};

if (true) {
  printWarning = function (text) {
    var message = 'Warning: ' + text;

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function (isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */

  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }
  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */


  var ANONYMOUS = '<<anonymous>>'; // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),
    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker
  };
  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */

  /*eslint-disable no-self-compare*/

  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */


  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  } // Make `instanceof Error` still work for returned errors.


  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (true) {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }

    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          err.name = 'Invariant Violation';
          throw err;
        } else if ( true && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;

          if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
          manualPropTypeWarningCount < 3) {
            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }

      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }

          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }

        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }

      var propValue = props[propName];

      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }

      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);

        if (error instanceof Error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];

      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];

      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (true) {
        if (arguments.length > 1) {
          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }

      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];

      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);

        if (type === 'symbol') {
          return String(value);
        }

        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }

    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }

      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }

      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error instanceof Error) {
            return error;
          }
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
       true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : undefined;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];

      if (typeof checker !== 'function') {
        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];

        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }

    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }

      for (var key in shapeTypes) {
        var checker = shapeTypes[key];

        if (!checker) {
          continue;
        }

        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

        if (error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      } // We need to check all keys in case some are required but missing from
      // props.


      var allKeys = assign({}, props[propName], shapeTypes);

      for (var key in allKeys) {
        var checker = shapeTypes[key];

        if (!checker) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

        if (error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;

      case 'boolean':
        return !propValue;

      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }

        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);

        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;

          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;

              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;

      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    } // falsy value can't be a Symbol


    if (!propValue) {
      return false;
    } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    } // Fallback for non-spec compliant Symbols which are polyfilled.


    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  } // Equivalent of `typeof` but with special handling for array and regexp.


  function getPropType(propValue) {
    var propType = typeof propValue;

    if (Array.isArray(propValue)) {
      return 'array';
    }

    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }

    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }

    return propType;
  } // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.


  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }

    var propType = getPropType(propValue);

    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }

    return propType;
  } // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"


  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);

    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;

      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;

      default:
        return type;
    }
  } // Returns class name of the object, if any.


  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }

    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};

/***/ }),

/***/ "./node_modules/prop-types/index.js":
/*!******************************************!*\
  !*** ./node_modules/prop-types/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
if (true) {
  var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js"); // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod


  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(/*! ./factoryWithTypeCheckers */ "./node_modules/prop-types/factoryWithTypeCheckers.js")(ReactIs.isElement, throwOnDirectAccess);
} else {}

/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

/***/ }),

/***/ "./node_modules/react-fast-compare/index.js":
/*!**************************************************!*\
  !*** ./node_modules/react-fast-compare/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */
var hasElementType = typeof Element !== 'undefined';
var hasMap = typeof Map === 'function';
var hasSet = typeof Set === 'function';
var hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView; // Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js

function equal(a, b) {
  // START: fast-deep-equal es6/index.js 3.1.1
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    if (a.constructor !== b.constructor) return false;
    var length, i, keys;

    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;

      for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;

      return true;
    } // START: Modifications:
    // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code
    //    to co-exist with es5.
    // 2. Replace `for of` with es5 compliant iteration using `for`.
    //    Basically, take:
    //
    //    ```js
    //    for (i of a.entries())
    //      if (!b.has(i[0])) return false;
    //    ```
    //
    //    ... and convert to:
    //
    //    ```js
    //    it = a.entries();
    //    while (!(i = it.next()).done)
    //      if (!b.has(i.value[0])) return false;
    //    ```
    //
    //    **Note**: `i` access switches to `i.value`.


    var it;

    if (hasMap && a instanceof Map && b instanceof Map) {
      if (a.size !== b.size) return false;
      it = a.entries();

      while (!(i = it.next()).done) if (!b.has(i.value[0])) return false;

      it = a.entries();

      while (!(i = it.next()).done) if (!equal(i.value[1], b.get(i.value[0]))) return false;

      return true;
    }

    if (hasSet && a instanceof Set && b instanceof Set) {
      if (a.size !== b.size) return false;
      it = a.entries();

      while (!(i = it.next()).done) if (!b.has(i.value[0])) return false;

      return true;
    } // END: Modifications


    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
      length = a.length;
      if (length != b.length) return false;

      for (i = length; i-- !== 0;) if (a[i] !== b[i]) return false;

      return true;
    }

    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;

    for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false; // END: fast-deep-equal
    // START: react-fast-compare
    // custom handling for DOM elements


    if (hasElementType && a instanceof Element) return false; // custom handling for React/Preact

    for (i = length; i-- !== 0;) {
      if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {
        // React-specific: avoid traversing React elements' _owner
        // Preact-specific: avoid traversing Preact elements' __v and __o
        //    __v = $_original / $_vnode
        //    __o = $_owner
        // These properties contain circular references and are not needed when
        // comparing the actual elements (and not their owners)
        // .$$typeof and ._store on just reasonable markers of elements
        continue;
      } // all other properties should be traversed as usual


      if (!equal(a[keys[i]], b[keys[i]])) return false;
    } // END: react-fast-compare
    // START: fast-deep-equal


    return true;
  }

  return a !== a && b !== b;
} // end fast-deep-equal


module.exports = function isEqual(a, b) {
  try {
    return equal(a, b);
  } catch (error) {
    if ((error.message || '').match(/stack|recursion/i)) {
      // warn on circular references, don't crash
      // browsers give this different errors name and messages:
      // chrome/safari: "RangeError", "Maximum call stack size exceeded"
      // firefox: "InternalError", too much recursion"
      // edge: "Error", "Out of stack space"
      console.warn('react-fast-compare cannot handle circular refs');
      return false;
    } // some other error. we should definitely know about these


    throw error;
  }
};

/***/ }),

/***/ "./node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


if (true) {
  (function () {
    'use strict'; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.

    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?

    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }

    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;

        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;

              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;

                  default:
                    return $$typeof;
                }

            }

          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    } // AsyncMode is deprecated along with isAsyncMode


    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }
      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }

    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }

    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }

    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }

    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }

    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }

    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }

    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }

    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }

    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }

    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }

    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }

    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }

    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
  })();
}

/***/ }),

/***/ "./node_modules/react-is/index.js":
/*!****************************************!*\
  !*** ./node_modules/react-is/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ "./node_modules/react-is/cjs/react-is.development.js");
}

/***/ }),

/***/ "./node_modules/react-player/lib/Player.js":
/*!*************************************************!*\
  !*** ./node_modules/react-player/lib/Player.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _reactFastCompare = _interopRequireDefault(__webpack_require__(/*! react-fast-compare */ "./node_modules/react-fast-compare/index.js"));

var _props = __webpack_require__(/*! ./props */ "./node_modules/react-player/lib/props.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var SEEK_ON_PLAY_EXPIRY = 5000;

var Player = /*#__PURE__*/function (_Component) {
  _inherits(Player, _Component);

  var _super = _createSuper(Player);

  function Player() {
    var _this;

    _classCallCheck(this, Player);

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(_args));

    _defineProperty(_assertThisInitialized(_this), "mounted", false);

    _defineProperty(_assertThisInitialized(_this), "isReady", false);

    _defineProperty(_assertThisInitialized(_this), "isPlaying", false);

    _defineProperty(_assertThisInitialized(_this), "isLoading", true);

    _defineProperty(_assertThisInitialized(_this), "loadOnReady", null);

    _defineProperty(_assertThisInitialized(_this), "startOnPlay", true);

    _defineProperty(_assertThisInitialized(_this), "seekOnPlay", null);

    _defineProperty(_assertThisInitialized(_this), "onDurationCalled", false);

    _defineProperty(_assertThisInitialized(_this), "handlePlayerMount", function (player) {
      _this.player = player;

      _this.player.load(_this.props.url);

      _this.progress();
    });

    _defineProperty(_assertThisInitialized(_this), "getInternalPlayer", function (key) {
      if (!_this.player) return null;
      return _this.player[key];
    });

    _defineProperty(_assertThisInitialized(_this), "progress", function () {
      if (_this.props.url && _this.player && _this.isReady) {
        var playedSeconds = _this.getCurrentTime() || 0;

        var loadedSeconds = _this.getSecondsLoaded();

        var duration = _this.getDuration();

        if (duration) {
          var progress = {
            playedSeconds: playedSeconds,
            played: playedSeconds / duration
          };

          if (loadedSeconds !== null) {
            progress.loadedSeconds = loadedSeconds;
            progress.loaded = loadedSeconds / duration;
          } // Only call onProgress if values have changed


          if (progress.playedSeconds !== _this.prevPlayed || progress.loadedSeconds !== _this.prevLoaded) {
            _this.props.onProgress(progress);
          }

          _this.prevPlayed = progress.playedSeconds;
          _this.prevLoaded = progress.loadedSeconds;
        }
      }

      _this.progressTimeout = setTimeout(_this.progress, _this.props.progressFrequency || _this.props.progressInterval);
    });

    _defineProperty(_assertThisInitialized(_this), "handleReady", function () {
      if (!_this.mounted) return;
      _this.isReady = true;
      _this.isLoading = false;
      var _this$props = _this.props,
          onReady = _this$props.onReady,
          playing = _this$props.playing,
          volume = _this$props.volume,
          muted = _this$props.muted;
      onReady();

      if (!muted && volume !== null) {
        _this.player.setVolume(volume);
      }

      if (_this.loadOnReady) {
        _this.player.load(_this.loadOnReady, true);

        _this.loadOnReady = null;
      } else if (playing) {
        _this.player.play();
      }

      _this.handleDurationCheck();
    });

    _defineProperty(_assertThisInitialized(_this), "handlePlay", function () {
      _this.isPlaying = true;
      _this.isLoading = false;
      var _this$props2 = _this.props,
          onStart = _this$props2.onStart,
          onPlay = _this$props2.onPlay,
          playbackRate = _this$props2.playbackRate;

      if (_this.startOnPlay) {
        if (_this.player.setPlaybackRate && playbackRate !== 1) {
          _this.player.setPlaybackRate(playbackRate);
        }

        onStart();
        _this.startOnPlay = false;
      }

      onPlay();

      if (_this.seekOnPlay) {
        _this.seekTo(_this.seekOnPlay);

        _this.seekOnPlay = null;
      }

      _this.handleDurationCheck();
    });

    _defineProperty(_assertThisInitialized(_this), "handlePause", function (e) {
      _this.isPlaying = false;

      if (!_this.isLoading) {
        _this.props.onPause(e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleEnded", function () {
      var _this$props3 = _this.props,
          activePlayer = _this$props3.activePlayer,
          loop = _this$props3.loop,
          onEnded = _this$props3.onEnded;

      if (activePlayer.loopOnEnded && loop) {
        _this.seekTo(0);
      }

      if (!loop) {
        _this.isPlaying = false;
        onEnded();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleError", function () {
      var _this$props4;

      _this.isLoading = false;

      (_this$props4 = _this.props).onError.apply(_this$props4, arguments);
    });

    _defineProperty(_assertThisInitialized(_this), "handleDurationCheck", function () {
      clearTimeout(_this.durationCheckTimeout);

      var duration = _this.getDuration();

      if (duration) {
        if (!_this.onDurationCalled) {
          _this.props.onDuration(duration);

          _this.onDurationCalled = true;
        }
      } else {
        _this.durationCheckTimeout = setTimeout(_this.handleDurationCheck, 100);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleLoaded", function () {
      // Sometimes we know loading has stopped but onReady/onPlay are never called
      // so this provides a way for players to avoid getting stuck
      _this.isLoading = false;
    });

    return _this;
  }

  _createClass(Player, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mounted = true;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.progressTimeout);
      clearTimeout(this.durationCheckTimeout);

      if (this.isReady && this.props.stopOnUnmount) {
        this.player.stop();

        if (this.player.disablePIP) {
          this.player.disablePIP();
        }
      }

      this.mounted = false;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this; // If there isn’t a player available, don’t do anything


      if (!this.player) {
        return;
      } // Invoke player methods based on changed props


      var _this$props5 = this.props,
          url = _this$props5.url,
          playing = _this$props5.playing,
          volume = _this$props5.volume,
          muted = _this$props5.muted,
          playbackRate = _this$props5.playbackRate,
          pip = _this$props5.pip,
          loop = _this$props5.loop,
          activePlayer = _this$props5.activePlayer;

      if (!(0, _reactFastCompare["default"])(prevProps.url, url)) {
        if (this.isLoading && !activePlayer.forceLoad) {
          console.warn("ReactPlayer: the attempt to load ".concat(url, " is being deferred until the player has loaded"));
          this.loadOnReady = url;
          return;
        }

        this.isLoading = true;
        this.startOnPlay = true;
        this.onDurationCalled = false;
        this.player.load(url, this.isReady);
      }

      if (!prevProps.playing && playing && !this.isPlaying) {
        this.player.play();
      }

      if (prevProps.playing && !playing && this.isPlaying) {
        this.player.pause();
      }

      if (!prevProps.pip && pip && this.player.enablePIP) {
        this.player.enablePIP();
      }

      if (prevProps.pip && !pip && this.player.disablePIP) {
        this.player.disablePIP();
      }

      if (prevProps.volume !== volume && volume !== null) {
        this.player.setVolume(volume);
      }

      if (prevProps.muted !== muted) {
        if (muted) {
          this.player.mute();
        } else {
          this.player.unmute();

          if (volume !== null) {
            // Set volume next tick to fix a bug with DailyMotion
            setTimeout(function () {
              return _this2.player.setVolume(volume);
            });
          }
        }
      }

      if (prevProps.playbackRate !== playbackRate && this.player.setPlaybackRate) {
        this.player.setPlaybackRate(playbackRate);
      }

      if (prevProps.loop !== loop && this.player.setLoop) {
        this.player.setLoop(loop);
      }
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      if (!this.isReady) return null;
      return this.player.getDuration();
    }
  }, {
    key: "getCurrentTime",
    value: function getCurrentTime() {
      if (!this.isReady) return null;
      return this.player.getCurrentTime();
    }
  }, {
    key: "getSecondsLoaded",
    value: function getSecondsLoaded() {
      if (!this.isReady) return null;
      return this.player.getSecondsLoaded();
    }
  }, {
    key: "seekTo",
    value: function seekTo(amount, type) {
      var _this3 = this; // When seeking before player is ready, store value and seek later


      if (!this.isReady && amount !== 0) {
        this.seekOnPlay = amount;
        setTimeout(function () {
          _this3.seekOnPlay = null;
        }, SEEK_ON_PLAY_EXPIRY);
        return;
      }

      var isFraction = !type ? amount > 0 && amount < 1 : type === 'fraction';

      if (isFraction) {
        // Convert fraction to seconds based on duration
        var duration = this.player.getDuration();

        if (!duration) {
          console.warn('ReactPlayer: could not seek using fraction – duration not yet available');
          return;
        }

        this.player.seekTo(duration * amount);
        return;
      }

      this.player.seekTo(amount);
    }
  }, {
    key: "render",
    value: function render() {
      var Player = this.props.activePlayer;

      if (!Player) {
        return null;
      }

      return /*#__PURE__*/_react["default"].createElement(Player, _extends({}, this.props, {
        onMount: this.handlePlayerMount,
        onReady: this.handleReady,
        onPlay: this.handlePlay,
        onPause: this.handlePause,
        onEnded: this.handleEnded,
        onLoaded: this.handleLoaded,
        onError: this.handleError
      }));
    }
  }]);

  return Player;
}(_react.Component);

exports["default"] = Player;

_defineProperty(Player, "displayName", 'Player');

_defineProperty(Player, "propTypes", _props.propTypes);

_defineProperty(Player, "defaultProps", _props.defaultProps);

/***/ }),

/***/ "./node_modules/react-player/lib/Preview.js":
/*!**************************************************!*\
  !*** ./node_modules/react-player/lib/Preview.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var ICON_SIZE = '64px';
var cache = {};

var Preview = /*#__PURE__*/function (_Component) {
  _inherits(Preview, _Component);

  var _super = _createSuper(Preview);

  function Preview() {
    var _this;

    _classCallCheck(this, Preview);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "mounted", false);

    _defineProperty(_assertThisInitialized(_this), "state", {
      image: null
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyPress", function (e) {
      if (e.key === 'Enter' || e.key === ' ') {
        _this.props.onClick();
      }
    });

    return _this;
  }

  _createClass(Preview, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mounted = true;
      this.fetchImage(this.props);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props = this.props,
          url = _this$props.url,
          light = _this$props.light;

      if (prevProps.url !== url || prevProps.light !== light) {
        this.fetchImage(this.props);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.mounted = false;
    }
  }, {
    key: "fetchImage",
    value: function fetchImage(_ref) {
      var _this2 = this;

      var url = _ref.url,
          light = _ref.light;

      if (typeof light === 'string') {
        this.setState({
          image: light
        });
        return;
      }

      if (cache[url]) {
        this.setState({
          image: cache[url]
        });
        return;
      }

      this.setState({
        image: null
      });
      return window.fetch("https://noembed.com/embed?url=".concat(url)).then(function (response) {
        return response.json();
      }).then(function (data) {
        if (data.thumbnail_url && _this2.mounted) {
          var image = data.thumbnail_url.replace('height=100', 'height=480');

          _this2.setState({
            image: image
          });

          cache[url] = image;
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          onClick = _this$props2.onClick,
          playIcon = _this$props2.playIcon,
          previewTabIndex = _this$props2.previewTabIndex;
      var image = this.state.image;
      var flexCenter = {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      };
      var styles = {
        preview: _objectSpread({
          width: '100%',
          height: '100%',
          backgroundImage: image ? "url(".concat(image, ")") : undefined,
          backgroundSize: 'cover',
          backgroundPosition: 'center',
          cursor: 'pointer'
        }, flexCenter),
        shadow: _objectSpread({
          background: 'radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)',
          borderRadius: ICON_SIZE,
          width: ICON_SIZE,
          height: ICON_SIZE
        }, flexCenter),
        playIcon: {
          borderStyle: 'solid',
          borderWidth: '16px 0 16px 26px',
          borderColor: 'transparent transparent transparent white',
          marginLeft: '7px'
        }
      };

      var defaultPlayIcon = /*#__PURE__*/_react["default"].createElement("div", {
        style: styles.shadow,
        className: "react-player__shadow"
      }, /*#__PURE__*/_react["default"].createElement("div", {
        style: styles.playIcon,
        className: "react-player__play-icon"
      }));

      return /*#__PURE__*/_react["default"].createElement("div", {
        style: styles.preview,
        className: "react-player__preview",
        onClick: onClick,
        tabIndex: previewTabIndex,
        onKeyPress: this.handleKeyPress
      }, playIcon || defaultPlayIcon);
    }
  }]);

  return Preview;
}(_react.Component);

exports["default"] = Preview;

/***/ }),

/***/ "./node_modules/react-player/lib/ReactPlayer.js":
/*!******************************************************!*\
  !*** ./node_modules/react-player/lib/ReactPlayer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createReactPlayer = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _deepmerge = _interopRequireDefault(__webpack_require__(/*! deepmerge */ "./node_modules/deepmerge/dist/cjs.js"));

var _memoizeOne = _interopRequireDefault(__webpack_require__(/*! memoize-one */ "./node_modules/memoize-one/dist/memoize-one.esm.js"));

var _reactFastCompare = _interopRequireDefault(__webpack_require__(/*! react-fast-compare */ "./node_modules/react-fast-compare/index.js"));

var _props = __webpack_require__(/*! ./props */ "./node_modules/react-player/lib/props.js");

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/react-player/lib/utils.js");

var _Player3 = _interopRequireDefault(__webpack_require__(/*! ./Player */ "./node_modules/react-player/lib/Player.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var Preview = /*#__PURE__*/(0, _react.lazy)(function () {
  return Promise.resolve().then(function () {
    return _interopRequireWildcard(__webpack_require__(/*! ./Preview */ "./node_modules/react-player/lib/Preview.js"));
  });
});
var IS_BROWSER = typeof window !== 'undefined' && window.document;
var IS_GLOBAL = typeof global !== 'undefined' && global.window && global.window.document;
var SUPPORTED_PROPS = Object.keys(_props.propTypes); // Return null when rendering on the server
// as Suspense is not supported yet

var UniversalSuspense = IS_BROWSER || IS_GLOBAL ? _react.Suspense : function () {
  return null;
};
var customPlayers = [];

var createReactPlayer = function createReactPlayer(players, fallback) {
  var _class, _temp;

  return _temp = _class = /*#__PURE__*/function (_Component) {
    _inherits(ReactPlayer, _Component);

    var _super = _createSuper(ReactPlayer);

    function ReactPlayer() {
      var _this;

      _classCallCheck(this, ReactPlayer);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "state", {
        showPreview: !!_this.props.light
      });

      _defineProperty(_assertThisInitialized(_this), "references", {
        wrapper: function wrapper(_wrapper) {
          _this.wrapper = _wrapper;
        },
        player: function player(_player) {
          _this.player = _player;
        }
      });

      _defineProperty(_assertThisInitialized(_this), "handleClickPreview", function (e) {
        _this.setState({
          showPreview: false
        });

        _this.props.onClickPreview(e);
      });

      _defineProperty(_assertThisInitialized(_this), "showPreview", function () {
        _this.setState({
          showPreview: true
        });
      });

      _defineProperty(_assertThisInitialized(_this), "getDuration", function () {
        if (!_this.player) return null;
        return _this.player.getDuration();
      });

      _defineProperty(_assertThisInitialized(_this), "getCurrentTime", function () {
        if (!_this.player) return null;
        return _this.player.getCurrentTime();
      });

      _defineProperty(_assertThisInitialized(_this), "getSecondsLoaded", function () {
        if (!_this.player) return null;
        return _this.player.getSecondsLoaded();
      });

      _defineProperty(_assertThisInitialized(_this), "getInternalPlayer", function () {
        var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'player';
        if (!_this.player) return null;
        return _this.player.getInternalPlayer(key);
      });

      _defineProperty(_assertThisInitialized(_this), "seekTo", function (fraction, type) {
        if (!_this.player) return null;

        _this.player.seekTo(fraction, type);
      });

      _defineProperty(_assertThisInitialized(_this), "handleReady", function () {
        _this.props.onReady(_assertThisInitialized(_this));
      });

      _defineProperty(_assertThisInitialized(_this), "getActivePlayer", (0, _memoizeOne["default"])(function (url) {
        for (var _i = 0, _arr = [].concat(customPlayers, _toConsumableArray(players)); _i < _arr.length; _i++) {
          var player = _arr[_i];

          if (player.canPlay(url)) {
            return player;
          }
        }

        if (fallback) {
          return fallback;
        }

        return null;
      }));

      _defineProperty(_assertThisInitialized(_this), "getConfig", (0, _memoizeOne["default"])(function (url, key) {
        var config = _this.props.config;
        return _deepmerge["default"].all([_props.defaultProps.config, _props.defaultProps.config[key] || {}, config, config[key] || {}]);
      }));

      _defineProperty(_assertThisInitialized(_this), "getAttributes", (0, _memoizeOne["default"])(function (url) {
        return (0, _utils.omit)(_this.props, SUPPORTED_PROPS);
      }));

      _defineProperty(_assertThisInitialized(_this), "renderActivePlayer", function (url) {
        if (!url) return null;

        var player = _this.getActivePlayer(url);

        if (!player) return null;

        var config = _this.getConfig(url, player.key);

        return /*#__PURE__*/_react["default"].createElement(_Player3["default"], _extends({}, _this.props, {
          key: player.key,
          ref: _this.references.player,
          config: config,
          activePlayer: player.lazyPlayer || player,
          onReady: _this.handleReady
        }));
      });

      return _this;
    }

    _createClass(ReactPlayer, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps, nextState) {
        return !(0, _reactFastCompare["default"])(this.props, nextProps) || !(0, _reactFastCompare["default"])(this.state, nextState);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var light = this.props.light;

        if (!prevProps.light && light) {
          this.setState({
            showPreview: true
          });
        }

        if (prevProps.light && !light) {
          this.setState({
            showPreview: false
          });
        }
      }
    }, {
      key: "renderPreview",
      value: function renderPreview(url) {
        if (!url) return null;
        var _this$props = this.props,
            light = _this$props.light,
            playIcon = _this$props.playIcon,
            previewTabIndex = _this$props.previewTabIndex;
        return /*#__PURE__*/_react["default"].createElement(Preview, {
          url: url,
          light: light,
          playIcon: playIcon,
          previewTabIndex: previewTabIndex,
          onClick: this.handleClickPreview
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            url = _this$props2.url,
            style = _this$props2.style,
            width = _this$props2.width,
            height = _this$props2.height,
            fallback = _this$props2.fallback,
            Wrapper = _this$props2.wrapper;
        var showPreview = this.state.showPreview;
        var attributes = this.getAttributes(url);
        return /*#__PURE__*/_react["default"].createElement(Wrapper, _extends({
          ref: this.references.wrapper,
          style: _objectSpread(_objectSpread({}, style), {}, {
            width: width,
            height: height
          })
        }, attributes), /*#__PURE__*/_react["default"].createElement(UniversalSuspense, {
          fallback: fallback
        }, showPreview ? this.renderPreview(url) : this.renderActivePlayer(url)));
      }
    }]);

    return ReactPlayer;
  }(_react.Component), _defineProperty(_class, "displayName", 'ReactPlayer'), _defineProperty(_class, "propTypes", _props.propTypes), _defineProperty(_class, "defaultProps", _props.defaultProps), _defineProperty(_class, "addCustomPlayer", function (player) {
    customPlayers.push(player);
  }), _defineProperty(_class, "removeCustomPlayers", function () {
    customPlayers.length = 0;
  }), _defineProperty(_class, "canPlay", function (url) {
    for (var _i2 = 0, _arr2 = [].concat(customPlayers, _toConsumableArray(players)); _i2 < _arr2.length; _i2++) {
      var _Player = _arr2[_i2];

      if (_Player.canPlay(url)) {
        return true;
      }
    }

    return false;
  }), _defineProperty(_class, "canEnablePIP", function (url) {
    for (var _i3 = 0, _arr3 = [].concat(customPlayers, _toConsumableArray(players)); _i3 < _arr3.length; _i3++) {
      var _Player2 = _arr3[_i3];

      if (_Player2.canEnablePIP && _Player2.canEnablePIP(url)) {
        return true;
      }
    }

    return false;
  }), _temp;
};

exports.createReactPlayer = createReactPlayer;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack-stream/node_modules/webpack/buildin/global.js */ "./node_modules/webpack-stream/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/react-player/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _players = _interopRequireDefault(__webpack_require__(/*! ./players */ "./node_modules/react-player/lib/players/index.js"));

var _ReactPlayer = __webpack_require__(/*! ./ReactPlayer */ "./node_modules/react-player/lib/ReactPlayer.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
} // Fall back to FilePlayer if nothing else can play the URL


var fallback = _players["default"][_players["default"].length - 1];

var _default = (0, _ReactPlayer.createReactPlayer)(_players["default"], fallback);

exports["default"] = _default;

/***/ }),

/***/ "./node_modules/react-player/lib/patterns.js":
/*!***************************************************!*\
  !*** ./node_modules/react-player/lib/patterns.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.canPlay = exports.FLV_EXTENSIONS = exports.DASH_EXTENSIONS = exports.HLS_EXTENSIONS = exports.VIDEO_EXTENSIONS = exports.AUDIO_EXTENSIONS = exports.MATCH_URL_KALTURA = exports.MATCH_URL_VIDYARD = exports.MATCH_URL_MIXCLOUD = exports.MATCH_URL_DAILYMOTION = exports.MATCH_URL_TWITCH_CHANNEL = exports.MATCH_URL_TWITCH_VIDEO = exports.MATCH_URL_WISTIA = exports.MATCH_URL_STREAMABLE = exports.MATCH_URL_FACEBOOK_WATCH = exports.MATCH_URL_FACEBOOK = exports.MATCH_URL_VIMEO = exports.MATCH_URL_SOUNDCLOUD = exports.MATCH_URL_YOUTUBE = void 0;

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/react-player/lib/utils.js");

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function F() {};

      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function s() {
      it = o[Symbol.iterator]();
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

var MATCH_URL_YOUTUBE = /(?:youtu\.be\/|youtube(?:-nocookie)?\.com\/(?:embed\/|v\/|watch\/|watch\?v=|watch\?.+&v=))((\w|-){11})|youtube\.com\/playlist\?list=|youtube\.com\/user\//;
exports.MATCH_URL_YOUTUBE = MATCH_URL_YOUTUBE;
var MATCH_URL_SOUNDCLOUD = /(?:soundcloud\.com|snd\.sc)\/[^.]+$/;
exports.MATCH_URL_SOUNDCLOUD = MATCH_URL_SOUNDCLOUD;
var MATCH_URL_VIMEO = /vimeo\.com\/.+/;
exports.MATCH_URL_VIMEO = MATCH_URL_VIMEO;
var MATCH_URL_FACEBOOK = /^https?:\/\/(www\.)?facebook\.com.*\/(video(s)?|watch|story)(\.php?|\/).+$/;
exports.MATCH_URL_FACEBOOK = MATCH_URL_FACEBOOK;
var MATCH_URL_FACEBOOK_WATCH = /^https?:\/\/fb\.watch\/.+$/;
exports.MATCH_URL_FACEBOOK_WATCH = MATCH_URL_FACEBOOK_WATCH;
var MATCH_URL_STREAMABLE = /streamable\.com\/([a-z0-9]+)$/;
exports.MATCH_URL_STREAMABLE = MATCH_URL_STREAMABLE;
var MATCH_URL_WISTIA = /(?:wistia\.(?:com|net)|wi\.st)\/(?:medias|embed)\/(?:iframe\/)?(.*)$/;
exports.MATCH_URL_WISTIA = MATCH_URL_WISTIA;
var MATCH_URL_TWITCH_VIDEO = /(?:www\.|go\.)?twitch\.tv\/videos\/(\d+)($|\?)/;
exports.MATCH_URL_TWITCH_VIDEO = MATCH_URL_TWITCH_VIDEO;
var MATCH_URL_TWITCH_CHANNEL = /(?:www\.|go\.)?twitch\.tv\/([a-zA-Z0-9_]+)($|\?)/;
exports.MATCH_URL_TWITCH_CHANNEL = MATCH_URL_TWITCH_CHANNEL;
var MATCH_URL_DAILYMOTION = /^(?:(?:https?):)?(?:\/\/)?(?:www\.)?(?:(?:dailymotion\.com(?:\/embed)?\/video)|dai\.ly)\/([a-zA-Z0-9]+)(?:_[\w_-]+)?$/;
exports.MATCH_URL_DAILYMOTION = MATCH_URL_DAILYMOTION;
var MATCH_URL_MIXCLOUD = /mixcloud\.com\/([^/]+\/[^/]+)/;
exports.MATCH_URL_MIXCLOUD = MATCH_URL_MIXCLOUD;
var MATCH_URL_VIDYARD = /vidyard.com\/(?:watch\/)?([a-zA-Z0-9-]+)/;
exports.MATCH_URL_VIDYARD = MATCH_URL_VIDYARD;
var MATCH_URL_KALTURA = /^https?:\/\/[a-zA-Z]+\.kaltura.(com|org)\/p\/([0-9]+)\/sp\/([0-9]+)00\/embedIframeJs\/uiconf_id\/([0-9]+)\/partner_id\/([0-9]+)(.*)entry_id.([a-zA-Z0-9-_]+)$/;
exports.MATCH_URL_KALTURA = MATCH_URL_KALTURA;
var AUDIO_EXTENSIONS = /\.(m4a|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\?)/i;
exports.AUDIO_EXTENSIONS = AUDIO_EXTENSIONS;
var VIDEO_EXTENSIONS = /\.(mp4|og[gv]|webm|mov|m4v)($|\?)/i;
exports.VIDEO_EXTENSIONS = VIDEO_EXTENSIONS;
var HLS_EXTENSIONS = /\.(m3u8)($|\?)/i;
exports.HLS_EXTENSIONS = HLS_EXTENSIONS;
var DASH_EXTENSIONS = /\.(mpd)($|\?)/i;
exports.DASH_EXTENSIONS = DASH_EXTENSIONS;
var FLV_EXTENSIONS = /\.(flv)($|\?)/i;
exports.FLV_EXTENSIONS = FLV_EXTENSIONS;

var canPlayFile = function canPlayFile(url) {
  if (url instanceof Array) {
    var _iterator = _createForOfIteratorHelper(url),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var item = _step.value;

        if (typeof item === 'string' && canPlayFile(item)) {
          return true;
        }

        if (canPlayFile(item.src)) {
          return true;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return false;
  }

  if ((0, _utils.isMediaStream)(url) || (0, _utils.isBlobUrl)(url)) {
    return true;
  }

  return AUDIO_EXTENSIONS.test(url) || VIDEO_EXTENSIONS.test(url) || HLS_EXTENSIONS.test(url) || DASH_EXTENSIONS.test(url) || FLV_EXTENSIONS.test(url);
};

var canPlay = {
  youtube: function youtube(url) {
    if (url instanceof Array) {
      return url.every(function (item) {
        return MATCH_URL_YOUTUBE.test(item);
      });
    }

    return MATCH_URL_YOUTUBE.test(url);
  },
  soundcloud: function soundcloud(url) {
    return MATCH_URL_SOUNDCLOUD.test(url) && !AUDIO_EXTENSIONS.test(url);
  },
  vimeo: function vimeo(url) {
    return MATCH_URL_VIMEO.test(url) && !VIDEO_EXTENSIONS.test(url) && !HLS_EXTENSIONS.test(url);
  },
  facebook: function facebook(url) {
    return MATCH_URL_FACEBOOK.test(url) || MATCH_URL_FACEBOOK_WATCH.test(url);
  },
  streamable: function streamable(url) {
    return MATCH_URL_STREAMABLE.test(url);
  },
  wistia: function wistia(url) {
    return MATCH_URL_WISTIA.test(url);
  },
  twitch: function twitch(url) {
    return MATCH_URL_TWITCH_VIDEO.test(url) || MATCH_URL_TWITCH_CHANNEL.test(url);
  },
  dailymotion: function dailymotion(url) {
    return MATCH_URL_DAILYMOTION.test(url);
  },
  mixcloud: function mixcloud(url) {
    return MATCH_URL_MIXCLOUD.test(url);
  },
  vidyard: function vidyard(url) {
    return MATCH_URL_VIDYARD.test(url);
  },
  kaltura: function kaltura(url) {
    return MATCH_URL_KALTURA.test(url);
  },
  file: canPlayFile
};
exports.canPlay = canPlay;

/***/ }),

/***/ "./node_modules/react-player/lib/players/DailyMotion.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-player/lib/players/DailyMotion.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/react-player/lib/utils.js");

var _patterns = __webpack_require__(/*! ../patterns */ "./node_modules/react-player/lib/patterns.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var SDK_URL = 'https://api.dmcdn.net/all.js';
var SDK_GLOBAL = 'DM';
var SDK_GLOBAL_READY = 'dmAsyncInit';

var DailyMotion = /*#__PURE__*/function (_Component) {
  _inherits(DailyMotion, _Component);

  var _super = _createSuper(DailyMotion);

  function DailyMotion() {
    var _this;

    _classCallCheck(this, DailyMotion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    _defineProperty(_assertThisInitialized(_this), "onDurationChange", function () {
      var duration = _this.getDuration();

      _this.props.onDuration(duration);
    });

    _defineProperty(_assertThisInitialized(_this), "mute", function () {
      _this.callPlayer('setMuted', true);
    });

    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
      _this.callPlayer('setMuted', false);
    });

    _defineProperty(_assertThisInitialized(_this), "ref", function (container) {
      _this.container = container;
    });

    return _this;
  }

  _createClass(DailyMotion, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onMount && this.props.onMount(this);
    }
  }, {
    key: "load",
    value: function load(url) {
      var _this2 = this;

      var _this$props = this.props,
          controls = _this$props.controls,
          config = _this$props.config,
          onError = _this$props.onError,
          playing = _this$props.playing;

      var _url$match = url.match(_patterns.MATCH_URL_DAILYMOTION),
          _url$match2 = _slicedToArray(_url$match, 2),
          id = _url$match2[1];

      if (this.player) {
        this.player.load(id, {
          start: (0, _utils.parseStartTime)(url),
          autoplay: playing
        });
        return;
      }

      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function (DM) {
        return DM.player;
      }).then(function (DM) {
        if (!_this2.container) return;
        var Player = DM.player;
        _this2.player = new Player(_this2.container, {
          width: '100%',
          height: '100%',
          video: id,
          params: _objectSpread({
            controls: controls,
            autoplay: _this2.props.playing,
            mute: _this2.props.muted,
            start: (0, _utils.parseStartTime)(url),
            origin: window.location.origin
          }, config.params),
          events: {
            apiready: _this2.props.onReady,
            seeked: function seeked() {
              return _this2.props.onSeek(_this2.player.currentTime);
            },
            video_end: _this2.props.onEnded,
            durationchange: _this2.onDurationChange,
            pause: _this2.props.onPause,
            playing: _this2.props.onPlay,
            waiting: _this2.props.onBuffer,
            error: function error(event) {
              return onError(event);
            }
          }
        });
      }, onError);
    }
  }, {
    key: "play",
    value: function play() {
      this.callPlayer('play');
    }
  }, {
    key: "pause",
    value: function pause() {
      this.callPlayer('pause');
    }
  }, {
    key: "stop",
    value: function stop() {// Nothing to do
    }
  }, {
    key: "seekTo",
    value: function seekTo(seconds) {
      this.callPlayer('seek', seconds);
    }
  }, {
    key: "setVolume",
    value: function setVolume(fraction) {
      this.callPlayer('setVolume', fraction);
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return this.player.duration || null;
    }
  }, {
    key: "getCurrentTime",
    value: function getCurrentTime() {
      return this.player.currentTime;
    }
  }, {
    key: "getSecondsLoaded",
    value: function getSecondsLoaded() {
      return this.player.bufferedTime;
    }
  }, {
    key: "render",
    value: function render() {
      var display = this.props.display;
      var style = {
        width: '100%',
        height: '100%',
        display: display
      };
      return /*#__PURE__*/_react["default"].createElement("div", {
        style: style
      }, /*#__PURE__*/_react["default"].createElement("div", {
        ref: this.ref
      }));
    }
  }]);

  return DailyMotion;
}(_react.Component);

exports["default"] = DailyMotion;

_defineProperty(DailyMotion, "displayName", 'DailyMotion');

_defineProperty(DailyMotion, "canPlay", _patterns.canPlay.dailymotion);

_defineProperty(DailyMotion, "loopOnEnded", true);

/***/ }),

/***/ "./node_modules/react-player/lib/players/Facebook.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Facebook.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/react-player/lib/utils.js");

var _patterns = __webpack_require__(/*! ../patterns */ "./node_modules/react-player/lib/patterns.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var SDK_URL = 'https://connect.facebook.net/en_US/sdk.js';
var SDK_GLOBAL = 'FB';
var SDK_GLOBAL_READY = 'fbAsyncInit';
var PLAYER_ID_PREFIX = 'facebook-player-';

var Facebook = /*#__PURE__*/function (_Component) {
  _inherits(Facebook, _Component);

  var _super = _createSuper(Facebook);

  function Facebook() {
    var _this;

    _classCallCheck(this, Facebook);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    _defineProperty(_assertThisInitialized(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));

    _defineProperty(_assertThisInitialized(_this), "mute", function () {
      _this.callPlayer('mute');
    });

    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
      _this.callPlayer('unmute');
    });

    return _this;
  }

  _createClass(Facebook, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onMount && this.props.onMount(this);
    }
  }, {
    key: "load",
    value: function load(url, isReady) {
      var _this2 = this;

      if (isReady) {
        (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function (FB) {
          return FB.XFBML.parse();
        });
        return;
      }

      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function (FB) {
        FB.init({
          appId: _this2.props.config.appId,
          xfbml: true,
          version: _this2.props.config.version
        });
        FB.Event.subscribe('xfbml.render', function (msg) {
          // Here we know the SDK has loaded, even if onReady/onPlay
          // is not called due to a video that cannot be embedded
          _this2.props.onLoaded();
        });
        FB.Event.subscribe('xfbml.ready', function (msg) {
          if (msg.type === 'video' && msg.id === _this2.playerID) {
            _this2.player = msg.instance;

            _this2.player.subscribe('startedPlaying', _this2.props.onPlay);

            _this2.player.subscribe('paused', _this2.props.onPause);

            _this2.player.subscribe('finishedPlaying', _this2.props.onEnded);

            _this2.player.subscribe('startedBuffering', _this2.props.onBuffer);

            _this2.player.subscribe('finishedBuffering', _this2.props.onBufferEnd);

            _this2.player.subscribe('error', _this2.props.onError);

            if (_this2.props.muted) {
              _this2.callPlayer('mute');
            } else {
              _this2.callPlayer('unmute');
            }

            _this2.props.onReady(); // For some reason Facebook have added `visibility: hidden`
            // to the iframe when autoplay fails, so here we set it back


            document.getElementById(_this2.playerID).querySelector('iframe').style.visibility = 'visible';
          }
        });
      });
    }
  }, {
    key: "play",
    value: function play() {
      this.callPlayer('play');
    }
  }, {
    key: "pause",
    value: function pause() {
      this.callPlayer('pause');
    }
  }, {
    key: "stop",
    value: function stop() {// Nothing to do
    }
  }, {
    key: "seekTo",
    value: function seekTo(seconds) {
      this.callPlayer('seek', seconds);
    }
  }, {
    key: "setVolume",
    value: function setVolume(fraction) {
      this.callPlayer('setVolume', fraction);
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return this.callPlayer('getDuration');
    }
  }, {
    key: "getCurrentTime",
    value: function getCurrentTime() {
      return this.callPlayer('getCurrentPosition');
    }
  }, {
    key: "getSecondsLoaded",
    value: function getSecondsLoaded() {
      return null;
    }
  }, {
    key: "render",
    value: function render() {
      var attributes = this.props.config.attributes;
      var style = {
        width: '100%',
        height: '100%'
      };
      return /*#__PURE__*/_react["default"].createElement("div", _extends({
        style: style,
        id: this.playerID,
        className: "fb-video",
        "data-href": this.props.url,
        "data-autoplay": this.props.playing ? 'true' : 'false',
        "data-allowfullscreen": "true",
        "data-controls": this.props.controls ? 'true' : 'false'
      }, attributes));
    }
  }]);

  return Facebook;
}(_react.Component);

exports["default"] = Facebook;

_defineProperty(Facebook, "displayName", 'Facebook');

_defineProperty(Facebook, "canPlay", _patterns.canPlay.facebook);

_defineProperty(Facebook, "loopOnEnded", true);

/***/ }),

/***/ "./node_modules/react-player/lib/players/FilePlayer.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/FilePlayer.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/react-player/lib/utils.js");

var _patterns = __webpack_require__(/*! ../patterns */ "./node_modules/react-player/lib/patterns.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var HAS_NAVIGATOR = typeof navigator !== 'undefined';
var IS_IPAD_PRO = HAS_NAVIGATOR && navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1;
var IS_IOS = HAS_NAVIGATOR && (/iPad|iPhone|iPod/.test(navigator.userAgent) || IS_IPAD_PRO) && !window.MSStream;
var HLS_SDK_URL = 'https://cdn.jsdelivr.net/npm/hls.js@VERSION/dist/hls.min.js';
var HLS_GLOBAL = 'Hls';
var DASH_SDK_URL = 'https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js';
var DASH_GLOBAL = 'dashjs';
var FLV_SDK_URL = 'https://cdn.jsdelivr.net/npm/flv.js@VERSION/dist/flv.min.js';
var FLV_GLOBAL = 'flvjs';
var MATCH_DROPBOX_URL = /www\.dropbox\.com\/.+/;
var MATCH_CLOUDFLARE_STREAM = /https:\/\/watch\.cloudflarestream\.com\/([a-z0-9]+)/;
var REPLACE_CLOUDFLARE_STREAM = 'https://videodelivery.net/{id}/manifest/video.m3u8';

var FilePlayer = /*#__PURE__*/function (_Component) {
  _inherits(FilePlayer, _Component);

  var _super = _createSuper(FilePlayer);

  function FilePlayer() {
    var _this;

    _classCallCheck(this, FilePlayer);

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(_args));

    _defineProperty(_assertThisInitialized(_this), "onReady", function () {
      var _this$props;

      return (_this$props = _this.props).onReady.apply(_this$props, arguments);
    });

    _defineProperty(_assertThisInitialized(_this), "onPlay", function () {
      var _this$props2;

      return (_this$props2 = _this.props).onPlay.apply(_this$props2, arguments);
    });

    _defineProperty(_assertThisInitialized(_this), "onBuffer", function () {
      var _this$props3;

      return (_this$props3 = _this.props).onBuffer.apply(_this$props3, arguments);
    });

    _defineProperty(_assertThisInitialized(_this), "onBufferEnd", function () {
      var _this$props4;

      return (_this$props4 = _this.props).onBufferEnd.apply(_this$props4, arguments);
    });

    _defineProperty(_assertThisInitialized(_this), "onPause", function () {
      var _this$props5;

      return (_this$props5 = _this.props).onPause.apply(_this$props5, arguments);
    });

    _defineProperty(_assertThisInitialized(_this), "onEnded", function () {
      var _this$props6;

      return (_this$props6 = _this.props).onEnded.apply(_this$props6, arguments);
    });

    _defineProperty(_assertThisInitialized(_this), "onError", function () {
      var _this$props7;

      return (_this$props7 = _this.props).onError.apply(_this$props7, arguments);
    });

    _defineProperty(_assertThisInitialized(_this), "onEnablePIP", function () {
      var _this$props8;

      return (_this$props8 = _this.props).onEnablePIP.apply(_this$props8, arguments);
    });

    _defineProperty(_assertThisInitialized(_this), "onDisablePIP", function (e) {
      var _this$props9 = _this.props,
          onDisablePIP = _this$props9.onDisablePIP,
          playing = _this$props9.playing;
      onDisablePIP(e);

      if (playing) {
        _this.play();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onPresentationModeChange", function (e) {
      if (_this.player && (0, _utils.supportsWebKitPresentationMode)(_this.player)) {
        var webkitPresentationMode = _this.player.webkitPresentationMode;

        if (webkitPresentationMode === 'picture-in-picture') {
          _this.onEnablePIP(e);
        } else if (webkitPresentationMode === 'inline') {
          _this.onDisablePIP(e);
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onSeek", function (e) {
      _this.props.onSeek(e.target.currentTime);
    });

    _defineProperty(_assertThisInitialized(_this), "mute", function () {
      _this.player.muted = true;
    });

    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
      _this.player.muted = false;
    });

    _defineProperty(_assertThisInitialized(_this), "renderSourceElement", function (source, index) {
      if (typeof source === 'string') {
        return /*#__PURE__*/_react["default"].createElement("source", {
          key: index,
          src: source
        });
      }

      return /*#__PURE__*/_react["default"].createElement("source", _extends({
        key: index
      }, source));
    });

    _defineProperty(_assertThisInitialized(_this), "renderTrack", function (track, index) {
      return /*#__PURE__*/_react["default"].createElement("track", _extends({
        key: index
      }, track));
    });

    _defineProperty(_assertThisInitialized(_this), "ref", function (player) {
      if (_this.player) {
        // Store previous player to be used by removeListeners()
        _this.prevPlayer = _this.player;
      }

      _this.player = player;
    });

    return _this;
  }

  _createClass(FilePlayer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onMount && this.props.onMount(this);
      this.addListeners(this.player);

      if (IS_IOS) {
        this.player.load();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.shouldUseAudio(this.props) !== this.shouldUseAudio(prevProps)) {
        this.removeListeners(this.prevPlayer, prevProps.url);
        this.addListeners(this.player);
      }

      if (this.props.url !== prevProps.url && !(0, _utils.isMediaStream)(this.props.url)) {
        this.player.srcObject = null;
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removeListeners(this.player);

      if (this.hls) {
        this.hls.destroy();
      }
    }
  }, {
    key: "addListeners",
    value: function addListeners(player) {
      var _this$props10 = this.props,
          url = _this$props10.url,
          playsinline = _this$props10.playsinline;
      player.addEventListener('play', this.onPlay);
      player.addEventListener('waiting', this.onBuffer);
      player.addEventListener('playing', this.onBufferEnd);
      player.addEventListener('pause', this.onPause);
      player.addEventListener('seeked', this.onSeek);
      player.addEventListener('ended', this.onEnded);
      player.addEventListener('error', this.onError);
      player.addEventListener('enterpictureinpicture', this.onEnablePIP);
      player.addEventListener('leavepictureinpicture', this.onDisablePIP);
      player.addEventListener('webkitpresentationmodechanged', this.onPresentationModeChange);

      if (!this.shouldUseHLS(url)) {
        // onReady is handled by hls.js
        player.addEventListener('canplay', this.onReady);
      }

      if (playsinline) {
        player.setAttribute('playsinline', '');
        player.setAttribute('webkit-playsinline', '');
        player.setAttribute('x5-playsinline', '');
      }
    }
  }, {
    key: "removeListeners",
    value: function removeListeners(player, url) {
      player.removeEventListener('canplay', this.onReady);
      player.removeEventListener('play', this.onPlay);
      player.removeEventListener('waiting', this.onBuffer);
      player.removeEventListener('playing', this.onBufferEnd);
      player.removeEventListener('pause', this.onPause);
      player.removeEventListener('seeked', this.onSeek);
      player.removeEventListener('ended', this.onEnded);
      player.removeEventListener('error', this.onError);
      player.removeEventListener('enterpictureinpicture', this.onEnablePIP);
      player.removeEventListener('leavepictureinpicture', this.onDisablePIP);
      player.removeEventListener('webkitpresentationmodechanged', this.onPresentationModeChange);

      if (!this.shouldUseHLS(url)) {
        // onReady is handled by hls.js
        player.removeEventListener('canplay', this.onReady);
      }
    } // Proxy methods to prevent listener leaks

  }, {
    key: "shouldUseAudio",
    value: function shouldUseAudio(props) {
      if (props.config.forceVideo) {
        return false;
      }

      if (props.config.attributes.poster) {
        return false; // Use <video> so that poster is shown
      }

      return _patterns.AUDIO_EXTENSIONS.test(props.url) || props.config.forceAudio;
    }
  }, {
    key: "shouldUseHLS",
    value: function shouldUseHLS(url) {
      if (this.props.config.forceHLS) {
        return true;
      }

      if (IS_IOS) {
        return false;
      }

      return _patterns.HLS_EXTENSIONS.test(url) || MATCH_CLOUDFLARE_STREAM.test(url);
    }
  }, {
    key: "shouldUseDASH",
    value: function shouldUseDASH(url) {
      return _patterns.DASH_EXTENSIONS.test(url) || this.props.config.forceDASH;
    }
  }, {
    key: "shouldUseFLV",
    value: function shouldUseFLV(url) {
      return _patterns.FLV_EXTENSIONS.test(url) || this.props.config.forceFLV;
    }
  }, {
    key: "load",
    value: function load(url) {
      var _this2 = this;

      var _this$props$config = this.props.config,
          hlsVersion = _this$props$config.hlsVersion,
          hlsOptions = _this$props$config.hlsOptions,
          dashVersion = _this$props$config.dashVersion,
          flvVersion = _this$props$config.flvVersion;

      if (this.hls) {
        this.hls.destroy();
      }

      if (this.dash) {
        this.dash.reset();
      }

      if (this.shouldUseHLS(url)) {
        (0, _utils.getSDK)(HLS_SDK_URL.replace('VERSION', hlsVersion), HLS_GLOBAL).then(function (Hls) {
          _this2.hls = new Hls(hlsOptions);

          _this2.hls.on(Hls.Events.MANIFEST_PARSED, function () {
            _this2.props.onReady();
          });

          _this2.hls.on(Hls.Events.ERROR, function (e, data) {
            _this2.props.onError(e, data, _this2.hls, Hls);
          });

          if (MATCH_CLOUDFLARE_STREAM.test(url)) {
            var id = url.match(MATCH_CLOUDFLARE_STREAM)[1];

            _this2.hls.loadSource(REPLACE_CLOUDFLARE_STREAM.replace('{id}', id));
          } else {
            _this2.hls.loadSource(url);
          }

          _this2.hls.attachMedia(_this2.player);

          _this2.props.onLoaded();
        });
      }

      if (this.shouldUseDASH(url)) {
        (0, _utils.getSDK)(DASH_SDK_URL.replace('VERSION', dashVersion), DASH_GLOBAL).then(function (dashjs) {
          _this2.dash = dashjs.MediaPlayer().create();

          _this2.dash.initialize(_this2.player, url, _this2.props.playing);

          _this2.dash.on('error', _this2.props.onError);

          if (parseInt(dashVersion) < 3) {
            _this2.dash.getDebug().setLogToBrowserConsole(false);
          } else {
            _this2.dash.updateSettings({
              debug: {
                logLevel: dashjs.Debug.LOG_LEVEL_NONE
              }
            });
          }

          _this2.props.onLoaded();
        });
      }

      if (this.shouldUseFLV(url)) {
        (0, _utils.getSDK)(FLV_SDK_URL.replace('VERSION', flvVersion), FLV_GLOBAL).then(function (flvjs) {
          _this2.flv = flvjs.createPlayer({
            type: 'flv',
            url: url
          });

          _this2.flv.attachMediaElement(_this2.player);

          _this2.flv.load();

          _this2.props.onLoaded();
        });
      }

      if (url instanceof Array) {
        // When setting new urls (<source>) on an already loaded video,
        // HTMLMediaElement.load() is needed to reset the media element
        // and restart the media resource. Just replacing children source
        // dom nodes is not enough
        this.player.load();
      } else if ((0, _utils.isMediaStream)(url)) {
        try {
          this.player.srcObject = url;
        } catch (e) {
          this.player.src = window.URL.createObjectURL(url);
        }
      }
    }
  }, {
    key: "play",
    value: function play() {
      var promise = this.player.play();

      if (promise) {
        promise["catch"](this.props.onError);
      }
    }
  }, {
    key: "pause",
    value: function pause() {
      this.player.pause();
    }
  }, {
    key: "stop",
    value: function stop() {
      this.player.removeAttribute('src');

      if (this.dash) {
        this.dash.reset();
      }
    }
  }, {
    key: "seekTo",
    value: function seekTo(seconds) {
      this.player.currentTime = seconds;
    }
  }, {
    key: "setVolume",
    value: function setVolume(fraction) {
      this.player.volume = fraction;
    }
  }, {
    key: "enablePIP",
    value: function enablePIP() {
      if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {
        this.player.requestPictureInPicture();
      } else if ((0, _utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== 'picture-in-picture') {
        this.player.webkitSetPresentationMode('picture-in-picture');
      }
    }
  }, {
    key: "disablePIP",
    value: function disablePIP() {
      if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {
        document.exitPictureInPicture();
      } else if ((0, _utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== 'inline') {
        this.player.webkitSetPresentationMode('inline');
      }
    }
  }, {
    key: "setPlaybackRate",
    value: function setPlaybackRate(rate) {
      this.player.playbackRate = rate;
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      if (!this.player) return null;
      var _this$player = this.player,
          duration = _this$player.duration,
          seekable = _this$player.seekable; // on iOS, live streams return Infinity for the duration
      // so instead we use the end of the seekable timerange

      if (duration === Infinity && seekable.length > 0) {
        return seekable.end(seekable.length - 1);
      }

      return duration;
    }
  }, {
    key: "getCurrentTime",
    value: function getCurrentTime() {
      if (!this.player) return null;
      return this.player.currentTime;
    }
  }, {
    key: "getSecondsLoaded",
    value: function getSecondsLoaded() {
      if (!this.player) return null;
      var buffered = this.player.buffered;

      if (buffered.length === 0) {
        return 0;
      }

      var end = buffered.end(buffered.length - 1);
      var duration = this.getDuration();

      if (end > duration) {
        return duration;
      }

      return end;
    }
  }, {
    key: "getSource",
    value: function getSource(url) {
      var useHLS = this.shouldUseHLS(url);
      var useDASH = this.shouldUseDASH(url);
      var useFLV = this.shouldUseFLV(url);

      if (url instanceof Array || (0, _utils.isMediaStream)(url) || useHLS || useDASH || useFLV) {
        return undefined;
      }

      if (MATCH_DROPBOX_URL.test(url)) {
        return url.replace('www.dropbox.com', 'dl.dropboxusercontent.com');
      }

      return url;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props11 = this.props,
          url = _this$props11.url,
          playing = _this$props11.playing,
          loop = _this$props11.loop,
          controls = _this$props11.controls,
          muted = _this$props11.muted,
          config = _this$props11.config,
          width = _this$props11.width,
          height = _this$props11.height;
      var useAudio = this.shouldUseAudio(this.props);
      var Element = useAudio ? 'audio' : 'video';
      var style = {
        width: width === 'auto' ? width : '100%',
        height: height === 'auto' ? height : '100%'
      };
      return /*#__PURE__*/_react["default"].createElement(Element, _extends({
        ref: this.ref,
        src: this.getSource(url),
        style: style,
        preload: "auto",
        autoPlay: playing || undefined,
        controls: controls,
        muted: muted,
        loop: loop
      }, config.attributes), url instanceof Array && url.map(this.renderSourceElement), config.tracks.map(this.renderTrack));
    }
  }]);

  return FilePlayer;
}(_react.Component);

exports["default"] = FilePlayer;

_defineProperty(FilePlayer, "displayName", 'FilePlayer');

_defineProperty(FilePlayer, "canPlay", _patterns.canPlay.file);

/***/ }),

/***/ "./node_modules/react-player/lib/players/Kaltura.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Kaltura.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/react-player/lib/utils.js");

var _patterns = __webpack_require__(/*! ../patterns */ "./node_modules/react-player/lib/patterns.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var SDK_URL = 'https://cdn.embed.ly/player-0.1.0.min.js';
var SDK_GLOBAL = 'playerjs';

var Kaltura = /*#__PURE__*/function (_Component) {
  _inherits(Kaltura, _Component);

  var _super = _createSuper(Kaltura);

  function Kaltura() {
    var _this;

    _classCallCheck(this, Kaltura);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    _defineProperty(_assertThisInitialized(_this), "duration", null);

    _defineProperty(_assertThisInitialized(_this), "currentTime", null);

    _defineProperty(_assertThisInitialized(_this), "secondsLoaded", null);

    _defineProperty(_assertThisInitialized(_this), "mute", function () {
      _this.callPlayer('mute');
    });

    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
      _this.callPlayer('unmute');
    });

    _defineProperty(_assertThisInitialized(_this), "ref", function (iframe) {
      _this.iframe = iframe;
    });

    return _this;
  }

  _createClass(Kaltura, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onMount && this.props.onMount(this);
    }
  }, {
    key: "load",
    value: function load(url) {
      var _this2 = this;

      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function (playerjs) {
        if (!_this2.iframe) return;
        _this2.player = new playerjs.Player(_this2.iframe);

        _this2.player.on('ready', function () {
          _this2.player.isReady = true;

          _this2.player.on('play', _this2.props.onPlay);

          _this2.player.on('pause', _this2.props.onPause);

          _this2.player.on('seeked', _this2.props.onSeek);

          _this2.player.on('ended', _this2.props.onEnded);

          _this2.player.on('error', _this2.props.onError);

          _this2.player.on('timeupdate', function (_ref) {
            var duration = _ref.duration,
                seconds = _ref.seconds;
            _this2.duration = duration;
            _this2.currentTime = seconds;
          });

          _this2.player.on('buffered', function (_ref2) {
            var percent = _ref2.percent;

            if (_this2.duration) {
              _this2.secondsLoaded = _this2.duration * percent;
            }
          });

          _this2.player.setLoop(_this2.props.loop);

          if (_this2.props.muted) {
            _this2.player.mute();
          }

          setTimeout(function () {
            _this2.props.onReady();
          });
        });
      }, this.props.onError);
    }
  }, {
    key: "play",
    value: function play() {
      this.callPlayer('play');
    }
  }, {
    key: "pause",
    value: function pause() {
      this.callPlayer('pause');
    }
  }, {
    key: "stop",
    value: function stop() {// Nothing to do
    }
  }, {
    key: "seekTo",
    value: function seekTo(seconds) {
      this.callPlayer('setCurrentTime', seconds);
    }
  }, {
    key: "setVolume",
    value: function setVolume(fraction) {
      this.callPlayer('setVolume', fraction);
    }
  }, {
    key: "setLoop",
    value: function setLoop(loop) {
      this.callPlayer('setLoop', loop);
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return this.duration;
    }
  }, {
    key: "getCurrentTime",
    value: function getCurrentTime() {
      return this.currentTime;
    }
  }, {
    key: "getSecondsLoaded",
    value: function getSecondsLoaded() {
      return this.secondsLoaded;
    }
  }, {
    key: "render",
    value: function render() {
      var style = {
        width: '100%',
        height: '100%'
      };
      return /*#__PURE__*/_react["default"].createElement("iframe", {
        ref: this.ref,
        src: this.props.url,
        frameBorder: "0",
        scrolling: "no",
        style: style,
        allowFullScreen: true,
        allow: "encrypted-media",
        referrerPolicy: "no-referrer-when-downgrade"
      });
    }
  }]);

  return Kaltura;
}(_react.Component);

exports["default"] = Kaltura;

_defineProperty(Kaltura, "displayName", 'Kaltura');

_defineProperty(Kaltura, "canPlay", _patterns.canPlay.kaltura);

/***/ }),

/***/ "./node_modules/react-player/lib/players/Mixcloud.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Mixcloud.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/react-player/lib/utils.js");

var _patterns = __webpack_require__(/*! ../patterns */ "./node_modules/react-player/lib/patterns.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var SDK_URL = 'https://widget.mixcloud.com/media/js/widgetApi.js';
var SDK_GLOBAL = 'Mixcloud';

var Mixcloud = /*#__PURE__*/function (_Component) {
  _inherits(Mixcloud, _Component);

  var _super = _createSuper(Mixcloud);

  function Mixcloud() {
    var _this;

    _classCallCheck(this, Mixcloud);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    _defineProperty(_assertThisInitialized(_this), "duration", null);

    _defineProperty(_assertThisInitialized(_this), "currentTime", null);

    _defineProperty(_assertThisInitialized(_this), "secondsLoaded", null);

    _defineProperty(_assertThisInitialized(_this), "mute", function () {// No volume support
    });

    _defineProperty(_assertThisInitialized(_this), "unmute", function () {// No volume support
    });

    _defineProperty(_assertThisInitialized(_this), "ref", function (iframe) {
      _this.iframe = iframe;
    });

    return _this;
  }

  _createClass(Mixcloud, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onMount && this.props.onMount(this);
    }
  }, {
    key: "load",
    value: function load(url) {
      var _this2 = this;

      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function (Mixcloud) {
        _this2.player = Mixcloud.PlayerWidget(_this2.iframe);

        _this2.player.ready.then(function () {
          _this2.player.events.play.on(_this2.props.onPlay);

          _this2.player.events.pause.on(_this2.props.onPause);

          _this2.player.events.ended.on(_this2.props.onEnded);

          _this2.player.events.error.on(_this2.props.error);

          _this2.player.events.progress.on(function (seconds, duration) {
            _this2.currentTime = seconds;
            _this2.duration = duration;
          });

          _this2.props.onReady();
        });
      }, this.props.onError);
    }
  }, {
    key: "play",
    value: function play() {
      this.callPlayer('play');
    }
  }, {
    key: "pause",
    value: function pause() {
      this.callPlayer('pause');
    }
  }, {
    key: "stop",
    value: function stop() {// Nothing to do
    }
  }, {
    key: "seekTo",
    value: function seekTo(seconds) {
      this.callPlayer('seek', seconds);
    }
  }, {
    key: "setVolume",
    value: function setVolume(fraction) {// No volume support
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return this.duration;
    }
  }, {
    key: "getCurrentTime",
    value: function getCurrentTime() {
      return this.currentTime;
    }
  }, {
    key: "getSecondsLoaded",
    value: function getSecondsLoaded() {
      return null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          url = _this$props.url,
          config = _this$props.config;
      var id = url.match(_patterns.MATCH_URL_MIXCLOUD)[1];
      var style = {
        width: '100%',
        height: '100%'
      };
      var query = (0, _utils.queryString)(_objectSpread(_objectSpread({}, config.options), {}, {
        feed: "/".concat(id, "/")
      })); // We have to give the iframe a key here to prevent a
      // weird dialog appearing when loading a new track

      return /*#__PURE__*/_react["default"].createElement("iframe", {
        key: id,
        ref: this.ref,
        style: style,
        src: "https://www.mixcloud.com/widget/iframe/?".concat(query),
        frameBorder: "0"
      });
    }
  }]);

  return Mixcloud;
}(_react.Component);

exports["default"] = Mixcloud;

_defineProperty(Mixcloud, "displayName", 'Mixcloud');

_defineProperty(Mixcloud, "canPlay", _patterns.canPlay.mixcloud);

_defineProperty(Mixcloud, "loopOnEnded", true);

/***/ }),

/***/ "./node_modules/react-player/lib/players/SoundCloud.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/SoundCloud.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/react-player/lib/utils.js");

var _patterns = __webpack_require__(/*! ../patterns */ "./node_modules/react-player/lib/patterns.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var SDK_URL = 'https://w.soundcloud.com/player/api.js';
var SDK_GLOBAL = 'SC';

var SoundCloud = /*#__PURE__*/function (_Component) {
  _inherits(SoundCloud, _Component);

  var _super = _createSuper(SoundCloud);

  function SoundCloud() {
    var _this;

    _classCallCheck(this, SoundCloud);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    _defineProperty(_assertThisInitialized(_this), "duration", null);

    _defineProperty(_assertThisInitialized(_this), "currentTime", null);

    _defineProperty(_assertThisInitialized(_this), "fractionLoaded", null);

    _defineProperty(_assertThisInitialized(_this), "mute", function () {
      _this.setVolume(0);
    });

    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
      if (_this.props.volume !== null) {
        _this.setVolume(_this.props.volume);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "ref", function (iframe) {
      _this.iframe = iframe;
    });

    return _this;
  }

  _createClass(SoundCloud, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onMount && this.props.onMount(this);
    }
  }, {
    key: "load",
    value: function load(url, isReady) {
      var _this2 = this;

      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function (SC) {
        if (!_this2.iframe) return;
        var _SC$Widget$Events = SC.Widget.Events,
            PLAY = _SC$Widget$Events.PLAY,
            PLAY_PROGRESS = _SC$Widget$Events.PLAY_PROGRESS,
            PAUSE = _SC$Widget$Events.PAUSE,
            FINISH = _SC$Widget$Events.FINISH,
            ERROR = _SC$Widget$Events.ERROR;

        if (!isReady) {
          _this2.player = SC.Widget(_this2.iframe);

          _this2.player.bind(PLAY, _this2.props.onPlay);

          _this2.player.bind(PAUSE, function () {
            var remaining = _this2.duration - _this2.currentTime;

            if (remaining < 0.05) {
              // Prevent onPause firing right before onEnded
              return;
            }

            _this2.props.onPause();
          });

          _this2.player.bind(PLAY_PROGRESS, function (e) {
            _this2.currentTime = e.currentPosition / 1000;
            _this2.fractionLoaded = e.loadedProgress;
          });

          _this2.player.bind(FINISH, function () {
            return _this2.props.onEnded();
          });

          _this2.player.bind(ERROR, function (e) {
            return _this2.props.onError(e);
          });
        }

        _this2.player.load(url, _objectSpread(_objectSpread({}, _this2.props.config.options), {}, {
          callback: function callback() {
            _this2.player.getDuration(function (duration) {
              _this2.duration = duration / 1000;

              _this2.props.onReady();
            });
          }
        }));
      });
    }
  }, {
    key: "play",
    value: function play() {
      this.callPlayer('play');
    }
  }, {
    key: "pause",
    value: function pause() {
      this.callPlayer('pause');
    }
  }, {
    key: "stop",
    value: function stop() {// Nothing to do
    }
  }, {
    key: "seekTo",
    value: function seekTo(seconds) {
      this.callPlayer('seekTo', seconds * 1000);
    }
  }, {
    key: "setVolume",
    value: function setVolume(fraction) {
      this.callPlayer('setVolume', fraction * 100);
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return this.duration;
    }
  }, {
    key: "getCurrentTime",
    value: function getCurrentTime() {
      return this.currentTime;
    }
  }, {
    key: "getSecondsLoaded",
    value: function getSecondsLoaded() {
      return this.fractionLoaded * this.duration;
    }
  }, {
    key: "render",
    value: function render() {
      var display = this.props.display;
      var style = {
        width: '100%',
        height: '100%',
        display: display
      };
      return /*#__PURE__*/_react["default"].createElement("iframe", {
        ref: this.ref,
        src: "https://w.soundcloud.com/player/?url=".concat(encodeURIComponent(this.props.url)),
        style: style,
        frameBorder: 0,
        allow: "autoplay"
      });
    }
  }]);

  return SoundCloud;
}(_react.Component);

exports["default"] = SoundCloud;

_defineProperty(SoundCloud, "displayName", 'SoundCloud');

_defineProperty(SoundCloud, "canPlay", _patterns.canPlay.soundcloud);

_defineProperty(SoundCloud, "loopOnEnded", true);

/***/ }),

/***/ "./node_modules/react-player/lib/players/Streamable.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/Streamable.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/react-player/lib/utils.js");

var _patterns = __webpack_require__(/*! ../patterns */ "./node_modules/react-player/lib/patterns.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var SDK_URL = 'https://cdn.embed.ly/player-0.1.0.min.js';
var SDK_GLOBAL = 'playerjs';

var Streamable = /*#__PURE__*/function (_Component) {
  _inherits(Streamable, _Component);

  var _super = _createSuper(Streamable);

  function Streamable() {
    var _this;

    _classCallCheck(this, Streamable);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    _defineProperty(_assertThisInitialized(_this), "duration", null);

    _defineProperty(_assertThisInitialized(_this), "currentTime", null);

    _defineProperty(_assertThisInitialized(_this), "secondsLoaded", null);

    _defineProperty(_assertThisInitialized(_this), "mute", function () {
      _this.callPlayer('mute');
    });

    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
      _this.callPlayer('unmute');
    });

    _defineProperty(_assertThisInitialized(_this), "ref", function (iframe) {
      _this.iframe = iframe;
    });

    return _this;
  }

  _createClass(Streamable, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onMount && this.props.onMount(this);
    }
  }, {
    key: "load",
    value: function load(url) {
      var _this2 = this;

      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function (playerjs) {
        if (!_this2.iframe) return;
        _this2.player = new playerjs.Player(_this2.iframe);

        _this2.player.setLoop(_this2.props.loop);

        _this2.player.on('ready', _this2.props.onReady);

        _this2.player.on('play', _this2.props.onPlay);

        _this2.player.on('pause', _this2.props.onPause);

        _this2.player.on('seeked', _this2.props.onSeek);

        _this2.player.on('ended', _this2.props.onEnded);

        _this2.player.on('error', _this2.props.onError);

        _this2.player.on('timeupdate', function (_ref) {
          var duration = _ref.duration,
              seconds = _ref.seconds;
          _this2.duration = duration;
          _this2.currentTime = seconds;
        });

        _this2.player.on('buffered', function (_ref2) {
          var percent = _ref2.percent;

          if (_this2.duration) {
            _this2.secondsLoaded = _this2.duration * percent;
          }
        });

        if (_this2.props.muted) {
          _this2.player.mute();
        }
      }, this.props.onError);
    }
  }, {
    key: "play",
    value: function play() {
      this.callPlayer('play');
    }
  }, {
    key: "pause",
    value: function pause() {
      this.callPlayer('pause');
    }
  }, {
    key: "stop",
    value: function stop() {// Nothing to do
    }
  }, {
    key: "seekTo",
    value: function seekTo(seconds) {
      this.callPlayer('setCurrentTime', seconds);
    }
  }, {
    key: "setVolume",
    value: function setVolume(fraction) {
      this.callPlayer('setVolume', fraction * 100);
    }
  }, {
    key: "setLoop",
    value: function setLoop(loop) {
      this.callPlayer('setLoop', loop);
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return this.duration;
    }
  }, {
    key: "getCurrentTime",
    value: function getCurrentTime() {
      return this.currentTime;
    }
  }, {
    key: "getSecondsLoaded",
    value: function getSecondsLoaded() {
      return this.secondsLoaded;
    }
  }, {
    key: "render",
    value: function render() {
      var id = this.props.url.match(_patterns.MATCH_URL_STREAMABLE)[1];
      var style = {
        width: '100%',
        height: '100%'
      };
      return /*#__PURE__*/_react["default"].createElement("iframe", {
        ref: this.ref,
        src: "https://streamable.com/o/".concat(id),
        frameBorder: "0",
        scrolling: "no",
        style: style,
        allowFullScreen: true
      });
    }
  }]);

  return Streamable;
}(_react.Component);

exports["default"] = Streamable;

_defineProperty(Streamable, "displayName", 'Streamable');

_defineProperty(Streamable, "canPlay", _patterns.canPlay.streamable);

/***/ }),

/***/ "./node_modules/react-player/lib/players/Twitch.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Twitch.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/react-player/lib/utils.js");

var _patterns = __webpack_require__(/*! ../patterns */ "./node_modules/react-player/lib/patterns.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var SDK_URL = 'https://player.twitch.tv/js/embed/v1.js';
var SDK_GLOBAL = 'Twitch';
var PLAYER_ID_PREFIX = 'twitch-player-';

var Twitch = /*#__PURE__*/function (_Component) {
  _inherits(Twitch, _Component);

  var _super = _createSuper(Twitch);

  function Twitch() {
    var _this;

    _classCallCheck(this, Twitch);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    _defineProperty(_assertThisInitialized(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));

    _defineProperty(_assertThisInitialized(_this), "mute", function () {
      _this.callPlayer('setMuted', true);
    });

    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
      _this.callPlayer('setMuted', false);
    });

    return _this;
  }

  _createClass(Twitch, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onMount && this.props.onMount(this);
    }
  }, {
    key: "load",
    value: function load(url, isReady) {
      var _this2 = this;

      var _this$props = this.props,
          playsinline = _this$props.playsinline,
          onError = _this$props.onError,
          config = _this$props.config,
          controls = _this$props.controls;

      var isChannel = _patterns.MATCH_URL_TWITCH_CHANNEL.test(url);

      var id = isChannel ? url.match(_patterns.MATCH_URL_TWITCH_CHANNEL)[1] : url.match(_patterns.MATCH_URL_TWITCH_VIDEO)[1];

      if (isReady) {
        if (isChannel) {
          this.player.setChannel(id);
        } else {
          this.player.setVideo('v' + id);
        }

        return;
      }

      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function (Twitch) {
        _this2.player = new Twitch.Player(_this2.playerID, _objectSpread({
          video: isChannel ? '' : id,
          channel: isChannel ? id : '',
          height: '100%',
          width: '100%',
          playsinline: playsinline,
          autoplay: _this2.props.playing,
          muted: _this2.props.muted,
          // https://github.com/CookPete/react-player/issues/733#issuecomment-549085859
          controls: isChannel ? true : controls,
          time: (0, _utils.parseStartTime)(url)
        }, config.options));
        var _Twitch$Player = Twitch.Player,
            READY = _Twitch$Player.READY,
            PLAYING = _Twitch$Player.PLAYING,
            PAUSE = _Twitch$Player.PAUSE,
            ENDED = _Twitch$Player.ENDED,
            ONLINE = _Twitch$Player.ONLINE,
            OFFLINE = _Twitch$Player.OFFLINE;

        _this2.player.addEventListener(READY, _this2.props.onReady);

        _this2.player.addEventListener(PLAYING, _this2.props.onPlay);

        _this2.player.addEventListener(PAUSE, _this2.props.onPause);

        _this2.player.addEventListener(ENDED, _this2.props.onEnded); // Prevent weird isLoading behaviour when streams are offline


        _this2.player.addEventListener(ONLINE, _this2.props.onLoaded);

        _this2.player.addEventListener(OFFLINE, _this2.props.onLoaded);
      }, onError);
    }
  }, {
    key: "play",
    value: function play() {
      this.callPlayer('play');
    }
  }, {
    key: "pause",
    value: function pause() {
      this.callPlayer('pause');
    }
  }, {
    key: "stop",
    value: function stop() {
      this.callPlayer('pause');
    }
  }, {
    key: "seekTo",
    value: function seekTo(seconds) {
      this.callPlayer('seek', seconds);
    }
  }, {
    key: "setVolume",
    value: function setVolume(fraction) {
      this.callPlayer('setVolume', fraction);
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return this.callPlayer('getDuration');
    }
  }, {
    key: "getCurrentTime",
    value: function getCurrentTime() {
      return this.callPlayer('getCurrentTime');
    }
  }, {
    key: "getSecondsLoaded",
    value: function getSecondsLoaded() {
      return null;
    }
  }, {
    key: "render",
    value: function render() {
      var style = {
        width: '100%',
        height: '100%'
      };
      return /*#__PURE__*/_react["default"].createElement("div", {
        style: style,
        id: this.playerID
      });
    }
  }]);

  return Twitch;
}(_react.Component);

exports["default"] = Twitch;

_defineProperty(Twitch, "displayName", 'Twitch');

_defineProperty(Twitch, "canPlay", _patterns.canPlay.twitch);

_defineProperty(Twitch, "loopOnEnded", true);

/***/ }),

/***/ "./node_modules/react-player/lib/players/Vidyard.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Vidyard.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/react-player/lib/utils.js");

var _patterns = __webpack_require__(/*! ../patterns */ "./node_modules/react-player/lib/patterns.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var SDK_URL = 'https://play.vidyard.com/embed/v4.js';
var SDK_GLOBAL = 'VidyardV4';
var SDK_GLOBAL_READY = 'onVidyardAPI';

var Vidyard = /*#__PURE__*/function (_Component) {
  _inherits(Vidyard, _Component);

  var _super = _createSuper(Vidyard);

  function Vidyard() {
    var _this;

    _classCallCheck(this, Vidyard);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    _defineProperty(_assertThisInitialized(_this), "mute", function () {
      _this.setVolume(0);
    });

    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
      if (_this.props.volume !== null) {
        _this.setVolume(_this.props.volume);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "ref", function (container) {
      _this.container = container;
    });

    return _this;
  }

  _createClass(Vidyard, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onMount && this.props.onMount(this);
    }
  }, {
    key: "load",
    value: function load(url) {
      var _this2 = this;

      var _this$props = this.props,
          playing = _this$props.playing,
          config = _this$props.config,
          onError = _this$props.onError,
          onDuration = _this$props.onDuration;
      var id = url && url.match(_patterns.MATCH_URL_VIDYARD)[1];

      if (this.player) {
        this.stop();
      }

      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function (Vidyard) {
        if (!_this2.container) return;
        Vidyard.api.addReadyListener(function (data, player) {
          _this2.player = player;

          _this2.player.on('ready', _this2.props.onReady);

          _this2.player.on('play', _this2.props.onPlay);

          _this2.player.on('pause', _this2.props.onPause);

          _this2.player.on('seek', _this2.props.onSeek);

          _this2.player.on('playerComplete', _this2.props.onEnded);
        }, id);
        Vidyard.api.renderPlayer(_objectSpread({
          uuid: id,
          container: _this2.container,
          autoplay: playing ? 1 : 0
        }, config.options));
        Vidyard.api.getPlayerMetadata(id).then(function (meta) {
          _this2.duration = meta.length_in_seconds;
          onDuration(meta.length_in_seconds);
        });
      }, onError);
    }
  }, {
    key: "play",
    value: function play() {
      this.callPlayer('play');
    }
  }, {
    key: "pause",
    value: function pause() {
      this.callPlayer('pause');
    }
  }, {
    key: "stop",
    value: function stop() {
      window.VidyardV4.api.destroyPlayer(this.player);
    }
  }, {
    key: "seekTo",
    value: function seekTo(amount) {
      this.callPlayer('seek', amount);
    }
  }, {
    key: "setVolume",
    value: function setVolume(fraction) {
      this.callPlayer('setVolume', fraction);
    }
  }, {
    key: "setPlaybackRate",
    value: function setPlaybackRate(rate) {
      this.callPlayer('setPlaybackSpeed', rate);
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return this.duration;
    }
  }, {
    key: "getCurrentTime",
    value: function getCurrentTime() {
      return this.callPlayer('currentTime');
    }
  }, {
    key: "getSecondsLoaded",
    value: function getSecondsLoaded() {
      return null;
    }
  }, {
    key: "render",
    value: function render() {
      var display = this.props.display;
      var style = {
        width: '100%',
        height: '100%',
        display: display
      };
      return /*#__PURE__*/_react["default"].createElement("div", {
        style: style
      }, /*#__PURE__*/_react["default"].createElement("div", {
        ref: this.ref
      }));
    }
  }]);

  return Vidyard;
}(_react.Component);

exports["default"] = Vidyard;

_defineProperty(Vidyard, "displayName", 'Vidyard');

_defineProperty(Vidyard, "canPlay", _patterns.canPlay.vidyard);

/***/ }),

/***/ "./node_modules/react-player/lib/players/Vimeo.js":
/*!********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Vimeo.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/react-player/lib/utils.js");

var _patterns = __webpack_require__(/*! ../patterns */ "./node_modules/react-player/lib/patterns.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var SDK_URL = 'https://player.vimeo.com/api/player.js';
var SDK_GLOBAL = 'Vimeo';

var Vimeo = /*#__PURE__*/function (_Component) {
  _inherits(Vimeo, _Component);

  var _super = _createSuper(Vimeo);

  function Vimeo() {
    var _this;

    _classCallCheck(this, Vimeo);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    _defineProperty(_assertThisInitialized(_this), "duration", null);

    _defineProperty(_assertThisInitialized(_this), "currentTime", null);

    _defineProperty(_assertThisInitialized(_this), "secondsLoaded", null);

    _defineProperty(_assertThisInitialized(_this), "mute", function () {
      _this.setVolume(0);
    });

    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
      if (_this.props.volume !== null) {
        _this.setVolume(_this.props.volume);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "ref", function (container) {
      _this.container = container;
    });

    return _this;
  }

  _createClass(Vimeo, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onMount && this.props.onMount(this);
    }
  }, {
    key: "load",
    value: function load(url) {
      var _this2 = this;

      this.duration = null;
      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function (Vimeo) {
        if (!_this2.container) return;
        _this2.player = new Vimeo.Player(_this2.container, _objectSpread({
          url: url,
          autoplay: _this2.props.playing,
          muted: _this2.props.muted,
          loop: _this2.props.loop,
          playsinline: _this2.props.playsinline,
          controls: _this2.props.controls
        }, _this2.props.config.playerOptions));

        _this2.player.ready().then(function () {
          var iframe = _this2.container.querySelector('iframe');

          iframe.style.width = '100%';
          iframe.style.height = '100%';
        })["catch"](_this2.props.onError);

        _this2.player.on('loaded', function () {
          _this2.props.onReady();

          _this2.refreshDuration();
        });

        _this2.player.on('play', function () {
          _this2.props.onPlay();

          _this2.refreshDuration();
        });

        _this2.player.on('pause', _this2.props.onPause);

        _this2.player.on('seeked', function (e) {
          return _this2.props.onSeek(e.seconds);
        });

        _this2.player.on('ended', _this2.props.onEnded);

        _this2.player.on('error', _this2.props.onError);

        _this2.player.on('timeupdate', function (_ref) {
          var seconds = _ref.seconds;
          _this2.currentTime = seconds;
        });

        _this2.player.on('progress', function (_ref2) {
          var seconds = _ref2.seconds;
          _this2.secondsLoaded = seconds;
        });

        _this2.player.on('bufferstart', _this2.props.onBuffer);

        _this2.player.on('bufferend', _this2.props.onBufferEnd);
      }, this.props.onError);
    }
  }, {
    key: "refreshDuration",
    value: function refreshDuration() {
      var _this3 = this;

      this.player.getDuration().then(function (duration) {
        _this3.duration = duration;
      });
    }
  }, {
    key: "play",
    value: function play() {
      var promise = this.callPlayer('play');

      if (promise) {
        promise["catch"](this.props.onError);
      }
    }
  }, {
    key: "pause",
    value: function pause() {
      this.callPlayer('pause');
    }
  }, {
    key: "stop",
    value: function stop() {
      this.callPlayer('unload');
    }
  }, {
    key: "seekTo",
    value: function seekTo(seconds) {
      this.callPlayer('setCurrentTime', seconds);
    }
  }, {
    key: "setVolume",
    value: function setVolume(fraction) {
      this.callPlayer('setVolume', fraction);
    }
  }, {
    key: "setLoop",
    value: function setLoop(loop) {
      this.callPlayer('setLoop', loop);
    }
  }, {
    key: "setPlaybackRate",
    value: function setPlaybackRate(rate) {
      this.callPlayer('setPlaybackRate', rate);
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return this.duration;
    }
  }, {
    key: "getCurrentTime",
    value: function getCurrentTime() {
      return this.currentTime;
    }
  }, {
    key: "getSecondsLoaded",
    value: function getSecondsLoaded() {
      return this.secondsLoaded;
    }
  }, {
    key: "render",
    value: function render() {
      var display = this.props.display;
      var style = {
        width: '100%',
        height: '100%',
        overflow: 'hidden',
        display: display
      };
      return /*#__PURE__*/_react["default"].createElement("div", {
        key: this.props.url,
        ref: this.ref,
        style: style
      });
    }
  }]);

  return Vimeo;
}(_react.Component);

exports["default"] = Vimeo;

_defineProperty(Vimeo, "displayName", 'Vimeo');

_defineProperty(Vimeo, "canPlay", _patterns.canPlay.vimeo);

_defineProperty(Vimeo, "forceLoad", true);

/***/ }),

/***/ "./node_modules/react-player/lib/players/Wistia.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Wistia.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/react-player/lib/utils.js");

var _patterns = __webpack_require__(/*! ../patterns */ "./node_modules/react-player/lib/patterns.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var SDK_URL = 'https://fast.wistia.com/assets/external/E-v1.js';
var SDK_GLOBAL = 'Wistia';
var PLAYER_ID_PREFIX = 'wistia-player-';

var Wistia = /*#__PURE__*/function (_Component) {
  _inherits(Wistia, _Component);

  var _super = _createSuper(Wistia);

  function Wistia() {
    var _this;

    _classCallCheck(this, Wistia);

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(_args));

    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    _defineProperty(_assertThisInitialized(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));

    _defineProperty(_assertThisInitialized(_this), "onPlay", function () {
      var _this$props;

      return (_this$props = _this.props).onPlay.apply(_this$props, arguments);
    });

    _defineProperty(_assertThisInitialized(_this), "onPause", function () {
      var _this$props2;

      return (_this$props2 = _this.props).onPause.apply(_this$props2, arguments);
    });

    _defineProperty(_assertThisInitialized(_this), "onSeek", function () {
      var _this$props3;

      return (_this$props3 = _this.props).onSeek.apply(_this$props3, arguments);
    });

    _defineProperty(_assertThisInitialized(_this), "onEnded", function () {
      var _this$props4;

      return (_this$props4 = _this.props).onEnded.apply(_this$props4, arguments);
    });

    _defineProperty(_assertThisInitialized(_this), "mute", function () {
      _this.callPlayer('mute');
    });

    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
      _this.callPlayer('unmute');
    });

    return _this;
  }

  _createClass(Wistia, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onMount && this.props.onMount(this);
    }
  }, {
    key: "load",
    value: function load(url) {
      var _this2 = this;

      var _this$props5 = this.props,
          playing = _this$props5.playing,
          muted = _this$props5.muted,
          controls = _this$props5.controls,
          _onReady = _this$props5.onReady,
          config = _this$props5.config,
          onError = _this$props5.onError;
      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function (Wistia) {
        if (config.customControls) {
          config.customControls.forEach(function (control) {
            return Wistia.defineControl(control);
          });
        }

        window._wq = window._wq || [];

        window._wq.push({
          id: _this2.playerID,
          options: _objectSpread({
            autoPlay: playing,
            silentAutoPlay: 'allow',
            muted: muted,
            controlsVisibleOnLoad: controls,
            fullscreenButton: controls,
            playbar: controls,
            playbackRateControl: controls,
            qualityControl: controls,
            volumeControl: controls,
            settingsControl: controls,
            smallPlayButton: controls
          }, config.options),
          onReady: function onReady(player) {
            _this2.player = player;

            _this2.unbind();

            _this2.player.bind('play', _this2.onPlay);

            _this2.player.bind('pause', _this2.onPause);

            _this2.player.bind('seek', _this2.onSeek);

            _this2.player.bind('end', _this2.onEnded);

            _onReady();
          }
        });
      }, onError);
    }
  }, {
    key: "unbind",
    value: function unbind() {
      this.player.unbind('play', this.onPlay);
      this.player.unbind('pause', this.onPause);
      this.player.unbind('seek', this.onSeek);
      this.player.unbind('end', this.onEnded);
    } // Proxy methods to prevent listener leaks

  }, {
    key: "play",
    value: function play() {
      this.callPlayer('play');
    }
  }, {
    key: "pause",
    value: function pause() {
      this.callPlayer('pause');
    }
  }, {
    key: "stop",
    value: function stop() {
      this.unbind();
      this.callPlayer('remove');
    }
  }, {
    key: "seekTo",
    value: function seekTo(seconds) {
      this.callPlayer('time', seconds);
    }
  }, {
    key: "setVolume",
    value: function setVolume(fraction) {
      this.callPlayer('volume', fraction);
    }
  }, {
    key: "setPlaybackRate",
    value: function setPlaybackRate(rate) {
      this.callPlayer('playbackRate', rate);
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return this.callPlayer('duration');
    }
  }, {
    key: "getCurrentTime",
    value: function getCurrentTime() {
      return this.callPlayer('time');
    }
  }, {
    key: "getSecondsLoaded",
    value: function getSecondsLoaded() {
      return null;
    }
  }, {
    key: "render",
    value: function render() {
      var url = this.props.url;
      var videoID = url && url.match(_patterns.MATCH_URL_WISTIA)[1];
      var className = "wistia_embed wistia_async_".concat(videoID);
      var style = {
        width: '100%',
        height: '100%'
      };
      return /*#__PURE__*/_react["default"].createElement("div", {
        id: this.playerID,
        key: videoID,
        className: className,
        style: style
      });
    }
  }]);

  return Wistia;
}(_react.Component);

exports["default"] = Wistia;

_defineProperty(Wistia, "displayName", 'Wistia');

_defineProperty(Wistia, "canPlay", _patterns.canPlay.wistia);

_defineProperty(Wistia, "loopOnEnded", true);

/***/ }),

/***/ "./node_modules/react-player/lib/players/YouTube.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/YouTube.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/react-player/lib/utils.js");

var _patterns = __webpack_require__(/*! ../patterns */ "./node_modules/react-player/lib/patterns.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var SDK_URL = 'https://www.youtube.com/iframe_api';
var SDK_GLOBAL = 'YT';
var SDK_GLOBAL_READY = 'onYouTubeIframeAPIReady';
var MATCH_PLAYLIST = /[?&](?:list|channel)=([a-zA-Z0-9_-]+)/;
var MATCH_USER_UPLOADS = /user\/([a-zA-Z0-9_-]+)\/?/;
var MATCH_NOCOOKIE = /youtube-nocookie\.com/;
var NOCOOKIE_HOST = 'https://www.youtube-nocookie.com';

var YouTube = /*#__PURE__*/function (_Component) {
  _inherits(YouTube, _Component);

  var _super = _createSuper(YouTube);

  function YouTube() {
    var _this;

    _classCallCheck(this, YouTube);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    _defineProperty(_assertThisInitialized(_this), "parsePlaylist", function (url) {
      if (url instanceof Array) {
        return {
          listType: 'playlist',
          playlist: url.map(_this.getID).join(',')
        };
      }

      if (MATCH_PLAYLIST.test(url)) {
        var _url$match = url.match(MATCH_PLAYLIST),
            _url$match2 = _slicedToArray(_url$match, 2),
            playlistId = _url$match2[1];

        return {
          listType: 'playlist',
          list: playlistId.replace(/^UC/, 'UU')
        };
      }

      if (MATCH_USER_UPLOADS.test(url)) {
        var _url$match3 = url.match(MATCH_USER_UPLOADS),
            _url$match4 = _slicedToArray(_url$match3, 2),
            username = _url$match4[1];

        return {
          listType: 'user_uploads',
          list: username
        };
      }

      return {};
    });

    _defineProperty(_assertThisInitialized(_this), "onStateChange", function (event) {
      var data = event.data;
      var _this$props = _this.props,
          onPlay = _this$props.onPlay,
          onPause = _this$props.onPause,
          onBuffer = _this$props.onBuffer,
          onBufferEnd = _this$props.onBufferEnd,
          onEnded = _this$props.onEnded,
          onReady = _this$props.onReady,
          loop = _this$props.loop,
          _this$props$config = _this$props.config,
          playerVars = _this$props$config.playerVars,
          onUnstarted = _this$props$config.onUnstarted;
      var _window$SDK_GLOBAL$Pl = window[SDK_GLOBAL].PlayerState,
          UNSTARTED = _window$SDK_GLOBAL$Pl.UNSTARTED,
          PLAYING = _window$SDK_GLOBAL$Pl.PLAYING,
          PAUSED = _window$SDK_GLOBAL$Pl.PAUSED,
          BUFFERING = _window$SDK_GLOBAL$Pl.BUFFERING,
          ENDED = _window$SDK_GLOBAL$Pl.ENDED,
          CUED = _window$SDK_GLOBAL$Pl.CUED;
      if (data === UNSTARTED) onUnstarted();

      if (data === PLAYING) {
        onPlay();
        onBufferEnd();
      }

      if (data === PAUSED) onPause();
      if (data === BUFFERING) onBuffer();

      if (data === ENDED) {
        var isPlaylist = !!_this.callPlayer('getPlaylist'); // Only loop manually if not playing a playlist

        if (loop && !isPlaylist) {
          if (playerVars.start) {
            _this.seekTo(playerVars.start);
          } else {
            _this.play();
          }
        }

        onEnded();
      }

      if (data === CUED) onReady();
    });

    _defineProperty(_assertThisInitialized(_this), "mute", function () {
      _this.callPlayer('mute');
    });

    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
      _this.callPlayer('unMute');
    });

    _defineProperty(_assertThisInitialized(_this), "ref", function (container) {
      _this.container = container;
    });

    return _this;
  }

  _createClass(YouTube, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onMount && this.props.onMount(this);
    }
  }, {
    key: "getID",
    value: function getID(url) {
      if (!url || url instanceof Array || MATCH_PLAYLIST.test(url)) {
        return null;
      }

      return url.match(_patterns.MATCH_URL_YOUTUBE)[1];
    }
  }, {
    key: "load",
    value: function load(url, isReady) {
      var _this2 = this;

      var _this$props2 = this.props,
          playing = _this$props2.playing,
          muted = _this$props2.muted,
          playsinline = _this$props2.playsinline,
          controls = _this$props2.controls,
          loop = _this$props2.loop,
          config = _this$props2.config,
          _onError = _this$props2.onError;
      var playerVars = config.playerVars,
          embedOptions = config.embedOptions;
      var id = this.getID(url);

      if (isReady) {
        if (MATCH_PLAYLIST.test(url) || MATCH_USER_UPLOADS.test(url) || url instanceof Array) {
          this.player.loadPlaylist(this.parsePlaylist(url));
          return;
        }

        this.player.cueVideoById({
          videoId: id,
          startSeconds: (0, _utils.parseStartTime)(url) || playerVars.start,
          endSeconds: (0, _utils.parseEndTime)(url) || playerVars.end
        });
        return;
      }

      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function (YT) {
        return YT.loaded;
      }).then(function (YT) {
        if (!_this2.container) return;
        _this2.player = new YT.Player(_this2.container, _objectSpread({
          width: '100%',
          height: '100%',
          videoId: id,
          playerVars: _objectSpread(_objectSpread({
            autoplay: playing ? 1 : 0,
            mute: muted ? 1 : 0,
            controls: controls ? 1 : 0,
            start: (0, _utils.parseStartTime)(url),
            end: (0, _utils.parseEndTime)(url),
            origin: window.location.origin,
            playsinline: playsinline ? 1 : 0
          }, _this2.parsePlaylist(url)), playerVars),
          events: {
            onReady: function onReady() {
              if (loop) {
                _this2.player.setLoop(true); // Enable playlist looping

              }

              _this2.props.onReady();
            },
            onStateChange: _this2.onStateChange,
            onError: function onError(event) {
              return _onError(event.data);
            }
          },
          host: MATCH_NOCOOKIE.test(url) ? NOCOOKIE_HOST : undefined
        }, embedOptions));
      }, _onError);

      if (embedOptions.events) {
        console.warn('Using `embedOptions.events` will likely break things. Use ReactPlayer’s callback props instead, eg onReady, onPlay, onPause');
      }
    }
  }, {
    key: "play",
    value: function play() {
      this.callPlayer('playVideo');
    }
  }, {
    key: "pause",
    value: function pause() {
      this.callPlayer('pauseVideo');
    }
  }, {
    key: "stop",
    value: function stop() {
      if (!document.body.contains(this.callPlayer('getIframe'))) return;
      this.callPlayer('stopVideo');
    }
  }, {
    key: "seekTo",
    value: function seekTo(amount) {
      this.callPlayer('seekTo', amount);

      if (!this.props.playing) {
        this.pause();
      }
    }
  }, {
    key: "setVolume",
    value: function setVolume(fraction) {
      this.callPlayer('setVolume', fraction * 100);
    }
  }, {
    key: "setPlaybackRate",
    value: function setPlaybackRate(rate) {
      this.callPlayer('setPlaybackRate', rate);
    }
  }, {
    key: "setLoop",
    value: function setLoop(loop) {
      this.callPlayer('setLoop', loop);
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return this.callPlayer('getDuration');
    }
  }, {
    key: "getCurrentTime",
    value: function getCurrentTime() {
      return this.callPlayer('getCurrentTime');
    }
  }, {
    key: "getSecondsLoaded",
    value: function getSecondsLoaded() {
      return this.callPlayer('getVideoLoadedFraction') * this.getDuration();
    }
  }, {
    key: "render",
    value: function render() {
      var display = this.props.display;
      var style = {
        width: '100%',
        height: '100%',
        display: display
      };
      return /*#__PURE__*/_react["default"].createElement("div", {
        style: style
      }, /*#__PURE__*/_react["default"].createElement("div", {
        ref: this.ref
      }));
    }
  }]);

  return YouTube;
}(_react.Component);

exports["default"] = YouTube;

_defineProperty(YouTube, "displayName", 'YouTube');

_defineProperty(YouTube, "canPlay", _patterns.canPlay.youtube);

/***/ }),

/***/ "./node_modules/react-player/lib/players/index.js":
/*!********************************************************!*\
  !*** ./node_modules/react-player/lib/players/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = __webpack_require__(/*! react */ "react");

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/react-player/lib/utils.js");

var _patterns = __webpack_require__(/*! ../patterns */ "./node_modules/react-player/lib/patterns.js");

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var _default = [{
  key: 'youtube',
  name: 'YouTube',
  canPlay: _patterns.canPlay.youtube,
  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(__webpack_require__(/*! ./YouTube */ "./node_modules/react-player/lib/players/YouTube.js"));
    });
  })
}, {
  key: 'soundcloud',
  name: 'SoundCloud',
  canPlay: _patterns.canPlay.soundcloud,
  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(__webpack_require__(/*! ./SoundCloud */ "./node_modules/react-player/lib/players/SoundCloud.js"));
    });
  })
}, {
  key: 'vimeo',
  name: 'Vimeo',
  canPlay: _patterns.canPlay.vimeo,
  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(__webpack_require__(/*! ./Vimeo */ "./node_modules/react-player/lib/players/Vimeo.js"));
    });
  })
}, {
  key: 'facebook',
  name: 'Facebook',
  canPlay: _patterns.canPlay.facebook,
  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(__webpack_require__(/*! ./Facebook */ "./node_modules/react-player/lib/players/Facebook.js"));
    });
  })
}, {
  key: 'streamable',
  name: 'Streamable',
  canPlay: _patterns.canPlay.streamable,
  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(__webpack_require__(/*! ./Streamable */ "./node_modules/react-player/lib/players/Streamable.js"));
    });
  })
}, {
  key: 'wistia',
  name: 'Wistia',
  canPlay: _patterns.canPlay.wistia,
  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(__webpack_require__(/*! ./Wistia */ "./node_modules/react-player/lib/players/Wistia.js"));
    });
  })
}, {
  key: 'twitch',
  name: 'Twitch',
  canPlay: _patterns.canPlay.twitch,
  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(__webpack_require__(/*! ./Twitch */ "./node_modules/react-player/lib/players/Twitch.js"));
    });
  })
}, {
  key: 'dailymotion',
  name: 'DailyMotion',
  canPlay: _patterns.canPlay.dailymotion,
  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(__webpack_require__(/*! ./DailyMotion */ "./node_modules/react-player/lib/players/DailyMotion.js"));
    });
  })
}, {
  key: 'mixcloud',
  name: 'Mixcloud',
  canPlay: _patterns.canPlay.mixcloud,
  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(__webpack_require__(/*! ./Mixcloud */ "./node_modules/react-player/lib/players/Mixcloud.js"));
    });
  })
}, {
  key: 'vidyard',
  name: 'Vidyard',
  canPlay: _patterns.canPlay.vidyard,
  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(__webpack_require__(/*! ./Vidyard */ "./node_modules/react-player/lib/players/Vidyard.js"));
    });
  })
}, {
  key: 'kaltura',
  name: 'Kaltura',
  canPlay: _patterns.canPlay.kaltura,
  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(__webpack_require__(/*! ./Kaltura */ "./node_modules/react-player/lib/players/Kaltura.js"));
    });
  })
}, {
  key: 'file',
  name: 'FilePlayer',
  canPlay: _patterns.canPlay.file,
  canEnablePIP: function canEnablePIP(url) {
    return _patterns.canPlay.file(url) && (document.pictureInPictureEnabled || (0, _utils.supportsWebKitPresentationMode)()) && !_patterns.AUDIO_EXTENSIONS.test(url);
  },
  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    return Promise.resolve().then(function () {
      return _interopRequireWildcard(__webpack_require__(/*! ./FilePlayer */ "./node_modules/react-player/lib/players/FilePlayer.js"));
    });
  })
}];
exports["default"] = _default;

/***/ }),

/***/ "./node_modules/react-player/lib/props.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/props.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultProps = exports.propTypes = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var string = _propTypes["default"].string,
    bool = _propTypes["default"].bool,
    number = _propTypes["default"].number,
    array = _propTypes["default"].array,
    oneOfType = _propTypes["default"].oneOfType,
    shape = _propTypes["default"].shape,
    object = _propTypes["default"].object,
    func = _propTypes["default"].func,
    node = _propTypes["default"].node;
var propTypes = {
  url: oneOfType([string, array, object]),
  playing: bool,
  loop: bool,
  controls: bool,
  volume: number,
  muted: bool,
  playbackRate: number,
  width: oneOfType([string, number]),
  height: oneOfType([string, number]),
  style: object,
  progressInterval: number,
  playsinline: bool,
  pip: bool,
  stopOnUnmount: bool,
  light: oneOfType([bool, string]),
  playIcon: node,
  previewTabIndex: number,
  fallback: node,
  wrapper: oneOfType([string, func, shape({
    render: func.isRequired
  })]),
  config: shape({
    soundcloud: shape({
      options: object
    }),
    youtube: shape({
      playerVars: object,
      embedOptions: object,
      onUnstarted: func
    }),
    facebook: shape({
      appId: string,
      version: string,
      playerId: string,
      attributes: object
    }),
    dailymotion: shape({
      params: object
    }),
    vimeo: shape({
      playerOptions: object
    }),
    file: shape({
      attributes: object,
      tracks: array,
      forceVideo: bool,
      forceAudio: bool,
      forceHLS: bool,
      forceDASH: bool,
      forceFLV: bool,
      hlsOptions: object,
      hlsVersion: string,
      dashVersion: string,
      flvVersion: string
    }),
    wistia: shape({
      options: object,
      playerId: string,
      customControls: array
    }),
    mixcloud: shape({
      options: object
    }),
    twitch: shape({
      options: object,
      playerId: string
    }),
    vidyard: shape({
      options: object
    })
  }),
  onReady: func,
  onStart: func,
  onPlay: func,
  onPause: func,
  onBuffer: func,
  onBufferEnd: func,
  onEnded: func,
  onError: func,
  onDuration: func,
  onSeek: func,
  onProgress: func,
  onClickPreview: func,
  onEnablePIP: func,
  onDisablePIP: func
};
exports.propTypes = propTypes;

var noop = function noop() {};

var defaultProps = {
  playing: false,
  loop: false,
  controls: false,
  volume: null,
  muted: false,
  playbackRate: 1,
  width: '640px',
  height: '360px',
  style: {},
  progressInterval: 1000,
  playsinline: false,
  pip: false,
  stopOnUnmount: true,
  light: false,
  fallback: null,
  wrapper: 'div',
  previewTabIndex: 0,
  config: {
    soundcloud: {
      options: {
        visual: true,
        // Undocumented, but makes player fill container and look better
        buying: false,
        liking: false,
        download: false,
        sharing: false,
        show_comments: false,
        show_playcount: false
      }
    },
    youtube: {
      playerVars: {
        playsinline: 1,
        showinfo: 0,
        rel: 0,
        iv_load_policy: 3,
        modestbranding: 1
      },
      embedOptions: {},
      onUnstarted: noop
    },
    facebook: {
      appId: '1309697205772819',
      version: 'v3.3',
      playerId: null,
      attributes: {}
    },
    dailymotion: {
      params: {
        api: 1,
        'endscreen-enable': false
      }
    },
    vimeo: {
      playerOptions: {
        autopause: false,
        byline: false,
        portrait: false,
        title: false
      }
    },
    file: {
      attributes: {},
      tracks: [],
      forceVideo: false,
      forceAudio: false,
      forceHLS: false,
      forceDASH: false,
      forceFLV: false,
      hlsOptions: {},
      hlsVersion: '0.14.16',
      dashVersion: '3.1.3',
      flvVersion: '1.5.0'
    },
    wistia: {
      options: {},
      playerId: null,
      customControls: null
    },
    mixcloud: {
      options: {
        hide_cover: 1
      }
    },
    twitch: {
      options: {},
      playerId: null
    },
    vidyard: {
      options: {}
    }
  },
  onReady: noop,
  onStart: noop,
  onPlay: noop,
  onPause: noop,
  onBuffer: noop,
  onBufferEnd: noop,
  onEnded: noop,
  onError: noop,
  onDuration: noop,
  onSeek: noop,
  onProgress: noop,
  onClickPreview: noop,
  onEnablePIP: noop,
  onDisablePIP: noop
};
exports.defaultProps = defaultProps;

/***/ }),

/***/ "./node_modules/react-player/lib/utils.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/utils.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseStartTime = parseStartTime;
exports.parseEndTime = parseEndTime;
exports.randomString = randomString;
exports.queryString = queryString;
exports.getSDK = getSDK;
exports.getConfig = getConfig;
exports.omit = omit;
exports.callPlayer = callPlayer;
exports.isMediaStream = isMediaStream;
exports.isBlobUrl = isBlobUrl;
exports.supportsWebKitPresentationMode = supportsWebKitPresentationMode;

var _loadScript = _interopRequireDefault(__webpack_require__(/*! load-script */ "./node_modules/load-script/index.js"));

var _deepmerge = _interopRequireDefault(__webpack_require__(/*! deepmerge */ "./node_modules/deepmerge/dist/cjs.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

var MATCH_START_QUERY = /[?&#](?:start|t)=([0-9hms]+)/;
var MATCH_END_QUERY = /[?&#]end=([0-9hms]+)/;
var MATCH_START_STAMP = /(\d+)(h|m|s)/g;
var MATCH_NUMERIC = /^\d+$/; // Parse YouTube URL for a start time param, ie ?t=1h14m30s
// and return the start time in seconds

function parseTimeParam(url, pattern) {
  if (url instanceof Array) {
    return undefined;
  }

  var match = url.match(pattern);

  if (match) {
    var stamp = match[1];

    if (stamp.match(MATCH_START_STAMP)) {
      return parseTimeString(stamp);
    }

    if (MATCH_NUMERIC.test(stamp)) {
      return parseInt(stamp);
    }
  }

  return undefined;
}

function parseTimeString(stamp) {
  var seconds = 0;
  var array = MATCH_START_STAMP.exec(stamp);

  while (array !== null) {
    var _array = array,
        _array2 = _slicedToArray(_array, 3),
        count = _array2[1],
        period = _array2[2];

    if (period === 'h') seconds += parseInt(count, 10) * 60 * 60;
    if (period === 'm') seconds += parseInt(count, 10) * 60;
    if (period === 's') seconds += parseInt(count, 10);
    array = MATCH_START_STAMP.exec(stamp);
  }

  return seconds;
}

function parseStartTime(url) {
  return parseTimeParam(url, MATCH_START_QUERY);
}

function parseEndTime(url) {
  return parseTimeParam(url, MATCH_END_QUERY);
} // http://stackoverflow.com/a/38622545


function randomString() {
  return Math.random().toString(36).substr(2, 5);
}

function queryString(object) {
  return Object.keys(object).map(function (key) {
    return "".concat(key, "=").concat(object[key]);
  }).join('&');
}

function getGlobal(key) {
  if (window[key]) {
    return window[key];
  }

  if (window.exports && window.exports[key]) {
    return window.exports[key];
  }

  if (window.module && window.module.exports && window.module.exports[key]) {
    return window.module.exports[key];
  }

  return null;
} // Util function to load an external SDK
// or return the SDK if it is already loaded


var requests = {};

function getSDK(url, sdkGlobal) {
  var sdkReady = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var isLoaded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {
    return true;
  };
  var fetchScript = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _loadScript["default"];
  var existingGlobal = getGlobal(sdkGlobal);

  if (existingGlobal && isLoaded(existingGlobal)) {
    return Promise.resolve(existingGlobal);
  }

  return new Promise(function (resolve, reject) {
    // If we are already loading the SDK, add the resolve and reject
    // functions to the existing array of requests
    if (requests[url]) {
      requests[url].push({
        resolve: resolve,
        reject: reject
      });
      return;
    }

    requests[url] = [{
      resolve: resolve,
      reject: reject
    }];

    var onLoaded = function onLoaded(sdk) {
      // When loaded, resolve all pending request promises
      requests[url].forEach(function (request) {
        return request.resolve(sdk);
      });
    };

    if (sdkReady) {
      var previousOnReady = window[sdkReady];

      window[sdkReady] = function () {
        if (previousOnReady) previousOnReady();
        onLoaded(getGlobal(sdkGlobal));
      };
    }

    fetchScript(url, function (err) {
      if (err) {
        // Loading the SDK failed – reject all requests and
        // reset the array of requests for this SDK
        requests[url].forEach(function (request) {
          return request.reject(err);
        });
        requests[url] = null;
      } else if (!sdkReady) {
        onLoaded(getGlobal(sdkGlobal));
      }
    });
  });
}

function getConfig(props, defaultProps) {
  return (0, _deepmerge["default"])(defaultProps.config, props.config);
}

function omit(object) {
  var _ref;

  for (var _len = arguments.length, arrays = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    arrays[_key - 1] = arguments[_key];
  }

  var omitKeys = (_ref = []).concat.apply(_ref, arrays);

  var output = {};
  var keys = Object.keys(object);

  for (var _i2 = 0, _keys = keys; _i2 < _keys.length; _i2++) {
    var key = _keys[_i2];

    if (omitKeys.indexOf(key) === -1) {
      output[key] = object[key];
    }
  }

  return output;
}

function callPlayer(method) {
  var _this$player; // Util method for calling a method on this.player
  // but guard against errors and console.warn instead


  if (!this.player || !this.player[method]) {
    var message = "ReactPlayer: ".concat(this.constructor.displayName, " player could not call %c").concat(method, "%c \u2013 ");

    if (!this.player) {
      message += 'The player was not available';
    } else if (!this.player[method]) {
      message += 'The method was not available';
    }

    console.warn(message, 'font-weight: bold', '');
    return null;
  }

  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  return (_this$player = this.player)[method].apply(_this$player, args);
}

function isMediaStream(url) {
  return typeof window !== 'undefined' && typeof window.MediaStream !== 'undefined' && url instanceof window.MediaStream;
}

function isBlobUrl(url) {
  return /^blob:/.test(url);
}

function supportsWebKitPresentationMode() {
  var video = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.createElement('video'); // Check if Safari supports PiP, and is not on mobile (other than iPad)
  // iPhone safari appears to "support" PiP through the check, however PiP does not function

  var notMobile = /iPhone|iPod/.test(navigator.userAgent) === false;
  return video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function' && notMobile;
}

/***/ }),

/***/ "./node_modules/webpack-stream/node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ 0:
/*!*************************************!*\
  !*** multi ./assets/js/frontend.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\xampp\htdocs\wpmilitary\wp-content\plugins\all-in-one-video-player\assets\js\frontend.js */"./assets/js/frontend.js");


/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "React" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = React;

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL2NvbXBvbmVudHMvSWNvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL2Zyb250ZW5kLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9wbGF5ZXIvUGxheWVyLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9wbGF5ZXIvUGxheWxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3BsYXllci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVlcG1lcmdlL2Rpc3QvY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2FkLXNjcmlwdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWVtb2l6ZS1vbmUvZGlzdC9tZW1vaXplLW9uZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvY2hlY2tQcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1mYXN0LWNvbXBhcmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvUGxheWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL1ByZXZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvUmVhY3RQbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvcGF0dGVybnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvcGxheWVycy9EYWlseU1vdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL0ZhY2Vib29rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3BsYXllcnMvRmlsZVBsYXllci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL0thbHR1cmEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvcGxheWVycy9NaXhjbG91ZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL1NvdW5kQ2xvdWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvcGxheWVycy9TdHJlYW1hYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3BsYXllcnMvVHdpdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3BsYXllcnMvVmlkeWFyZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL1ZpbWVvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3BsYXllcnMvV2lzdGlhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3BsYXllcnMvWW91VHViZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RcIiJdLCJuYW1lcyI6WyJJY29ucyIsImljb24iLCJzaXplIiwiaWNvbnMiLCJwbGF5IiwicGF1c2UiLCJuZXh0IiwicHJldiIsInZvbHVtZU9uIiwidm9sdW1lT2ZmIiwicGlwIiwiZnVsbHNjcmVlbiIsImV4aXRGdWxsc2NyZWVuIiwicGxheWxpc3QiLCJ3cCIsImVsZW1lbnQiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZVJlZiIsIlBsYXllciIsImRhdGEiLCJpZCIsInZpZGVvcyIsImdldFZvbHVtZSIsInZvbHVtZSIsImFpb3ZwIiwic2V0dGluZ3MiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicGFyc2VGbG9hdCIsInBsYXllclJlZiIsInBsYXlpbmciLCJzZXRQbGF5aW5nIiwiYnVmZmVyaW5nIiwic2V0QnVmZmVyaW5nIiwic2V0Vm9sdW1lIiwiZXJyb3IiLCJzZXRFcnJvciIsInNlc3Npb25TdG9yYWdlIiwiaGlkZSIsInNldEhpZGUiLCJ2aWRlb0luZGV4Iiwic2V0VmlkZW9JbmRleCIsInNob3dQbGF5bGlzdCIsInNldFNob3dQbGF5bGlzdCIsInNldFBpcCIsImF1dG9wbGF5Iiwic2V0QXV0b3BsYXkiLCJza2luIiwic2V0U2tpbiIsInZpZGVvSXRlbSIsImxlbmd0aCIsInZpZGVvIiwidGl0bGUiLCJzb3VyY2UiLCJwb3N0ZXIiLCJpc19hZG1pbiIsInBsYXlpbmdJRCIsImhhbmRsZVBsYXlQYXVzZSIsImhhbmRsZVZvbHVtZSIsImUiLCJ2YWwiLCJ0YXJnZXQiLCJ2YWx1ZSIsInNldEl0ZW0iLCJpc1BybyIsImhhbmRsZU5leHRQcmV2IiwidHlwZSIsImluZGV4IiwiaGFuZGxlUGlwIiwiY2xhc3NOYW1lcyIsIl9faHRtbCIsImJhY2tncm91bmQiLCJGb3JtVG9nZ2xlIiwiY29tcG9uZW50cyIsIlBsYXlsaXN0IiwibWFwIiwicGx1Z2luX3VybCIsImFjdGl2ZSIsImFpb3ZwSW5pdCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJnZXRBdHRyaWJ1dGUiLCJKU09OIiwicGFyc2UiLCJyZW5kZXIiLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImNsYXNzZXMiLCJpIiwiYXJndW1lbnRzIiwiYXJnIiwiYXJnVHlwZSIsInB1c2giLCJBcnJheSIsImlzQXJyYXkiLCJpbm5lciIsImFwcGx5IiwidG9TdHJpbmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJrZXkiLCJjYWxsIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0IiwiZGVmaW5lIiwiaXNNZXJnZWFibGVPYmplY3QiLCJpc05vbk51bGxPYmplY3QiLCJpc1NwZWNpYWwiLCJzdHJpbmdWYWx1ZSIsImlzUmVhY3RFbGVtZW50IiwiY2FuVXNlU3ltYm9sIiwiU3ltYm9sIiwiZm9yIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiJCR0eXBlb2YiLCJlbXB0eVRhcmdldCIsImNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkIiwib3B0aW9ucyIsImNsb25lIiwiZGVlcG1lcmdlIiwiZGVmYXVsdEFycmF5TWVyZ2UiLCJjb25jYXQiLCJnZXRNZXJnZUZ1bmN0aW9uIiwiY3VzdG9tTWVyZ2UiLCJnZXRFbnVtZXJhYmxlT3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZmlsdGVyIiwic3ltYm9sIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJnZXRLZXlzIiwia2V5cyIsInByb3BlcnR5SXNPbk9iamVjdCIsIm9iamVjdCIsInByb3BlcnR5IiwiXyIsInByb3BlcnR5SXNVbnNhZmUiLCJtZXJnZU9iamVjdCIsImRlc3RpbmF0aW9uIiwiYXJyYXlNZXJnZSIsInNvdXJjZUlzQXJyYXkiLCJ0YXJnZXRJc0FycmF5Iiwic291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCIsImFsbCIsImRlZXBtZXJnZUFsbCIsImFycmF5IiwiRXJyb3IiLCJyZWR1Y2UiLCJkZWVwbWVyZ2VfMSIsImxvYWQiLCJzcmMiLCJvcHRzIiwiY2IiLCJoZWFkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwiY2hhcnNldCIsImFzeW5jIiwiYXR0cnMiLCJzZXRBdHRyaWJ1dGVzIiwidGV4dCIsIm9uZW5kIiwic3RkT25FbmQiLCJpZU9uRW5kIiwib25sb2FkIiwiYXBwZW5kQ2hpbGQiLCJhdHRyIiwic2V0QXR0cmlidXRlIiwib25lcnJvciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzYWZlSXNOYU4iLCJOdW1iZXIiLCJpc05hTiIsInBvbnlmaWxsIiwiaXNFcXVhbCIsImZpcnN0Iiwic2Vjb25kIiwiYXJlSW5wdXRzRXF1YWwiLCJuZXdJbnB1dHMiLCJsYXN0SW5wdXRzIiwibWVtb2l6ZU9uZSIsInJlc3VsdEZuIiwibGFzdFRoaXMiLCJsYXN0QXJncyIsImxhc3RSZXN1bHQiLCJjYWxsZWRPbmNlIiwibWVtb2l6ZWQiLCJuZXdBcmdzIiwiX2kiLCJwcm9wSXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ1bmRlZmluZWQiLCJUeXBlRXJyb3IiLCJzaG91bGRVc2VOYXRpdmUiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsIm9yZGVyMiIsIm4iLCJ0ZXN0MyIsInNwbGl0IiwibGV0dGVyIiwiZXJyIiwiZnJvbSIsInRvIiwic3ltYm9scyIsInMiLCJwcmludFdhcm5pbmciLCJwcm9jZXNzIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJyZXF1aXJlIiwibG9nZ2VkVHlwZUZhaWx1cmVzIiwiaGFzIiwiRnVuY3Rpb24iLCJiaW5kIiwibWVzc2FnZSIsImNvbnNvbGUiLCJ4IiwiY2hlY2tQcm9wVHlwZXMiLCJ0eXBlU3BlY3MiLCJ2YWx1ZXMiLCJsb2NhdGlvbiIsImNvbXBvbmVudE5hbWUiLCJnZXRTdGFjayIsInR5cGVTcGVjTmFtZSIsIm5hbWUiLCJleCIsInN0YWNrIiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJSZWFjdElzIiwiZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbCIsImlzVmFsaWRFbGVtZW50IiwidGhyb3dPbkRpcmVjdEFjY2VzcyIsIklURVJBVE9SX1NZTUJPTCIsIml0ZXJhdG9yIiwiRkFVWF9JVEVSQVRPUl9TWU1CT0wiLCJnZXRJdGVyYXRvckZuIiwibWF5YmVJdGVyYWJsZSIsIml0ZXJhdG9yRm4iLCJBTk9OWU1PVVMiLCJSZWFjdFByb3BUeXBlcyIsImNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyIiwiYm9vbCIsImZ1bmMiLCJudW1iZXIiLCJzdHJpbmciLCJhbnkiLCJjcmVhdGVBbnlUeXBlQ2hlY2tlciIsImFycmF5T2YiLCJjcmVhdGVBcnJheU9mVHlwZUNoZWNrZXIiLCJjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIiLCJlbGVtZW50VHlwZSIsImNyZWF0ZUVsZW1lbnRUeXBlVHlwZUNoZWNrZXIiLCJpbnN0YW5jZU9mIiwiY3JlYXRlSW5zdGFuY2VUeXBlQ2hlY2tlciIsIm5vZGUiLCJjcmVhdGVOb2RlQ2hlY2tlciIsIm9iamVjdE9mIiwiY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlciIsIm9uZU9mIiwiY3JlYXRlRW51bVR5cGVDaGVja2VyIiwib25lT2ZUeXBlIiwiY3JlYXRlVW5pb25UeXBlQ2hlY2tlciIsInNoYXBlIiwiY3JlYXRlU2hhcGVUeXBlQ2hlY2tlciIsImV4YWN0IiwiY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlciIsImlzIiwieSIsIlByb3BUeXBlRXJyb3IiLCJjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlciIsInZhbGlkYXRlIiwibWFudWFsUHJvcFR5cGVDYWxsQ2FjaGUiLCJtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCIsImNoZWNrVHlwZSIsImlzUmVxdWlyZWQiLCJwcm9wcyIsInByb3BOYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiY2FjaGVLZXkiLCJjaGFpbmVkQ2hlY2tUeXBlIiwiZXhwZWN0ZWRUeXBlIiwicHJvcFZhbHVlIiwicHJvcFR5cGUiLCJnZXRQcm9wVHlwZSIsInByZWNpc2VUeXBlIiwiZ2V0UHJlY2lzZVR5cGUiLCJ0eXBlQ2hlY2tlciIsImlzVmFsaWRFbGVtZW50VHlwZSIsImV4cGVjdGVkQ2xhc3MiLCJleHBlY3RlZENsYXNzTmFtZSIsImFjdHVhbENsYXNzTmFtZSIsImdldENsYXNzTmFtZSIsImV4cGVjdGVkVmFsdWVzIiwidmFsdWVzU3RyaW5nIiwic3RyaW5naWZ5IiwicmVwbGFjZXIiLCJhcnJheU9mVHlwZUNoZWNrZXJzIiwiY2hlY2tlciIsImdldFBvc3RmaXhGb3JUeXBlV2FybmluZyIsImlzTm9kZSIsInNoYXBlVHlwZXMiLCJhbGxLZXlzIiwiZXZlcnkiLCJzdGVwIiwiZW50cmllcyIsImRvbmUiLCJlbnRyeSIsImlzU3ltYm9sIiwiUmVnRXhwIiwiRGF0ZSIsImNvbnN0cnVjdG9yIiwiUHJvcFR5cGVzIiwiaXNFbGVtZW50IiwiaGFzRWxlbWVudFR5cGUiLCJFbGVtZW50IiwiaGFzTWFwIiwiTWFwIiwiaGFzU2V0IiwiU2V0IiwiaGFzQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImVxdWFsIiwiYSIsImIiLCJpdCIsImdldCIsImZsYWdzIiwidmFsdWVPZiIsIm1hdGNoIiwid2FybiIsImhhc1N5bWJvbCIsIlJFQUNUX1BPUlRBTF9UWVBFIiwiUkVBQ1RfRlJBR01FTlRfVFlQRSIsIlJFQUNUX1NUUklDVF9NT0RFX1RZUEUiLCJSRUFDVF9QUk9GSUxFUl9UWVBFIiwiUkVBQ1RfUFJPVklERVJfVFlQRSIsIlJFQUNUX0NPTlRFWFRfVFlQRSIsIlJFQUNUX0FTWU5DX01PREVfVFlQRSIsIlJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFIiwiUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSIsIlJFQUNUX1NVU1BFTlNFX1RZUEUiLCJSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUiLCJSRUFDVF9NRU1PX1RZUEUiLCJSRUFDVF9MQVpZX1RZUEUiLCJSRUFDVF9CTE9DS19UWVBFIiwiUkVBQ1RfRlVOREFNRU5UQUxfVFlQRSIsIlJFQUNUX1JFU1BPTkRFUl9UWVBFIiwiUkVBQ1RfU0NPUEVfVFlQRSIsInR5cGVPZiIsIiQkdHlwZW9mVHlwZSIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRm9yd2FyZFJlZiIsIkZyYWdtZW50IiwiTGF6eSIsIk1lbW8iLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc01lbW8iLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiX3R5cGVvZiIsIm9iaiIsImRlZmluZVByb3BlcnR5IiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcmVhY3RGYXN0Q29tcGFyZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfcHJvcHMiLCJfX2VzTW9kdWxlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZGVzYyIsInNldCIsIl9leHRlbmRzIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsIl9zZXRQcm90b3R5cGVPZiIsIm8iLCJwIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mIiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsInNoYW0iLCJQcm94eSIsImdldFByb3RvdHlwZU9mIiwiX2RlZmluZVByb3BlcnR5IiwiU0VFS19PTl9QTEFZX0VYUElSWSIsIl9Db21wb25lbnQiLCJfc3VwZXIiLCJfdGhpcyIsIl9sZW4iLCJfYXJncyIsIl9rZXkiLCJwbGF5ZXIiLCJ1cmwiLCJwcm9ncmVzcyIsImlzUmVhZHkiLCJwbGF5ZWRTZWNvbmRzIiwiZ2V0Q3VycmVudFRpbWUiLCJsb2FkZWRTZWNvbmRzIiwiZ2V0U2Vjb25kc0xvYWRlZCIsImR1cmF0aW9uIiwiZ2V0RHVyYXRpb24iLCJwbGF5ZWQiLCJsb2FkZWQiLCJwcmV2UGxheWVkIiwicHJldkxvYWRlZCIsIm9uUHJvZ3Jlc3MiLCJwcm9ncmVzc1RpbWVvdXQiLCJzZXRUaW1lb3V0IiwicHJvZ3Jlc3NGcmVxdWVuY3kiLCJwcm9ncmVzc0ludGVydmFsIiwibW91bnRlZCIsImlzTG9hZGluZyIsIl90aGlzJHByb3BzIiwib25SZWFkeSIsIm11dGVkIiwibG9hZE9uUmVhZHkiLCJoYW5kbGVEdXJhdGlvbkNoZWNrIiwiaXNQbGF5aW5nIiwiX3RoaXMkcHJvcHMyIiwib25TdGFydCIsIm9uUGxheSIsInBsYXliYWNrUmF0ZSIsInN0YXJ0T25QbGF5Iiwic2V0UGxheWJhY2tSYXRlIiwic2Vla09uUGxheSIsInNlZWtUbyIsIm9uUGF1c2UiLCJfdGhpcyRwcm9wczMiLCJhY3RpdmVQbGF5ZXIiLCJsb29wIiwib25FbmRlZCIsImxvb3BPbkVuZGVkIiwiX3RoaXMkcHJvcHM0Iiwib25FcnJvciIsImNsZWFyVGltZW91dCIsImR1cmF0aW9uQ2hlY2tUaW1lb3V0Iiwib25EdXJhdGlvbkNhbGxlZCIsIm9uRHVyYXRpb24iLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50Iiwic3RvcE9uVW5tb3VudCIsInN0b3AiLCJkaXNhYmxlUElQIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwiX3RoaXMyIiwiX3RoaXMkcHJvcHM1IiwiZm9yY2VMb2FkIiwiZW5hYmxlUElQIiwibXV0ZSIsInVubXV0ZSIsInNldExvb3AiLCJhbW91bnQiLCJfdGhpczMiLCJpc0ZyYWN0aW9uIiwib25Nb3VudCIsImhhbmRsZVBsYXllck1vdW50IiwiaGFuZGxlUmVhZHkiLCJoYW5kbGVQbGF5IiwiaGFuZGxlUGF1c2UiLCJoYW5kbGVFbmRlZCIsIm9uTG9hZGVkIiwiaGFuZGxlTG9hZGVkIiwiaGFuZGxlRXJyb3IiLCJDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJvd25LZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJzeW0iLCJfb2JqZWN0U3ByZWFkIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJJQ09OX1NJWkUiLCJQcmV2aWV3IiwiYXJncyIsImltYWdlIiwib25DbGljayIsImZldGNoSW1hZ2UiLCJsaWdodCIsIl9yZWYiLCJzZXRTdGF0ZSIsIndpbmRvdyIsImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwianNvbiIsInRodW1ibmFpbF91cmwiLCJyZXBsYWNlIiwicGxheUljb24iLCJwcmV2aWV3VGFiSW5kZXgiLCJzdGF0ZSIsImZsZXhDZW50ZXIiLCJkaXNwbGF5IiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50Iiwic3R5bGVzIiwicHJldmlldyIsIndpZHRoIiwiaGVpZ2h0IiwiYmFja2dyb3VuZEltYWdlIiwiYmFja2dyb3VuZFNpemUiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJjdXJzb3IiLCJzaGFkb3ciLCJib3JkZXJSYWRpdXMiLCJib3JkZXJTdHlsZSIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJtYXJnaW5MZWZ0IiwiZGVmYXVsdFBsYXlJY29uIiwic3R5bGUiLCJjbGFzc05hbWUiLCJ0YWJJbmRleCIsIm9uS2V5UHJlc3MiLCJoYW5kbGVLZXlQcmVzcyIsImNyZWF0ZVJlYWN0UGxheWVyIiwiX2RlZXBtZXJnZSIsIl9tZW1vaXplT25lIiwiX3V0aWxzIiwiX1BsYXllcjMiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJfaXRlcmFibGVUb0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJzbGljZSIsInRlc3QiLCJpdGVyIiwibGVuIiwiYXJyMiIsImxhenkiLCJQcm9taXNlIiwicmVzb2x2ZSIsIklTX0JST1dTRVIiLCJJU19HTE9CQUwiLCJnbG9iYWwiLCJTVVBQT1JURURfUFJPUFMiLCJVbml2ZXJzYWxTdXNwZW5zZSIsImN1c3RvbVBsYXllcnMiLCJwbGF5ZXJzIiwiZmFsbGJhY2siLCJfY2xhc3MiLCJfdGVtcCIsIlJlYWN0UGxheWVyIiwic2hvd1ByZXZpZXciLCJ3cmFwcGVyIiwiX3dyYXBwZXIiLCJfcGxheWVyIiwib25DbGlja1ByZXZpZXciLCJnZXRJbnRlcm5hbFBsYXllciIsImZyYWN0aW9uIiwiX2FyciIsImNhblBsYXkiLCJjb25maWciLCJvbWl0IiwiZ2V0QWN0aXZlUGxheWVyIiwiZ2V0Q29uZmlnIiwicmVmIiwicmVmZXJlbmNlcyIsImxhenlQbGF5ZXIiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJuZXh0UHJvcHMiLCJuZXh0U3RhdGUiLCJyZW5kZXJQcmV2aWV3IiwiaGFuZGxlQ2xpY2tQcmV2aWV3IiwiV3JhcHBlciIsImF0dHJpYnV0ZXMiLCJnZXRBdHRyaWJ1dGVzIiwicmVuZGVyQWN0aXZlUGxheWVyIiwiX2kyIiwiX2FycjIiLCJfUGxheWVyIiwiX2kzIiwiX2FycjMiLCJfUGxheWVyMiIsImNhbkVuYWJsZVBJUCIsIl9wbGF5ZXJzIiwiX1JlYWN0UGxheWVyIiwiX2RlZmF1bHQiLCJGTFZfRVhURU5TSU9OUyIsIkRBU0hfRVhURU5TSU9OUyIsIkhMU19FWFRFTlNJT05TIiwiVklERU9fRVhURU5TSU9OUyIsIkFVRElPX0VYVEVOU0lPTlMiLCJNQVRDSF9VUkxfS0FMVFVSQSIsIk1BVENIX1VSTF9WSURZQVJEIiwiTUFUQ0hfVVJMX01JWENMT1VEIiwiTUFUQ0hfVVJMX0RBSUxZTU9USU9OIiwiTUFUQ0hfVVJMX1RXSVRDSF9DSEFOTkVMIiwiTUFUQ0hfVVJMX1RXSVRDSF9WSURFTyIsIk1BVENIX1VSTF9XSVNUSUEiLCJNQVRDSF9VUkxfU1RSRUFNQUJMRSIsIk1BVENIX1VSTF9GQUNFQk9PS19XQVRDSCIsIk1BVENIX1VSTF9GQUNFQk9PSyIsIk1BVENIX1VSTF9WSU1FTyIsIk1BVENIX1VSTF9TT1VORENMT1VEIiwiTUFUQ0hfVVJMX1lPVVRVQkUiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsImFsbG93QXJyYXlMaWtlIiwiRiIsIl9lIiwiZiIsIm5vcm1hbENvbXBsZXRpb24iLCJkaWRFcnIiLCJfZTIiLCJjYW5QbGF5RmlsZSIsIl9pdGVyYXRvciIsIl9zdGVwIiwiaXRlbSIsImlzTWVkaWFTdHJlYW0iLCJpc0Jsb2JVcmwiLCJ5b3V0dWJlIiwic291bmRjbG91ZCIsInZpbWVvIiwiZmFjZWJvb2siLCJzdHJlYW1hYmxlIiwid2lzdGlhIiwidHdpdGNoIiwiZGFpbHltb3Rpb24iLCJtaXhjbG91ZCIsInZpZHlhcmQiLCJrYWx0dXJhIiwiZmlsZSIsIl9wYXR0ZXJucyIsIl9zbGljZWRUb0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX25vbkl0ZXJhYmxlUmVzdCIsIl9uIiwiX2QiLCJfcyIsIlNES19VUkwiLCJTREtfR0xPQkFMIiwiU0RLX0dMT0JBTF9SRUFEWSIsIkRhaWx5TW90aW9uIiwiY2FsbFBsYXllciIsImNvbnRhaW5lciIsImNvbnRyb2xzIiwiX3VybCRtYXRjaCIsIl91cmwkbWF0Y2gyIiwic3RhcnQiLCJwYXJzZVN0YXJ0VGltZSIsImdldFNESyIsIkRNIiwicGFyYW1zIiwib3JpZ2luIiwiZXZlbnRzIiwiYXBpcmVhZHkiLCJzZWVrZWQiLCJvblNlZWsiLCJjdXJyZW50VGltZSIsInZpZGVvX2VuZCIsImR1cmF0aW9uY2hhbmdlIiwib25EdXJhdGlvbkNoYW5nZSIsIndhaXRpbmciLCJvbkJ1ZmZlciIsImV2ZW50Iiwic2Vjb25kcyIsImJ1ZmZlcmVkVGltZSIsIlBMQVlFUl9JRF9QUkVGSVgiLCJGYWNlYm9vayIsInBsYXllcklkIiwicmFuZG9tU3RyaW5nIiwiRkIiLCJYRkJNTCIsImluaXQiLCJhcHBJZCIsInhmYm1sIiwidmVyc2lvbiIsIkV2ZW50Iiwic3Vic2NyaWJlIiwibXNnIiwicGxheWVySUQiLCJvbkJ1ZmZlckVuZCIsImdldEVsZW1lbnRCeUlkIiwicXVlcnlTZWxlY3RvciIsInZpc2liaWxpdHkiLCJIQVNfTkFWSUdBVE9SIiwibmF2aWdhdG9yIiwiSVNfSVBBRF9QUk8iLCJwbGF0Zm9ybSIsIm1heFRvdWNoUG9pbnRzIiwiSVNfSU9TIiwidXNlckFnZW50IiwiTVNTdHJlYW0iLCJITFNfU0RLX1VSTCIsIkhMU19HTE9CQUwiLCJEQVNIX1NES19VUkwiLCJEQVNIX0dMT0JBTCIsIkZMVl9TREtfVVJMIiwiRkxWX0dMT0JBTCIsIk1BVENIX0RST1BCT1hfVVJMIiwiTUFUQ0hfQ0xPVURGTEFSRV9TVFJFQU0iLCJSRVBMQUNFX0NMT1VERkxBUkVfU1RSRUFNIiwiRmlsZVBsYXllciIsIl90aGlzJHByb3BzNiIsIl90aGlzJHByb3BzNyIsIl90aGlzJHByb3BzOCIsIm9uRW5hYmxlUElQIiwiX3RoaXMkcHJvcHM5Iiwib25EaXNhYmxlUElQIiwic3VwcG9ydHNXZWJLaXRQcmVzZW50YXRpb25Nb2RlIiwid2Via2l0UHJlc2VudGF0aW9uTW9kZSIsInRyYWNrIiwicHJldlBsYXllciIsImFkZExpc3RlbmVycyIsInNob3VsZFVzZUF1ZGlvIiwicmVtb3ZlTGlzdGVuZXJzIiwic3JjT2JqZWN0IiwiaGxzIiwiZGVzdHJveSIsIl90aGlzJHByb3BzMTAiLCJwbGF5c2lubGluZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblByZXNlbnRhdGlvbk1vZGVDaGFuZ2UiLCJzaG91bGRVc2VITFMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZm9yY2VWaWRlbyIsImZvcmNlQXVkaW8iLCJmb3JjZUhMUyIsInNob3VsZFVzZURBU0giLCJmb3JjZURBU0giLCJzaG91bGRVc2VGTFYiLCJmb3JjZUZMViIsIl90aGlzJHByb3BzJGNvbmZpZyIsImhsc1ZlcnNpb24iLCJobHNPcHRpb25zIiwiZGFzaFZlcnNpb24iLCJmbHZWZXJzaW9uIiwiZGFzaCIsInJlc2V0IiwiSGxzIiwib24iLCJFdmVudHMiLCJNQU5JRkVTVF9QQVJTRUQiLCJFUlJPUiIsImxvYWRTb3VyY2UiLCJhdHRhY2hNZWRpYSIsImRhc2hqcyIsIk1lZGlhUGxheWVyIiwiaW5pdGlhbGl6ZSIsInBhcnNlSW50IiwiZ2V0RGVidWciLCJzZXRMb2dUb0Jyb3dzZXJDb25zb2xlIiwidXBkYXRlU2V0dGluZ3MiLCJkZWJ1ZyIsImxvZ0xldmVsIiwiRGVidWciLCJMT0dfTEVWRUxfTk9ORSIsImZsdmpzIiwiZmx2IiwiY3JlYXRlUGxheWVyIiwiYXR0YWNoTWVkaWFFbGVtZW50IiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicHJvbWlzZSIsInJlbW92ZUF0dHJpYnV0ZSIsInJlcXVlc3RQaWN0dXJlSW5QaWN0dXJlIiwicGljdHVyZUluUGljdHVyZUVsZW1lbnQiLCJ3ZWJraXRTZXRQcmVzZW50YXRpb25Nb2RlIiwiZXhpdFBpY3R1cmVJblBpY3R1cmUiLCJyYXRlIiwiX3RoaXMkcGxheWVyIiwic2Vla2FibGUiLCJJbmZpbml0eSIsImVuZCIsImJ1ZmZlcmVkIiwiZ2V0U291cmNlIiwidXNlSExTIiwidXNlREFTSCIsInVzZUZMViIsIl90aGlzJHByb3BzMTEiLCJ1c2VBdWRpbyIsInByZWxvYWQiLCJhdXRvUGxheSIsInJlbmRlclNvdXJjZUVsZW1lbnQiLCJ0cmFja3MiLCJyZW5kZXJUcmFjayIsIkthbHR1cmEiLCJpZnJhbWUiLCJwbGF5ZXJqcyIsIl9yZWYyIiwicGVyY2VudCIsInNlY29uZHNMb2FkZWQiLCJmcmFtZUJvcmRlciIsInNjcm9sbGluZyIsImFsbG93RnVsbFNjcmVlbiIsImFsbG93IiwicmVmZXJyZXJQb2xpY3kiLCJNaXhjbG91ZCIsIlBsYXllcldpZGdldCIsInJlYWR5IiwiZW5kZWQiLCJxdWVyeSIsInF1ZXJ5U3RyaW5nIiwiZmVlZCIsIlNvdW5kQ2xvdWQiLCJTQyIsIl9TQyRXaWRnZXQkRXZlbnRzIiwiV2lkZ2V0IiwiUExBWSIsIlBMQVlfUFJPR1JFU1MiLCJQQVVTRSIsIkZJTklTSCIsInJlbWFpbmluZyIsImN1cnJlbnRQb3NpdGlvbiIsImZyYWN0aW9uTG9hZGVkIiwibG9hZGVkUHJvZ3Jlc3MiLCJjYWxsYmFjayIsImVuY29kZVVSSUNvbXBvbmVudCIsIlN0cmVhbWFibGUiLCJUd2l0Y2giLCJpc0NoYW5uZWwiLCJzZXRDaGFubmVsIiwic2V0VmlkZW8iLCJjaGFubmVsIiwidGltZSIsIl9Ud2l0Y2gkUGxheWVyIiwiUkVBRFkiLCJQTEFZSU5HIiwiRU5ERUQiLCJPTkxJTkUiLCJPRkZMSU5FIiwiVmlkeWFyZCIsImFwaSIsImFkZFJlYWR5TGlzdGVuZXIiLCJyZW5kZXJQbGF5ZXIiLCJ1dWlkIiwiZ2V0UGxheWVyTWV0YWRhdGEiLCJtZXRhIiwibGVuZ3RoX2luX3NlY29uZHMiLCJWaWR5YXJkVjQiLCJkZXN0cm95UGxheWVyIiwiVmltZW8iLCJwbGF5ZXJPcHRpb25zIiwicmVmcmVzaER1cmF0aW9uIiwib3ZlcmZsb3ciLCJXaXN0aWEiLCJfb25SZWFkeSIsImN1c3RvbUNvbnRyb2xzIiwiY29udHJvbCIsImRlZmluZUNvbnRyb2wiLCJfd3EiLCJzaWxlbnRBdXRvUGxheSIsImNvbnRyb2xzVmlzaWJsZU9uTG9hZCIsImZ1bGxzY3JlZW5CdXR0b24iLCJwbGF5YmFyIiwicGxheWJhY2tSYXRlQ29udHJvbCIsInF1YWxpdHlDb250cm9sIiwidm9sdW1lQ29udHJvbCIsInNldHRpbmdzQ29udHJvbCIsInNtYWxsUGxheUJ1dHRvbiIsInVuYmluZCIsInZpZGVvSUQiLCJNQVRDSF9QTEFZTElTVCIsIk1BVENIX1VTRVJfVVBMT0FEUyIsIk1BVENIX05PQ09PS0lFIiwiTk9DT09LSUVfSE9TVCIsIllvdVR1YmUiLCJsaXN0VHlwZSIsImdldElEIiwicGxheWxpc3RJZCIsImxpc3QiLCJfdXJsJG1hdGNoMyIsIl91cmwkbWF0Y2g0IiwidXNlcm5hbWUiLCJwbGF5ZXJWYXJzIiwib25VbnN0YXJ0ZWQiLCJfd2luZG93JFNES19HTE9CQUwkUGwiLCJQbGF5ZXJTdGF0ZSIsIlVOU1RBUlRFRCIsIlBBVVNFRCIsIkJVRkZFUklORyIsIkNVRUQiLCJpc1BsYXlsaXN0IiwiX29uRXJyb3IiLCJlbWJlZE9wdGlvbnMiLCJsb2FkUGxheWxpc3QiLCJwYXJzZVBsYXlsaXN0IiwiY3VlVmlkZW9CeUlkIiwidmlkZW9JZCIsInN0YXJ0U2Vjb25kcyIsImVuZFNlY29uZHMiLCJwYXJzZUVuZFRpbWUiLCJZVCIsIm9uU3RhdGVDaGFuZ2UiLCJob3N0IiwiYm9keSIsImNvbnRhaW5zIiwicGljdHVyZUluUGljdHVyZUVuYWJsZWQiLCJfcHJvcFR5cGVzIiwibm9vcCIsInZpc3VhbCIsImJ1eWluZyIsImxpa2luZyIsImRvd25sb2FkIiwic2hhcmluZyIsInNob3dfY29tbWVudHMiLCJzaG93X3BsYXljb3VudCIsInNob3dpbmZvIiwicmVsIiwiaXZfbG9hZF9wb2xpY3kiLCJtb2Rlc3RicmFuZGluZyIsImF1dG9wYXVzZSIsImJ5bGluZSIsInBvcnRyYWl0IiwiaGlkZV9jb3ZlciIsIl9sb2FkU2NyaXB0IiwiTUFUQ0hfU1RBUlRfUVVFUlkiLCJNQVRDSF9FTkRfUVVFUlkiLCJNQVRDSF9TVEFSVF9TVEFNUCIsIk1BVENIX05VTUVSSUMiLCJwYXJzZVRpbWVQYXJhbSIsInBhdHRlcm4iLCJzdGFtcCIsInBhcnNlVGltZVN0cmluZyIsImV4ZWMiLCJfYXJyYXkiLCJfYXJyYXkyIiwiY291bnQiLCJwZXJpb2QiLCJNYXRoIiwicmFuZG9tIiwic3Vic3RyIiwiZ2V0R2xvYmFsIiwicmVxdWVzdHMiLCJzZGtHbG9iYWwiLCJzZGtSZWFkeSIsImlzTG9hZGVkIiwiZmV0Y2hTY3JpcHQiLCJleGlzdGluZ0dsb2JhbCIsInJlamVjdCIsInNkayIsInJlcXVlc3QiLCJwcmV2aW91c09uUmVhZHkiLCJhcnJheXMiLCJvbWl0S2V5cyIsIm91dHB1dCIsIl9rZXlzIiwiaW5kZXhPZiIsIm1ldGhvZCIsImRpc3BsYXlOYW1lIiwiX2xlbjIiLCJfa2V5MiIsIk1lZGlhU3RyZWFtIiwibm90TW9i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R0EsQ0FBQyxJQUFJLElBQUlyeEIsUUFBSixDQUFhLGFBQWIsR0FBVDtBQUNBLENBSEQsQ0FHRSxPQUFPakssQ0FBUCxFQUFVO0FBQ1g7QUFDQSxNQUFJLE9BQU9pZSxNQUFQLEtBQWtCLFFBQXRCLEVBQWdDcWQsQ0FBQyxHQUFHcmQsTUFBSjtBQUNoQyxDLENBRUQ7QUFDQTtBQUNBOzs7QUFFQXBiLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnc0QixDQUFqQixDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ25CQSx1QiIsImZpbGUiOiJmcm9udGVuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEljb25zKGljb24sIHNpemUgPSAyMCkge1xyXG4gICAgY29uc3QgaWNvbnMgPSB7XHJcbiAgICAgICAgcGxheTogYDxzdmcgd2lkdGg9XCIke3NpemV9XCIgIGhlaWdodD1cIiR7c2l6ZX1cIiAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjYgMjZcIiBmaWxsPVwiY3VycmVudENvbG9yXCI+PHBhdGggZD1cIk0gMjAuMjA3MDMxIDExLjg1NTQ2OSBMIDYuOTAyMzQ0IDUuMjYxNzE5IEMgNi41IDUuMDU4NTk0IDYuMDE5NTMxIDUuMDc4MTI1IDUuNjMyODEzIDUuMzEyNSBDIDUuMjQ2MDk0IDUuNTQyOTY5IDUuMDE1NjI1IDUuOTU3MDMxIDUuMDE1NjI1IDYuNDAyMzQ0IEwgNS4wMTU2MjUgMTkuNjAxNTYzIEMgNS4wMTU2MjUgMjAuMDQyOTY5IDUuMjQ2MDk0IDIwLjQ1NzAzMSA1LjYzMjgxMyAyMC42ODc1IEMgNS44NDM3NSAyMC44MTY0MDYgNi4wNzgxMjUgMjAuODc4OTA2IDYuMzE2NDA2IDIwLjg3ODkwNiBDIDYuNTE5NTMxIDIwLjg3ODkwNiA2LjcxODc1IDIwLjgzMjAzMSA2LjkwMjM0NCAyMC43NDIxODggTCAyMC4yMTA5MzggMTQuMTQwNjI1IEMgMjAuNjQ4NDM4IDEzLjkyNTc4MSAyMC45MjU3ODEgMTMuNDg0Mzc1IDIwLjkyNTc4MSAxMyBDIDIwLjkyNTc4MSAxMi41MTU2MjUgMjAuNjQ0NTMxIDEyLjA3NDIxOSAyMC4yMDcwMzEgMTEuODU1NDY5IFpcIj48L3BhdGg+PC9zdmc+YCxcclxuICAgICAgICBwYXVzZTogYDxzdmcgd2lkdGg9XCIke3NpemV9XCIgaGVpZ2h0PVwiJHtzaXplfVwiICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNiAyNlwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIj48cGF0aCBkPVwiTSA3IDUgQyA2LjQ0OTIxOSA1IDYgNS40NDkyMTkgNiA2IEwgNiAyMCBDIDYgMjAuNTUwNzgxIDYuNDQ5MjE5IDIxIDcgMjEgTCAxMCAyMSBDIDEwLjU1MDc4MSAyMSAxMSAyMC41NTA3ODEgMTEgMjAgTCAxMSA2IEMgMTEgNS40NDkyMTkgMTAuNTUwNzgxIDUgMTAgNSBaIE0gMTYgNSBDIDE1LjQ0OTIxOSA1IDE1IDUuNDQ5MjE5IDE1IDYgTCAxNSAyMCBDIDE1IDIwLjU1MDc4MSAxNS40NDkyMTkgMjEgMTYgMjEgTCAxOSAyMSBDIDE5LjU1MDc4MSAyMSAyMCAyMC41NTA3ODEgMjAgMjAgTCAyMCA2IEMgMjAgNS40NDkyMTkgMTkuNTUwNzgxIDUgMTkgNSBaXCI+PC9wYXRoPjwvc3ZnPmAsXHJcbiAgICAgICAgbmV4dDogYDxzdmcgIHdpZHRoPVwiJHtzaXplfVwiIGhlaWdodD1cIiR7c2l6ZX1cIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNiAyNlwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIj48cGF0aCBkPVwiTSAxNiA1IEMgMTUuNDQ5MjE5IDUgMTUgNS40NDkyMTkgMTUgNiBMIDE1IDEwLjg3NSBMIDcuOTA2MjUgNS4yNSBDIDcuNTAzOTA2IDUuMDQ2ODc1IDcuMDA3ODEzIDUuMDc4MTI1IDYuNjI1IDUuMzEyNSBDIDYuMjM4MjgxIDUuNTQyOTY5IDYgNS45NjA5MzggNiA2LjQwNjI1IEwgNiAxOS41OTM3NSBDIDYgMjAuMDM1MTU2IDYuMjM4MjgxIDIwLjQ1MzEyNSA2LjYyNSAyMC42ODc1IEMgNi44MzIwMzEgMjAuODEyNSA3LjA3NDIxOSAyMC44NzUgNy4zMTI1IDIwLjg3NSBDIDcuNTExNzE5IDIwLjg3NSA3LjcyMjY1NiAyMC44NDM3NSA3LjkwNjI1IDIwLjc1IEwgMTUgMTUuMTI1IEwgMTUgMjAgQyAxNSAyMC41NTA3ODEgMTUuNDQ5MjE5IDIxIDE2IDIxIEwgMTkgMjEgQyAxOS41NTA3ODEgMjEgMjAgMjAuNTUwNzgxIDIwIDIwIEwgMjAgNiBDIDIwIDUuNDQ5MjE5IDE5LjU1MDc4MSA1IDE5IDUgWlwiPjwvcGF0aD48L3N2Zz5gLFxyXG4gICAgICAgIHByZXY6IGA8c3ZnICB3aWR0aD1cIiR7c2l6ZX1cIiBoZWlnaHQ9XCIke3NpemV9XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjYgMjZcIiBmaWxsPVwiY3VycmVudENvbG9yXCI+PHBhdGggZD1cIk0gNyA1IEMgNi40NDkyMTkgNSA2IDUuNDQ5MjE5IDYgNiBMIDYgMjAgQyA2IDIwLjU1MDc4MSA2LjQ0OTIxOSAyMSA3IDIxIEwgMTAgMjEgQyAxMC41NTA3ODEgMjEgMTEgMjAuNTUwNzgxIDExIDIwIEwgMTEgMTUuMTI1IEwgMTguMDkzNzUgMjAuNzUgQyAxOC40OTYwOTQgMjAuOTUzMTI1IDE4Ljk5MjE4OCAyMC45MjE4NzUgMTkuMzc1IDIwLjY4NzUgQyAxOS43NjE3MTkgMjAuNDU3MDMxIDIwIDIwLjAzOTA2MyAyMCAxOS41OTM3NSBMIDIwIDYuNDA2MjUgQyAyMCA1Ljk2NDg0NCAxOS43NjE3MTkgNS41NDY4NzUgMTkuMzc1IDUuMzEyNSBDIDE5LjE2Nzk2OSA1LjE4NzUgMTguOTI1NzgxIDUuMTI1IDE4LjY4NzUgNS4xMjUgQyAxOC40ODgyODEgNS4xMjUgMTguMjc3MzQ0IDUuMTU2MjUgMTguMDkzNzUgNS4yNSBMIDExIDEwLjg3NSBMIDExIDYgQyAxMSA1LjQ0OTIxOSAxMC41NTA3ODEgNSAxMCA1IFpcIj48L3BhdGg+PC9zdmc+YCxcclxuICAgICAgICB2b2x1bWVPbjogYGAsXHJcbiAgICAgICAgdm9sdW1lT2ZmOiBgYCxcclxuICAgICAgICBwaXA6IGA8c3ZnIHdpZHRoPVwiJHtzaXplfVwiIGhlaWdodD1cIiR7c2l6ZX1cIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIj48cGF0aCBkPVwiTTIyLDE4VjZjMC0xLjEwNS0wLjg5NS0yLTItMkg0QzIuODk1LDQsMiw0Ljg5NSwyLDZ2MTJjMCwxLjEwNSwwLjg5NSwyLDIsMmgxNkMyMS4xMDUsMjAsMjIsMTkuMTA1LDIyLDE4eiBNMTksMThoLTYgYy0wLjU1MiwwLTEtMC40NDgtMS0xdi00YzAtMC41NTIsMC40NDgtMSwxLTFoNmMwLjU1MiwwLDEsMC40NDgsMSwxdjRDMjAsMTcuNTUyLDE5LjU1MiwxOCwxOSwxOHpcIj48L3BhdGg+PC9zdmc+YCxcclxuICAgICAgICBmdWxsc2NyZWVuOiBgYCxcclxuICAgICAgICBleGl0RnVsbHNjcmVlbjogYGAsXHJcbiAgICAgICAgcGxheWxpc3Q6IGA8c3ZnIHdpZHRoPVwiJHtzaXplfVwiIGhlaWdodD1cIiR7c2l6ZX1cIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAzNTAgMzUwXCIgZmlsbD1cImN1cnJlbnRDb2xvclwiPjxnPjxnPjxyZWN0IHk9XCI5NlwiIHdpZHRoPVwiMjU2XCIgaGVpZ2h0PVwiNDIuNjY3XCIvPjwvZz48L2c+PGc+PGc+PHJlY3QgeT1cIjEwLjY2N1wiIHdpZHRoPVwiMjU2XCIgaGVpZ2h0PVwiNDIuNjY3XCIvPjwvZz48L2c+PGc+PGc+PHJlY3QgeT1cIjE4MS4zMzNcIiB3aWR0aD1cIjE3MC42NjdcIiBoZWlnaHQ9XCI0Mi42NjdcIi8+PC9nPjwvZz48Zz48Zz48cG9seWdvbiBwb2ludHM9XCIyMTMuMzMzLDE4MS4zMzMgMjEzLjMzMywzMDkuMzMzIDMyMCwyNDUuMzMzXCIvPjwvZz48L2c+PC9zdmc+YCxcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaWNvbnNbaWNvbl07XHJcbn0iLCJpbXBvcnQgJy4vcGxheWVyJzsiLCJpbXBvcnQgUmVhY3RQbGF5ZXIgZnJvbSBcInJlYWN0LXBsYXllclwiO1xyXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tIFwiY2xhc3NuYW1lc1wiO1xyXG5pbXBvcnQgSWNvbnMgZnJvbSAnLi4vY29tcG9uZW50cy9JY29ucyc7XHJcbmltcG9ydCBQbGF5bGlzdCBmcm9tIFwiLi9QbGF5bGlzdFwiO1xyXG5cclxuXHJcbmNvbnN0IHt1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWZ9ID0gd3AuZWxlbWVudDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBsYXllcih7ZGF0YX0pIHtcclxuICAgIGxldCB7aWQsIHZpZGVvc30gPSBkYXRhO1xyXG5cclxuICAgIGNvbnN0IGdldFZvbHVtZSA9ICgpID0+IHtcclxuICAgICAgICBsZXQgdm9sdW1lID0gKGFpb3ZwLnNldHRpbmdzLnZvbHVtZSAvIDEwMCk7XHJcblxyXG4gICAgICAgIGlmICghIWxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhaW92cF92b2x1bWUnKSkge1xyXG4gICAgICAgICAgICB2b2x1bWUgPSBwYXJzZUZsb2F0KGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhaW92cF92b2x1bWUnKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXZvbHVtZSkgdm9sdW1lID0gLjg7XHJcblxyXG4gICAgICAgIHJldHVybiB2b2x1bWU7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcGxheWVyUmVmID0gdXNlUmVmKCk7XHJcblxyXG4gICAgY29uc3QgW3BsYXlpbmcsIHNldFBsYXlpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgY29uc3QgW2J1ZmZlcmluZywgc2V0QnVmZmVyaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFt2b2x1bWUsIHNldFZvbHVtZV0gPSB1c2VTdGF0ZShnZXRWb2x1bWUoKSk7XHJcbiAgICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgW2hpZGUsIHNldEhpZGVdID0gdXNlU3RhdGUoISFzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdyYWRpb19wbGF5ZXJfaGlkZScpKTtcclxuICAgIGNvbnN0IFt2aWRlb0luZGV4LCBzZXRWaWRlb0luZGV4XSA9IHVzZVN0YXRlKDApO1xyXG4gICAgY29uc3QgW3Nob3dQbGF5bGlzdCwgc2V0U2hvd1BsYXlsaXN0XSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFtwaXAsIHNldFBpcF0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgICBjb25zdCBbYXV0b3BsYXksIHNldEF1dG9wbGF5XSA9IHVzZVN0YXRlKHRydWUpO1xyXG4gICAgY29uc3QgW3NraW4sIHNldFNraW5dID0gdXNlU3RhdGUoMik7XHJcblxyXG4gICAgY29uc3QgdmlkZW9JdGVtID0gdmlkZW9zW3ZpZGVvSW5kZXggPj0gdmlkZW9zLmxlbmd0aCA/IDAgOiB2aWRlb0luZGV4XTtcclxuXHJcbiAgICBjb25zdCB7dmlkZW8sIHRpdGxlLCBzb3VyY2UsIHBvc3Rlcn0gPSB2aWRlb0l0ZW07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdCBwbGF5XHJcbiAgICAgKi9cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcblxyXG4gICAgICAgIGlmICghIWFpb3ZwLmlzX2FkbWluKSByZXR1cm47XHJcblxyXG4gICAgICAgIGNvbnN0IHBsYXlpbmdJRCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ2Fpb3ZwX3BsYXlpbmcnKTtcclxuXHJcbiAgICAgICAgaWYgKHBsYXlpbmdJRCA9PSBpZCB8fCAoISFwbGF5aW5nSUQgJiYgJ29uJyA9PT0gYXV0b3BsYXkpKSB7XHJcbiAgICAgICAgICAgIHNldFBsYXlpbmcodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICAvLyBIYW5kbGUgcGxheS1wYXVzZVxyXG4gICAgY29uc3QgaGFuZGxlUGxheVBhdXNlID0gKCkgPT4ge1xyXG4gICAgICAgIHNldFBsYXlpbmcoIXBsYXlpbmcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHZvbHVtZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGhhbmRsZVZvbHVtZShlKSB7XHJcbiAgICAgICAgY29uc3QgdmFsID0gZS50YXJnZXQudmFsdWU7XHJcbiAgICAgICAgc2V0Vm9sdW1lKHZhbCk7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Fpb3ZwX3ZvbHVtZScsIHZhbClcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpc1BybyA9IHRydWU7XHJcblxyXG4gICAgY29uc3QgaGFuZGxlTmV4dFByZXYgPSAodHlwZSkgPT4ge1xyXG4gICAgICAgIGlmICgncHJldicgPT09IHR5cGUpIHtcclxuICAgICAgICAgICAgbGV0IGluZGV4ID0gdmlkZW9JbmRleCAtIDE7XHJcblxyXG4gICAgICAgICAgICBpZiAodmlkZW9JbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSAodmlkZW9zLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXRWaWRlb0luZGV4KGluZGV4KTtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmICgnbmV4dCcgPT09IHR5cGUpIHtcclxuICAgICAgICAgICAgbGV0IGluZGV4ID0gdmlkZW9JbmRleCArIDE7XHJcblxyXG4gICAgICAgICAgICBpZiAodmlkZW9JbmRleCA+PSAodmlkZW9zLmxlbmd0aCAtIDEpKSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldFZpZGVvSW5kZXgoaW5kZXgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0UGxheWluZyh0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBoYW5kbGVQaXAgPSAoKSA9PiB7XHJcbiAgICAgICAgc2V0UGlwKCFwaXApO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWVzKGBhaW92cGAsIHtwaXB9LCBgc2tpbi0ke3NraW59YCl9PlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWlvdnAtY29udHJvbHNcIj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9eydidXR0b24nfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlTmV4dFByZXYoJ3ByZXYnKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBJY29ucygncHJldicpfX0+PC9idXR0b24+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHsvKjxidXR0b24gdHlwZT17J2J1dHRvbid9Ki99XHJcbiAgICAgICAgICAgICAgICAgICAgey8qICAgICAgICBvbkNsaWNrPXtoYW5kbGVQbGF5UGF1c2V9Ki99XHJcbiAgICAgICAgICAgICAgICAgICAgey8qICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogcGxheWluZyA/IEljb25zKCdwYXVzZScpIDogSWNvbnMoJ3BsYXknKX19Ki99XHJcbiAgICAgICAgICAgICAgICAgICAgey8qPjwvYnV0dG9uPiovfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9eydidXR0b24nfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlTmV4dFByZXYoJ25leHQnKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBJY29ucygnbmV4dCcpfX0+PC9idXR0b24+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdjb250cm9sLXBpcCcpfSB0eXBlPXsnYnV0dG9uJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVBpcH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBJY29ucygncGlwJyl9fT48L2J1dHRvbj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2NvbnRyb2wtcGxheWxpc3QnKX0gdHlwZT17J2J1dHRvbid9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRTaG93UGxheWxpc3QoIXNob3dQbGF5bGlzdCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogSWNvbnMoJ3BsYXlsaXN0Jyl9fT48L2J1dHRvbj5cclxuXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICB7c2hvd1BsYXlsaXN0ICYmXHJcbiAgICAgICAgICAgICAgICA8UGxheWxpc3QgdmlkZW9zPXt2aWRlb3N9IHNldFBsYXlpbmc9e3NldFBsYXlpbmd9IHNldFZpZGVvSW5kZXg9e3NldFZpZGVvSW5kZXh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9JbmRleD17dmlkZW9JbmRleH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvcGxheT17YXV0b3BsYXl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0QXV0b3BsYXk9e3NldEF1dG9wbGF5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNldFNob3dQbGF5bGlzdD17c2V0U2hvd1BsYXlsaXN0fVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICA8UmVhY3RQbGF5ZXJcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJhaW92cF9tZWRpYVwiXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogYCMwMDAgdXJsKCR7cG9zdGVyfSkgbm8tcmVwZWF0YCxcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgIHJlZj17cGxheWVyUmVmfVxyXG4gICAgICAgICAgICAgICAgICAgIHZvbHVtZT17dm9sdW1lfVxyXG4gICAgICAgICAgICAgICAgICAgIHBsYXlpbmc9e3BsYXlpbmd9XHJcbiAgICAgICAgICAgICAgICAgICAgcGlwPXtwaXB9XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsPXt2aWRlb31cclxuICAgICAgICAgICAgICAgICAgICBjb250cm9scz17dHJ1ZX1cclxuICAgICAgICAgICAgICAgICAgICBsaWdodD17cGxheWluZyA/IGZhbHNlIDogcG9zdGVyfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbmZpZz17e1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB5b3V0dWJlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBwbGF5ZXJWYXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgY29udHJvbHM6IDFcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAvLyB9fVxyXG4gICAgICAgICAgICAgICAgICAgIG9uUGxheT17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRCdWZmZXJpbmcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRFcnJvcihmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgb25QYXVzZT17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3I9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGxheWluZyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEVycm9yKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRCdWZmZXJpbmcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9uQnVmZmVyPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEJ1ZmZlcmluZyh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBvbkJ1ZmZlckVuZD17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRCdWZmZXJpbmcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9uRW5kZWQ9eygpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdXRvcGxheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmlkZW9JbmRleCh2aWRlb0luZGV4ICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQbGF5aW5nKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEJ1ZmZlcmluZyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrUHJldmlldz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRQbGF5aW5nKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG5cclxuXHJcbn0iLCJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tIFwiY2xhc3NuYW1lc1wiO1xyXG5pbXBvcnQgSWNvbnMgZnJvbSBcIi4uL2NvbXBvbmVudHMvSWNvbnNcIjtcclxuXHJcbmNvbnN0IHtGb3JtVG9nZ2xlfSA9IHdwLmNvbXBvbmVudHM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQbGF5bGlzdCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWRlb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWRlb0luZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmlkZW9JbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBsYXlpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvcGxheSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEF1dG9wbGF5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0U2hvd1BsYXlsaXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSB7XHJcblxyXG4gICAgY29uc3Qgc2tpbiA9IDE7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFpb3ZwLXBsYXlsaXN0XCI+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYXlsaXN0LWNvbnRyb2xzXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYXlsaXN0LWNvbnRyb2xzX19hdXRvcGxheVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPkF1dG9wbGF5IDogPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxGb3JtVG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e2F1dG9wbGF5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0QXV0b3BsYXkoIWF1dG9wbGF5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICB7MiA9PT0gc2tpbiAmJlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPXsnYnV0dG9uJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0U2hvd1BsYXlsaXN0KCFzZXRTaG93UGxheWxpc3QpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogSWNvbnMoJ3BsYXlsaXN0Jyl9fT48L2J1dHRvbj59XHJcblxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGxheWxpc3QtaXRlbXNcIj5cclxuICAgICAgICAgICAgICAgIHt2aWRlb3MubWFwKCh7dGl0bGUsIHBvc3Rlcn0sIGluZGV4KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHBvc3RlciA9ICEhcG9zdGVyID8gcG9zdGVyIDogYWlvdnAucGx1Z2luX3VybCArICcvYXNzZXRzL2ltYWdlcy90aHVtYm5haWwuc3ZnJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ3BsYXlsaXN0LWl0ZW0nLCB7YWN0aXZlOiB2aWRlb0luZGV4ID09PSBpbmRleH0pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmlkZW9JbmRleChpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBsYXlpbmcodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3Bvc3Rlcn0gYWx0PXt0aXRsZX0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3RpdGxlfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn0iLCJpbXBvcnQgUGxheWVyIGZyb20gXCIuL1BsYXllclwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFpb3ZwSW5pdCgpIHtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbGwtaW4tb25lLXZpZGVvLXBsYXllcicpLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuXHJcbiAgICAgICAgY29uc3QgaWQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpO1xyXG4gICAgICAgIGxldCB2aWRlb3MgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS12aWRlb3MnKTtcclxuXHJcbiAgICAgICAgdmlkZW9zID0gdmlkZW9zID8gSlNPTi5wYXJzZSh2aWRlb3MpIDogW107XHJcblxyXG4gICAgICAgIHdwLmVsZW1lbnQucmVuZGVyKFxyXG4gICAgICAgICAgICA8UGxheWVyXHJcbiAgICAgICAgICAgICAgICBkYXRhPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdmlkZW9zLFxyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgLz4sXHJcbiAgICAgICAgICAgIGVsZW1lbnRcclxuICAgICAgICApXHJcblxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmFpb3ZwSW5pdCgpOyIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTggSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRpZiAoYXJnLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmIChhcmcudG9TdHJpbmcgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpIHtcblx0XHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Y2xhc3NOYW1lcy5kZWZhdWx0ID0gY2xhc3NOYW1lcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNNZXJnZWFibGVPYmplY3QgPSBmdW5jdGlvbiBpc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkge1xuXHRyZXR1cm4gaXNOb25OdWxsT2JqZWN0KHZhbHVlKVxuXHRcdCYmICFpc1NwZWNpYWwodmFsdWUpXG59O1xuXG5mdW5jdGlvbiBpc05vbk51bGxPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xufVxuXG5mdW5jdGlvbiBpc1NwZWNpYWwodmFsdWUpIHtcblx0dmFyIHN0cmluZ1ZhbHVlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcblxuXHRyZXR1cm4gc3RyaW5nVmFsdWUgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG5cdFx0fHwgc3RyaW5nVmFsdWUgPT09ICdbb2JqZWN0IERhdGVdJ1xuXHRcdHx8IGlzUmVhY3RFbGVtZW50KHZhbHVlKVxufVxuXG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvYjVhYzk2M2ZiNzkxZDEyOThlN2YzOTYyMzYzODNiYzk1NWY5MTZjMS9zcmMvaXNvbW9ycGhpYy9jbGFzc2ljL2VsZW1lbnQvUmVhY3RFbGVtZW50LmpzI0wyMS1MMjVcbnZhciBjYW5Vc2VTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3I7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gY2FuVXNlU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIDogMHhlYWM3O1xuXG5mdW5jdGlvbiBpc1JlYWN0RWxlbWVudCh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRVxufVxuXG5mdW5jdGlvbiBlbXB0eVRhcmdldCh2YWwpIHtcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSA/IFtdIDoge31cbn1cblxuZnVuY3Rpb24gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQodmFsdWUsIG9wdGlvbnMpIHtcblx0cmV0dXJuIChvcHRpb25zLmNsb25lICE9PSBmYWxzZSAmJiBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSlcblx0XHQ/IGRlZXBtZXJnZShlbXB0eVRhcmdldCh2YWx1ZSksIHZhbHVlLCBvcHRpb25zKVxuXHRcdDogdmFsdWVcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0cmV0dXJuIHRhcmdldC5jb25jYXQoc291cmNlKS5tYXAoZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdHJldHVybiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChlbGVtZW50LCBvcHRpb25zKVxuXHR9KVxufVxuXG5mdW5jdGlvbiBnZXRNZXJnZUZ1bmN0aW9uKGtleSwgb3B0aW9ucykge1xuXHRpZiAoIW9wdGlvbnMuY3VzdG9tTWVyZ2UpIHtcblx0XHRyZXR1cm4gZGVlcG1lcmdlXG5cdH1cblx0dmFyIGN1c3RvbU1lcmdlID0gb3B0aW9ucy5jdXN0b21NZXJnZShrZXkpO1xuXHRyZXR1cm4gdHlwZW9mIGN1c3RvbU1lcmdlID09PSAnZnVuY3Rpb24nID8gY3VzdG9tTWVyZ2UgOiBkZWVwbWVyZ2Vcbn1cblxuZnVuY3Rpb24gZ2V0RW51bWVyYWJsZU93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpIHtcblx0cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNcblx0XHQ/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KS5maWx0ZXIoZnVuY3Rpb24oc3ltYm9sKSB7XG5cdFx0XHRyZXR1cm4gdGFyZ2V0LnByb3BlcnR5SXNFbnVtZXJhYmxlKHN5bWJvbClcblx0XHR9KVxuXHRcdDogW11cbn1cblxuZnVuY3Rpb24gZ2V0S2V5cyh0YXJnZXQpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKHRhcmdldCkuY29uY2F0KGdldEVudW1lcmFibGVPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSlcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlJc09uT2JqZWN0KG9iamVjdCwgcHJvcGVydHkpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gcHJvcGVydHkgaW4gb2JqZWN0XG5cdH0gY2F0Y2goXykge1xuXHRcdHJldHVybiBmYWxzZVxuXHR9XG59XG5cbi8vIFByb3RlY3RzIGZyb20gcHJvdG90eXBlIHBvaXNvbmluZyBhbmQgdW5leHBlY3RlZCBtZXJnaW5nIHVwIHRoZSBwcm90b3R5cGUgY2hhaW4uXG5mdW5jdGlvbiBwcm9wZXJ0eUlzVW5zYWZlKHRhcmdldCwga2V5KSB7XG5cdHJldHVybiBwcm9wZXJ0eUlzT25PYmplY3QodGFyZ2V0LCBrZXkpIC8vIFByb3BlcnRpZXMgYXJlIHNhZmUgdG8gbWVyZ2UgaWYgdGhleSBkb24ndCBleGlzdCBpbiB0aGUgdGFyZ2V0IHlldCxcblx0XHQmJiAhKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwga2V5KSAvLyB1bnNhZmUgaWYgdGhleSBleGlzdCB1cCB0aGUgcHJvdG90eXBlIGNoYWluLFxuXHRcdFx0JiYgT2JqZWN0LnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodGFyZ2V0LCBrZXkpKSAvLyBhbmQgYWxzbyB1bnNhZmUgaWYgdGhleSdyZSBub25lbnVtZXJhYmxlLlxufVxuXG5mdW5jdGlvbiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHR2YXIgZGVzdGluYXRpb24gPSB7fTtcblx0aWYgKG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodGFyZ2V0KSkge1xuXHRcdGdldEtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHRhcmdldFtrZXldLCBvcHRpb25zKTtcblx0XHR9KTtcblx0fVxuXHRnZXRLZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRpZiAocHJvcGVydHlJc1Vuc2FmZSh0YXJnZXQsIGtleSkpIHtcblx0XHRcdHJldHVyblxuXHRcdH1cblxuXHRcdGlmIChwcm9wZXJ0eUlzT25PYmplY3QodGFyZ2V0LCBrZXkpICYmIG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3Qoc291cmNlW2tleV0pKSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gZ2V0TWVyZ2VGdW5jdGlvbihrZXksIG9wdGlvbnMpKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0b3B0aW9ucy5hcnJheU1lcmdlID0gb3B0aW9ucy5hcnJheU1lcmdlIHx8IGRlZmF1bHRBcnJheU1lcmdlO1xuXHRvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0ID0gb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCB8fCBpc01lcmdlYWJsZU9iamVjdDtcblx0Ly8gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQgaXMgYWRkZWQgdG8gYG9wdGlvbnNgIHNvIHRoYXQgY3VzdG9tIGFycmF5TWVyZ2UoKVxuXHQvLyBpbXBsZW1lbnRhdGlvbnMgY2FuIHVzZSBpdC4gVGhlIGNhbGxlciBtYXkgbm90IHJlcGxhY2UgaXQuXG5cdG9wdGlvbnMuY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQgPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZDtcblxuXHR2YXIgc291cmNlSXNBcnJheSA9IEFycmF5LmlzQXJyYXkoc291cmNlKTtcblx0dmFyIHRhcmdldElzQXJyYXkgPSBBcnJheS5pc0FycmF5KHRhcmdldCk7XG5cdHZhciBzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoID0gc291cmNlSXNBcnJheSA9PT0gdGFyZ2V0SXNBcnJheTtcblxuXHRpZiAoIXNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2gpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2UgaWYgKHNvdXJjZUlzQXJyYXkpIHtcblx0XHRyZXR1cm4gb3B0aW9ucy5hcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fVxufVxuXG5kZWVwbWVyZ2UuYWxsID0gZnVuY3Rpb24gZGVlcG1lcmdlQWxsKGFycmF5LCBvcHRpb25zKSB7XG5cdGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2ZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhbiBhcnJheScpXG5cdH1cblxuXHRyZXR1cm4gYXJyYXkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG5leHQpIHtcblx0XHRyZXR1cm4gZGVlcG1lcmdlKHByZXYsIG5leHQsIG9wdGlvbnMpXG5cdH0sIHt9KVxufTtcblxudmFyIGRlZXBtZXJnZV8xID0gZGVlcG1lcmdlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZXBtZXJnZV8xO1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGxvYWQgKHNyYywgb3B0cywgY2IpIHtcbiAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF1cbiAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpXG5cbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBvcHRzXG4gICAgb3B0cyA9IHt9XG4gIH1cblxuICBvcHRzID0gb3B0cyB8fCB7fVxuICBjYiA9IGNiIHx8IGZ1bmN0aW9uKCkge31cblxuICBzY3JpcHQudHlwZSA9IG9wdHMudHlwZSB8fCAndGV4dC9qYXZhc2NyaXB0J1xuICBzY3JpcHQuY2hhcnNldCA9IG9wdHMuY2hhcnNldCB8fCAndXRmOCc7XG4gIHNjcmlwdC5hc3luYyA9ICdhc3luYycgaW4gb3B0cyA/ICEhb3B0cy5hc3luYyA6IHRydWVcbiAgc2NyaXB0LnNyYyA9IHNyY1xuXG4gIGlmIChvcHRzLmF0dHJzKSB7XG4gICAgc2V0QXR0cmlidXRlcyhzY3JpcHQsIG9wdHMuYXR0cnMpXG4gIH1cblxuICBpZiAob3B0cy50ZXh0KSB7XG4gICAgc2NyaXB0LnRleHQgPSAnJyArIG9wdHMudGV4dFxuICB9XG5cbiAgdmFyIG9uZW5kID0gJ29ubG9hZCcgaW4gc2NyaXB0ID8gc3RkT25FbmQgOiBpZU9uRW5kXG4gIG9uZW5kKHNjcmlwdCwgY2IpXG5cbiAgLy8gc29tZSBnb29kIGxlZ2FjeSBicm93c2VycyAoZmlyZWZveCkgZmFpbCB0aGUgJ2luJyBkZXRlY3Rpb24gYWJvdmVcbiAgLy8gc28gYXMgYSBmYWxsYmFjayB3ZSBhbHdheXMgc2V0IG9ubG9hZFxuICAvLyBvbGQgSUUgd2lsbCBpZ25vcmUgdGhpcyBhbmQgbmV3IElFIHdpbGwgc2V0IG9ubG9hZFxuICBpZiAoIXNjcmlwdC5vbmxvYWQpIHtcbiAgICBzdGRPbkVuZChzY3JpcHQsIGNiKTtcbiAgfVxuXG4gIGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KVxufVxuXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzKHNjcmlwdCwgYXR0cnMpIHtcbiAgZm9yICh2YXIgYXR0ciBpbiBhdHRycykge1xuICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoYXR0ciwgYXR0cnNbYXR0cl0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0ZE9uRW5kIChzY3JpcHQsIGNiKSB7XG4gIHNjcmlwdC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5vbmVycm9yID0gdGhpcy5vbmxvYWQgPSBudWxsXG4gICAgY2IobnVsbCwgc2NyaXB0KVxuICB9XG4gIHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIHRoaXMub25sb2FkID0gbnVsbCBoZXJlIGlzIG5lY2Vzc2FyeVxuICAgIC8vIGJlY2F1c2UgZXZlbiBJRTkgd29ya3Mgbm90IGxpa2Ugb3RoZXJzXG4gICAgdGhpcy5vbmVycm9yID0gdGhpcy5vbmxvYWQgPSBudWxsXG4gICAgY2IobmV3IEVycm9yKCdGYWlsZWQgdG8gbG9hZCAnICsgdGhpcy5zcmMpLCBzY3JpcHQpXG4gIH1cbn1cblxuZnVuY3Rpb24gaWVPbkVuZCAoc2NyaXB0LCBjYikge1xuICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgIT0gJ2NvbXBsZXRlJyAmJiB0aGlzLnJlYWR5U3RhdGUgIT0gJ2xvYWRlZCcpIHJldHVyblxuICAgIHRoaXMub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbFxuICAgIGNiKG51bGwsIHNjcmlwdCkgLy8gdGhlcmUgaXMgbm8gd2F5IHRvIGNhdGNoIGxvYWRpbmcgZXJyb3JzIGluIElFOFxuICB9XG59XG4iLCJ2YXIgc2FmZUlzTmFOID0gTnVtYmVyLmlzTmFOIHx8XG4gICAgZnVuY3Rpb24gcG9ueWZpbGwodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IHZhbHVlO1xuICAgIH07XG5mdW5jdGlvbiBpc0VxdWFsKGZpcnN0LCBzZWNvbmQpIHtcbiAgICBpZiAoZmlyc3QgPT09IHNlY29uZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHNhZmVJc05hTihmaXJzdCkgJiYgc2FmZUlzTmFOKHNlY29uZCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGFyZUlucHV0c0VxdWFsKG5ld0lucHV0cywgbGFzdElucHV0cykge1xuICAgIGlmIChuZXdJbnB1dHMubGVuZ3RoICE9PSBsYXN0SW5wdXRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3SW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghaXNFcXVhbChuZXdJbnB1dHNbaV0sIGxhc3RJbnB1dHNbaV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIG1lbW9pemVPbmUocmVzdWx0Rm4sIGlzRXF1YWwpIHtcbiAgICBpZiAoaXNFcXVhbCA9PT0gdm9pZCAwKSB7IGlzRXF1YWwgPSBhcmVJbnB1dHNFcXVhbDsgfVxuICAgIHZhciBsYXN0VGhpcztcbiAgICB2YXIgbGFzdEFyZ3MgPSBbXTtcbiAgICB2YXIgbGFzdFJlc3VsdDtcbiAgICB2YXIgY2FsbGVkT25jZSA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIG1lbW9pemVkKCkge1xuICAgICAgICB2YXIgbmV3QXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgbmV3QXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWxsZWRPbmNlICYmIGxhc3RUaGlzID09PSB0aGlzICYmIGlzRXF1YWwobmV3QXJncywgbGFzdEFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBsYXN0UmVzdWx0ID0gcmVzdWx0Rm4uYXBwbHkodGhpcywgbmV3QXJncyk7XG4gICAgICAgIGNhbGxlZE9uY2UgPSB0cnVlO1xuICAgICAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgICAgIGxhc3RBcmdzID0gbmV3QXJncztcbiAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBtZW1vaXplZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZU9uZTtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG4gIHZhciBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgdmFyIGhhcyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcblxuICBwcmludFdhcm5pbmcgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIHRleHQ7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcbn1cblxuLyoqXG4gKiBBc3NlcnQgdGhhdCB0aGUgdmFsdWVzIG1hdGNoIHdpdGggdGhlIHR5cGUgc3BlY3MuXG4gKiBFcnJvciBtZXNzYWdlcyBhcmUgbWVtb3JpemVkIGFuZCB3aWxsIG9ubHkgYmUgc2hvd24gb25jZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gdHlwZVNwZWNzIE1hcCBvZiBuYW1lIHRvIGEgUmVhY3RQcm9wVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IHZhbHVlcyBSdW50aW1lIHZhbHVlcyB0aGF0IG5lZWQgdG8gYmUgdHlwZS1jaGVja2VkXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gZS5nLiBcInByb3BcIiwgXCJjb250ZXh0XCIsIFwiY2hpbGQgY29udGV4dFwiXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50TmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICogQHBhcmFtIHs/RnVuY3Rpb259IGdldFN0YWNrIFJldHVybnMgdGhlIGNvbXBvbmVudCBzdGFjay5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNoZWNrUHJvcFR5cGVzKHR5cGVTcGVjcywgdmFsdWVzLCBsb2NhdGlvbiwgY29tcG9uZW50TmFtZSwgZ2V0U3RhY2spIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBmb3IgKHZhciB0eXBlU3BlY05hbWUgaW4gdHlwZVNwZWNzKSB7XG4gICAgICBpZiAoaGFzKHR5cGVTcGVjcywgdHlwZVNwZWNOYW1lKSkge1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIC8vIFByb3AgdHlwZSB2YWxpZGF0aW9uIG1heSB0aHJvdy4gSW4gY2FzZSB0aGV5IGRvLCB3ZSBkb24ndCB3YW50IHRvXG4gICAgICAgIC8vIGZhaWwgdGhlIHJlbmRlciBwaGFzZSB3aGVyZSBpdCBkaWRuJ3QgZmFpbCBiZWZvcmUuIFNvIHdlIGxvZyBpdC5cbiAgICAgICAgLy8gQWZ0ZXIgdGhlc2UgaGF2ZSBiZWVuIGNsZWFuZWQgdXAsIHdlJ2xsIGxldCB0aGVtIHRocm93LlxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuICAgICAgICAgIC8vIGJlaGF2aW9yIGFzIHdpdGhvdXQgdGhpcyBzdGF0ZW1lbnQgZXhjZXB0IHdpdGggYSBiZXR0ZXIgbWVzc2FnZS5cbiAgICAgICAgICBpZiAodHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YXIgZXJyID0gRXJyb3IoXG4gICAgICAgICAgICAgIChjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycpICsgJzogJyArIGxvY2F0aW9uICsgJyB0eXBlIGAnICsgdHlwZVNwZWNOYW1lICsgJ2AgaXMgaW52YWxpZDsgJyArXG4gICAgICAgICAgICAgICdpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UsIGJ1dCByZWNlaXZlZCBgJyArIHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSArICdgLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXJyb3IgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBlcnJvciA9IGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvciAmJiAhKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgKGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJykgKyAnOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJyArXG4gICAgICAgICAgICBsb2NhdGlvbiArICcgYCcgKyB0eXBlU3BlY05hbWUgKyAnYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcgK1xuICAgICAgICAgICAgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICcgKyB0eXBlb2YgZXJyb3IgKyAnLiAnICtcbiAgICAgICAgICAgICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciAnICtcbiAgICAgICAgICAgICdjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcgK1xuICAgICAgICAgICAgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAgIC8vIHNhbWUgZXJyb3IuXG4gICAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcblxuICAgICAgICAgIHZhciBzdGFjayA9IGdldFN0YWNrID8gZ2V0U3RhY2soKSA6ICcnO1xuXG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgJ0ZhaWxlZCAnICsgbG9jYXRpb24gKyAnIHR5cGU6ICcgKyBlcnJvci5tZXNzYWdlICsgKHN0YWNrICE9IG51bGwgPyBzdGFjayA6ICcnKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXNldHMgd2FybmluZyBjYWNoZSB3aGVuIHRlc3RpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2hlY2tQcm9wVHlwZXMucmVzZXRXYXJuaW5nQ2FjaGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNoZWNrUHJvcFR5cGVzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG52YXIgY2hlY2tQcm9wVHlwZXMgPSByZXF1aXJlKCcuL2NoZWNrUHJvcFR5cGVzJyk7XG5cbnZhciBoYXMgPSBGdW5jdGlvbi5jYWxsLmJpbmQoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG52YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24odGV4dCkge1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyB0ZXh0O1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKSB7XG4gIC8qIGdsb2JhbCBTeW1ib2wgKi9cbiAgdmFyIElURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xuICB2YXIgRkFVWF9JVEVSQVRPUl9TWU1CT0wgPSAnQEBpdGVyYXRvcic7IC8vIEJlZm9yZSBTeW1ib2wgc3BlYy5cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaXRlcmF0b3IgbWV0aG9kIGZ1bmN0aW9uIGNvbnRhaW5lZCBvbiB0aGUgaXRlcmFibGUgb2JqZWN0LlxuICAgKlxuICAgKiBCZSBzdXJlIHRvIGludm9rZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgaXRlcmFibGUgYXMgY29udGV4dDpcbiAgICpcbiAgICogICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihteUl0ZXJhYmxlKTtcbiAgICogICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAqICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChteUl0ZXJhYmxlKTtcbiAgICogICAgICAgLi4uXG4gICAqICAgICB9XG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbWF5YmVJdGVyYWJsZVxuICAgKiBAcmV0dXJuIHs/ZnVuY3Rpb259XG4gICAqL1xuICBmdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IG1heWJlSXRlcmFibGUgJiYgKElURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF0pO1xuICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yRm47XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbGxlY3Rpb24gb2YgbWV0aG9kcyB0aGF0IGFsbG93IGRlY2xhcmF0aW9uIGFuZCB2YWxpZGF0aW9uIG9mIHByb3BzIHRoYXQgYXJlXG4gICAqIHN1cHBsaWVkIHRvIFJlYWN0IGNvbXBvbmVudHMuIEV4YW1wbGUgdXNhZ2U6XG4gICAqXG4gICAqICAgdmFyIFByb3BzID0gcmVxdWlyZSgnUmVhY3RQcm9wVHlwZXMnKTtcbiAgICogICB2YXIgTXlBcnRpY2xlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICAgcHJvcFR5cGVzOiB7XG4gICAqICAgICAgIC8vIEFuIG9wdGlvbmFsIHN0cmluZyBwcm9wIG5hbWVkIFwiZGVzY3JpcHRpb25cIi5cbiAgICogICAgICAgZGVzY3JpcHRpb246IFByb3BzLnN0cmluZyxcbiAgICpcbiAgICogICAgICAgLy8gQSByZXF1aXJlZCBlbnVtIHByb3AgbmFtZWQgXCJjYXRlZ29yeVwiLlxuICAgKiAgICAgICBjYXRlZ29yeTogUHJvcHMub25lT2YoWydOZXdzJywnUGhvdG9zJ10pLmlzUmVxdWlyZWQsXG4gICAqXG4gICAqICAgICAgIC8vIEEgcHJvcCBuYW1lZCBcImRpYWxvZ1wiIHRoYXQgcmVxdWlyZXMgYW4gaW5zdGFuY2Ugb2YgRGlhbG9nLlxuICAgKiAgICAgICBkaWFsb2c6IFByb3BzLmluc3RhbmNlT2YoRGlhbG9nKS5pc1JlcXVpcmVkXG4gICAqICAgICB9LFxuICAgKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHsgLi4uIH1cbiAgICogICB9KTtcbiAgICpcbiAgICogQSBtb3JlIGZvcm1hbCBzcGVjaWZpY2F0aW9uIG9mIGhvdyB0aGVzZSBtZXRob2RzIGFyZSB1c2VkOlxuICAgKlxuICAgKiAgIHR5cGUgOj0gYXJyYXl8Ym9vbHxmdW5jfG9iamVjdHxudW1iZXJ8c3RyaW5nfG9uZU9mKFsuLi5dKXxpbnN0YW5jZU9mKC4uLilcbiAgICogICBkZWNsIDo9IFJlYWN0UHJvcFR5cGVzLnt0eXBlfSguaXNSZXF1aXJlZCk/XG4gICAqXG4gICAqIEVhY2ggYW5kIGV2ZXJ5IGRlY2xhcmF0aW9uIHByb2R1Y2VzIGEgZnVuY3Rpb24gd2l0aCB0aGUgc2FtZSBzaWduYXR1cmUuIFRoaXNcbiAgICogYWxsb3dzIHRoZSBjcmVhdGlvbiBvZiBjdXN0b20gdmFsaWRhdGlvbiBmdW5jdGlvbnMuIEZvciBleGFtcGxlOlxuICAgKlxuICAgKiAgdmFyIE15TGluayA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICogICAgcHJvcFR5cGVzOiB7XG4gICAqICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIG9yIFVSSSBwcm9wIG5hbWVkIFwiaHJlZlwiLlxuICAgKiAgICAgIGhyZWY6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgKiAgICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICogICAgICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgcHJvcFZhbHVlICE9PSAnc3RyaW5nJyAmJlxuICAgKiAgICAgICAgICAgICEocHJvcFZhbHVlIGluc3RhbmNlb2YgVVJJKSkge1xuICAgKiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgKiAgICAgICAgICAgICdFeHBlY3RlZCBhIHN0cmluZyBvciBhbiBVUkkgZm9yICcgKyBwcm9wTmFtZSArICcgaW4gJyArXG4gICAqICAgICAgICAgICAgY29tcG9uZW50TmFtZVxuICAgKiAgICAgICAgICApO1xuICAgKiAgICAgICAgfVxuICAgKiAgICAgIH1cbiAgICogICAgfSxcbiAgICogICAgcmVuZGVyOiBmdW5jdGlvbigpIHsuLi59XG4gICAqICB9KTtcbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuXG4gIHZhciBBTk9OWU1PVVMgPSAnPDxhbm9ueW1vdXM+Pic7XG5cbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2FycmF5JyksXG4gICAgYm9vbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2Jvb2xlYW4nKSxcbiAgICBmdW5jOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignZnVuY3Rpb24nKSxcbiAgICBudW1iZXI6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdudW1iZXInKSxcbiAgICBvYmplY3Q6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdvYmplY3QnKSxcbiAgICBzdHJpbmc6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzdHJpbmcnKSxcbiAgICBzeW1ib2w6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzeW1ib2wnKSxcblxuICAgIGFueTogY3JlYXRlQW55VHlwZUNoZWNrZXIoKSxcbiAgICBhcnJheU9mOiBjcmVhdGVBcnJheU9mVHlwZUNoZWNrZXIsXG4gICAgZWxlbWVudDogY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCksXG4gICAgZWxlbWVudFR5cGU6IGNyZWF0ZUVsZW1lbnRUeXBlVHlwZUNoZWNrZXIoKSxcbiAgICBpbnN0YW5jZU9mOiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyLFxuICAgIG5vZGU6IGNyZWF0ZU5vZGVDaGVja2VyKCksXG4gICAgb2JqZWN0T2Y6IGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIsXG4gICAgb25lT2Y6IGNyZWF0ZUVudW1UeXBlQ2hlY2tlcixcbiAgICBvbmVPZlR5cGU6IGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIsXG4gICAgc2hhcGU6IGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIsXG4gICAgZXhhY3Q6IGNyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIsXG4gIH07XG5cbiAgLyoqXG4gICAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gICAqL1xuICAvKmVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSovXG4gIGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gICAgaWYgKHggPT09IHkpIHtcbiAgICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gICAgfVxuICB9XG4gIC8qZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUqL1xuXG4gIC8qKlxuICAgKiBXZSB1c2UgYW4gRXJyb3ItbGlrZSBvYmplY3QgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgYXMgcGVvcGxlIG1heSBjYWxsXG4gICAqIFByb3BUeXBlcyBkaXJlY3RseSBhbmQgaW5zcGVjdCB0aGVpciBvdXRwdXQuIEhvd2V2ZXIsIHdlIGRvbid0IHVzZSByZWFsXG4gICAqIEVycm9ycyBhbnltb3JlLiBXZSBkb24ndCBpbnNwZWN0IHRoZWlyIHN0YWNrIGFueXdheSwgYW5kIGNyZWF0aW5nIHRoZW1cbiAgICogaXMgcHJvaGliaXRpdmVseSBleHBlbnNpdmUgaWYgdGhleSBhcmUgY3JlYXRlZCB0b28gb2Z0ZW4sIHN1Y2ggYXMgd2hhdFxuICAgKiBoYXBwZW5zIGluIG9uZU9mVHlwZSgpIGZvciBhbnkgdHlwZSBiZWZvcmUgdGhlIG9uZSB0aGF0IG1hdGNoZWQuXG4gICAqL1xuICBmdW5jdGlvbiBQcm9wVHlwZUVycm9yKG1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMuc3RhY2sgPSAnJztcbiAgfVxuICAvLyBNYWtlIGBpbnN0YW5jZW9mIEVycm9yYCBzdGlsbCB3b3JrIGZvciByZXR1cm5lZCBlcnJvcnMuXG4gIFByb3BUeXBlRXJyb3IucHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBtYW51YWxQcm9wVHlwZUNhbGxDYWNoZSA9IHt9O1xuICAgICAgdmFyIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50ID0gMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2hlY2tUeXBlKGlzUmVxdWlyZWQsIHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgICBjb21wb25lbnROYW1lID0gY29tcG9uZW50TmFtZSB8fCBBTk9OWU1PVVM7XG4gICAgICBwcm9wRnVsbE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICAgIGlmIChzZWNyZXQgIT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAgIGlmICh0aHJvd09uRGlyZWN0QWNjZXNzKSB7XG4gICAgICAgICAgLy8gTmV3IGJlaGF2aW9yIG9ubHkgZm9yIHVzZXJzIG9mIGBwcm9wLXR5cGVzYCBwYWNrYWdlXG4gICAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICAgICAgICdVc2UgYFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpYCB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgICAgICAgKTtcbiAgICAgICAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAvLyBPbGQgYmVoYXZpb3IgZm9yIHBlb3BsZSB1c2luZyBSZWFjdC5Qcm9wVHlwZXNcbiAgICAgICAgICB2YXIgY2FjaGVLZXkgPSBjb21wb25lbnROYW1lICsgJzonICsgcHJvcE5hbWU7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIW1hbnVhbFByb3BUeXBlQ2FsbENhY2hlW2NhY2hlS2V5XSAmJlxuICAgICAgICAgICAgLy8gQXZvaWQgc3BhbW1pbmcgdGhlIGNvbnNvbGUgYmVjYXVzZSB0aGV5IGFyZSBvZnRlbiBub3QgYWN0aW9uYWJsZSBleGNlcHQgZm9yIGxpYiBhdXRob3JzXG4gICAgICAgICAgICBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCA8IDNcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgICAgJ1lvdSBhcmUgbWFudWFsbHkgY2FsbGluZyBhIFJlYWN0LlByb3BUeXBlcyB2YWxpZGF0aW9uICcgK1xuICAgICAgICAgICAgICAnZnVuY3Rpb24gZm9yIHRoZSBgJyArIHByb3BGdWxsTmFtZSArICdgIHByb3Agb24gYCcgKyBjb21wb25lbnROYW1lICArICdgLiBUaGlzIGlzIGRlcHJlY2F0ZWQgJyArXG4gICAgICAgICAgICAgICdhbmQgd2lsbCB0aHJvdyBpbiB0aGUgc3RhbmRhbG9uZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAgICAgICAgICdZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIGEgdGhpcmQtcGFydHkgUHJvcFR5cGVzICcgK1xuICAgICAgICAgICAgICAnbGlicmFyeS4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1kb250LWNhbGwtcHJvcHR5cGVzICcgKyAnZm9yIGRldGFpbHMuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlQ2FsbENhY2hlW2NhY2hlS2V5XSA9IHRydWU7XG4gICAgICAgICAgICBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdUaGUgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCAnICsgKCdpbiBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgYnV0IGl0cyB2YWx1ZSBpcyBgbnVsbGAuJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgaXMgbWFya2VkIGFzIHJlcXVpcmVkIGluICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLCBidXQgaXRzIHZhbHVlIGlzIGB1bmRlZmluZWRgLicpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjaGFpbmVkQ2hlY2tUeXBlID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgZmFsc2UpO1xuICAgIGNoYWluZWRDaGVja1R5cGUuaXNSZXF1aXJlZCA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIHRydWUpO1xuXG4gICAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcihleHBlY3RlZFR5cGUpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICBpZiAocHJvcFR5cGUgIT09IGV4cGVjdGVkVHlwZSkge1xuICAgICAgICAvLyBgcHJvcFZhbHVlYCBiZWluZyBpbnN0YW5jZSBvZiwgc2F5LCBkYXRlL3JlZ2V4cCwgcGFzcyB0aGUgJ29iamVjdCdcbiAgICAgICAgLy8gY2hlY2ssIGJ1dCB3ZSBjYW4gb2ZmZXIgYSBtb3JlIHByZWNpc2UgZXJyb3IgbWVzc2FnZSBoZXJlIHJhdGhlciB0aGFuXG4gICAgICAgIC8vICdvZiB0eXBlIGBvYmplY3RgJy5cbiAgICAgICAgdmFyIHByZWNpc2VUeXBlID0gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcmVjaXNlVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnYCcgKyBleHBlY3RlZFR5cGUgKyAnYC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFueVR5cGVDaGVja2VyKCkge1xuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBhcnJheU9mLicpO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGFuIGFycmF5LicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwgaSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICdbJyArIGkgKyAnXScsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZVR5cGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghUmVhY3RJcy5pc1ZhbGlkRWxlbWVudFR5cGUocHJvcFZhbHVlKSkge1xuICAgICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQgdHlwZS4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIoZXhwZWN0ZWRDbGFzcykge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKCEocHJvcHNbcHJvcE5hbWVdIGluc3RhbmNlb2YgZXhwZWN0ZWRDbGFzcykpIHtcbiAgICAgICAgdmFyIGV4cGVjdGVkQ2xhc3NOYW1lID0gZXhwZWN0ZWRDbGFzcy5uYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgICAgdmFyIGFjdHVhbENsYXNzTmFtZSA9IGdldENsYXNzTmFtZShwcm9wc1twcm9wTmFtZV0pO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBhY3R1YWxDbGFzc05hbWUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgJykgKyAoJ2luc3RhbmNlIG9mIGAnICsgZXhwZWN0ZWRDbGFzc05hbWUgKyAnYC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVudW1UeXBlQ2hlY2tlcihleHBlY3RlZFZhbHVlcykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFZhbHVlcykpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgICdJbnZhbGlkIGFyZ3VtZW50cyBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gYXJyYXksIGdvdCAnICsgYXJndW1lbnRzLmxlbmd0aCArICcgYXJndW1lbnRzLiAnICtcbiAgICAgICAgICAgICdBIGNvbW1vbiBtaXN0YWtlIGlzIHRvIHdyaXRlIG9uZU9mKHgsIHksIHopIGluc3RlYWQgb2Ygb25lT2YoW3gsIHksIHpdKS4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmludFdhcm5pbmcoJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2YsIGV4cGVjdGVkIGFuIGFycmF5LicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGVjdGVkVmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpcyhwcm9wVmFsdWUsIGV4cGVjdGVkVmFsdWVzW2ldKSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZXNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShleHBlY3RlZFZhbHVlcywgZnVuY3Rpb24gcmVwbGFjZXIoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgdHlwZSA9IGdldFByZWNpc2VUeXBlKHZhbHVlKTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzeW1ib2wnKSB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHZhbHVlIGAnICsgU3RyaW5nKHByb3BWYWx1ZSkgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgb25lIG9mICcgKyB2YWx1ZXNTdHJpbmcgKyAnLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdHlwZUNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdQcm9wZXJ0eSBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIGNvbXBvbmVudCBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgb2JqZWN0T2YuJyk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gb2JqZWN0LicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wVmFsdWUpIHtcbiAgICAgICAgaWYgKGhhcyhwcm9wVmFsdWUsIGtleSkpIHtcbiAgICAgICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIoYXJyYXlPZlR5cGVDaGVja2Vycykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheU9mVHlwZUNoZWNrZXJzKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHByaW50V2FybmluZygnSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZlR5cGUsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGw7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICBpZiAodHlwZW9mIGNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZS4gRXhwZWN0ZWQgYW4gYXJyYXkgb2YgY2hlY2sgZnVuY3Rpb25zLCBidXQgJyArXG4gICAgICAgICAgJ3JlY2VpdmVkICcgKyBnZXRQb3N0Zml4Rm9yVHlwZVdhcm5pbmcoY2hlY2tlcikgKyAnIGF0IGluZGV4ICcgKyBpICsgJy4nXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGVja2VyID0gYXJyYXlPZlR5cGVDaGVja2Vyc1tpXTtcbiAgICAgICAgaWYgKGNoZWNrZXIocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBSZWFjdFByb3BUeXBlc1NlY3JldCkgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AuJykpO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTm9kZUNoZWNrZXIoKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBpZiAoIWlzTm9kZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgUmVhY3ROb2RlLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIGAnICsgcHJvcFR5cGUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNoYXBlVHlwZXMpIHtcbiAgICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnLicgKyBrZXksIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIoc2hhcGVUeXBlcykge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSBgJyArIHByb3BUeXBlICsgJ2AgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGBvYmplY3RgLicpKTtcbiAgICAgIH1cbiAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgYWxsIGtleXMgaW4gY2FzZSBzb21lIGFyZSByZXF1aXJlZCBidXQgbWlzc2luZyBmcm9tXG4gICAgICAvLyBwcm9wcy5cbiAgICAgIHZhciBhbGxLZXlzID0gYXNzaWduKHt9LCBwcm9wc1twcm9wTmFtZV0sIHNoYXBlVHlwZXMpO1xuICAgICAgZm9yICh2YXIga2V5IGluIGFsbEtleXMpIHtcbiAgICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcihcbiAgICAgICAgICAgICdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBrZXkgYCcgKyBrZXkgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nICtcbiAgICAgICAgICAgICdcXG5CYWQgb2JqZWN0OiAnICsgSlNPTi5zdHJpbmdpZnkocHJvcHNbcHJvcE5hbWVdLCBudWxsLCAnICAnKSArXG4gICAgICAgICAgICAnXFxuVmFsaWQga2V5czogJyArICBKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhzaGFwZVR5cGVzKSwgbnVsbCwgJyAgJylcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnLicgKyBrZXksIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNOb2RlKHByb3BWYWx1ZSkge1xuICAgIHN3aXRjaCAodHlwZW9mIHByb3BWYWx1ZSkge1xuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICByZXR1cm4gIXByb3BWYWx1ZTtcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gcHJvcFZhbHVlLmV2ZXJ5KGlzTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BWYWx1ZSA9PT0gbnVsbCB8fCBpc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4ocHJvcFZhbHVlKTtcbiAgICAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwocHJvcFZhbHVlKTtcbiAgICAgICAgICB2YXIgc3RlcDtcbiAgICAgICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gcHJvcFZhbHVlLmVudHJpZXMpIHtcbiAgICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgaWYgKCFpc05vZGUoc3RlcC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSXRlcmF0b3Igd2lsbCBwcm92aWRlIGVudHJ5IFtrLHZdIHR1cGxlcyByYXRoZXIgdGhhbiB2YWx1ZXMuXG4gICAgICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgICAgIGlmICghaXNOb2RlKGVudHJ5WzFdKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1N5bWJvbChwcm9wVHlwZSwgcHJvcFZhbHVlKSB7XG4gICAgLy8gTmF0aXZlIFN5bWJvbC5cbiAgICBpZiAocHJvcFR5cGUgPT09ICdzeW1ib2wnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBmYWxzeSB2YWx1ZSBjYW4ndCBiZSBhIFN5bWJvbFxuICAgIGlmICghcHJvcFZhbHVlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXSA9PT0gJ1N5bWJvbCdcbiAgICBpZiAocHJvcFZhbHVlWydAQHRvU3RyaW5nVGFnJ10gPT09ICdTeW1ib2wnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBGYWxsYmFjayBmb3Igbm9uLXNwZWMgY29tcGxpYW50IFN5bWJvbHMgd2hpY2ggYXJlIHBvbHlmaWxsZWQuXG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgcHJvcFZhbHVlIGluc3RhbmNlb2YgU3ltYm9sKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBFcXVpdmFsZW50IG9mIGB0eXBlb2ZgIGJ1dCB3aXRoIHNwZWNpYWwgaGFuZGxpbmcgZm9yIGFycmF5IGFuZCByZWdleHAuXG4gIGZ1bmN0aW9uIGdldFByb3BUeXBlKHByb3BWYWx1ZSkge1xuICAgIHZhciBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWU7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgcmV0dXJuICdhcnJheSc7XG4gICAgfVxuICAgIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIC8vIE9sZCB3ZWJraXRzIChhdCBsZWFzdCB1bnRpbCBBbmRyb2lkIDQuMCkgcmV0dXJuICdmdW5jdGlvbicgcmF0aGVyIHRoYW5cbiAgICAgIC8vICdvYmplY3QnIGZvciB0eXBlb2YgYSBSZWdFeHAuIFdlJ2xsIG5vcm1hbGl6ZSB0aGlzIGhlcmUgc28gdGhhdCAvYmxhL1xuICAgICAgLy8gcGFzc2VzIFByb3BUeXBlcy5vYmplY3QuXG4gICAgICByZXR1cm4gJ29iamVjdCc7XG4gICAgfVxuICAgIGlmIChpc1N5bWJvbChwcm9wVHlwZSwgcHJvcFZhbHVlKSkge1xuICAgICAgcmV0dXJuICdzeW1ib2wnO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcFR5cGU7XG4gIH1cblxuICAvLyBUaGlzIGhhbmRsZXMgbW9yZSB0eXBlcyB0aGFuIGBnZXRQcm9wVHlwZWAuIE9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4gIC8vIFNlZSBgY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXJgLlxuICBmdW5jdGlvbiBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgcHJvcFZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gJycgKyBwcm9wVmFsdWU7XG4gICAgfVxuICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgaWYgKHByb3BUeXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuICdkYXRlJztcbiAgICAgIH0gZWxzZSBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgIHJldHVybiAncmVnZXhwJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByb3BUeXBlO1xuICB9XG5cbiAgLy8gUmV0dXJucyBhIHN0cmluZyB0aGF0IGlzIHBvc3RmaXhlZCB0byBhIHdhcm5pbmcgYWJvdXQgYW4gaW52YWxpZCB0eXBlLlxuICAvLyBGb3IgZXhhbXBsZSwgXCJ1bmRlZmluZWRcIiBvciBcIm9mIHR5cGUgYXJyYXlcIlxuICBmdW5jdGlvbiBnZXRQb3N0Zml4Rm9yVHlwZVdhcm5pbmcodmFsdWUpIHtcbiAgICB2YXIgdHlwZSA9IGdldFByZWNpc2VUeXBlKHZhbHVlKTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHJldHVybiAnYW4gJyArIHR5cGU7XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgY2FzZSAncmVnZXhwJzpcbiAgICAgICAgcmV0dXJuICdhICcgKyB0eXBlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJucyBjbGFzcyBuYW1lIG9mIHRoZSBvYmplY3QsIGlmIGFueS5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKHByb3BWYWx1ZSkge1xuICAgIGlmICghcHJvcFZhbHVlLmNvbnN0cnVjdG9yIHx8ICFwcm9wVmFsdWUuY29uc3RydWN0b3IubmFtZSkge1xuICAgICAgcmV0dXJuIEFOT05ZTU9VUztcbiAgICB9XG4gICAgcmV0dXJuIHByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBjaGVja1Byb3BUeXBlcztcbiAgUmVhY3RQcm9wVHlwZXMucmVzZXRXYXJuaW5nQ2FjaGUgPSBjaGVja1Byb3BUeXBlcy5yZXNldFdhcm5pbmdDYWNoZTtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyogZ2xvYmFsIE1hcDpyZWFkb25seSwgU2V0OnJlYWRvbmx5LCBBcnJheUJ1ZmZlcjpyZWFkb25seSAqL1xuXG52YXIgaGFzRWxlbWVudFR5cGUgPSB0eXBlb2YgRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgaGFzTWFwID0gdHlwZW9mIE1hcCA9PT0gJ2Z1bmN0aW9uJztcbnZhciBoYXNTZXQgPSB0eXBlb2YgU2V0ID09PSAnZnVuY3Rpb24nO1xudmFyIGhhc0FycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nICYmICEhQXJyYXlCdWZmZXIuaXNWaWV3O1xuXG4vLyBOb3RlOiBXZSAqKmRvbid0KiogbmVlZCBgZW52SGFzQmlnSW50NjRBcnJheWAgaW4gZmRlIGVzNi9pbmRleC5qc1xuXG5mdW5jdGlvbiBlcXVhbChhLCBiKSB7XG4gIC8vIFNUQVJUOiBmYXN0LWRlZXAtZXF1YWwgZXM2L2luZGV4LmpzIDMuMS4xXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSAmJiBiICYmIHR5cGVvZiBhID09ICdvYmplY3QnICYmIHR5cGVvZiBiID09ICdvYmplY3QnKSB7XG4gICAgaWYgKGEuY29uc3RydWN0b3IgIT09IGIuY29uc3RydWN0b3IpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBsZW5ndGgsIGksIGtleXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCAhPSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgICBpZiAoIWVxdWFsKGFbaV0sIGJbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBTVEFSVDogTW9kaWZpY2F0aW9uczpcbiAgICAvLyAxLiBFeHRyYSBgaGFzPFR5cGU+ICYmYCBoZWxwZXJzIGluIGluaXRpYWwgY29uZGl0aW9uIGFsbG93IGVzNiBjb2RlXG4gICAgLy8gICAgdG8gY28tZXhpc3Qgd2l0aCBlczUuXG4gICAgLy8gMi4gUmVwbGFjZSBgZm9yIG9mYCB3aXRoIGVzNSBjb21wbGlhbnQgaXRlcmF0aW9uIHVzaW5nIGBmb3JgLlxuICAgIC8vICAgIEJhc2ljYWxseSwgdGFrZTpcbiAgICAvL1xuICAgIC8vICAgIGBgYGpzXG4gICAgLy8gICAgZm9yIChpIG9mIGEuZW50cmllcygpKVxuICAgIC8vICAgICAgaWYgKCFiLmhhcyhpWzBdKSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vICAgIGBgYFxuICAgIC8vXG4gICAgLy8gICAgLi4uIGFuZCBjb252ZXJ0IHRvOlxuICAgIC8vXG4gICAgLy8gICAgYGBganNcbiAgICAvLyAgICBpdCA9IGEuZW50cmllcygpO1xuICAgIC8vICAgIHdoaWxlICghKGkgPSBpdC5uZXh0KCkpLmRvbmUpXG4gICAgLy8gICAgICBpZiAoIWIuaGFzKGkudmFsdWVbMF0pKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gICAgYGBgXG4gICAgLy9cbiAgICAvLyAgICAqKk5vdGUqKjogYGlgIGFjY2VzcyBzd2l0Y2hlcyB0byBgaS52YWx1ZWAuXG4gICAgdmFyIGl0O1xuICAgIGlmIChoYXNNYXAgJiYgKGEgaW5zdGFuY2VvZiBNYXApICYmIChiIGluc3RhbmNlb2YgTWFwKSkge1xuICAgICAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSByZXR1cm4gZmFsc2U7XG4gICAgICBpdCA9IGEuZW50cmllcygpO1xuICAgICAgd2hpbGUgKCEoaSA9IGl0Lm5leHQoKSkuZG9uZSlcbiAgICAgICAgaWYgKCFiLmhhcyhpLnZhbHVlWzBdKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgaXQgPSBhLmVudHJpZXMoKTtcbiAgICAgIHdoaWxlICghKGkgPSBpdC5uZXh0KCkpLmRvbmUpXG4gICAgICAgIGlmICghZXF1YWwoaS52YWx1ZVsxXSwgYi5nZXQoaS52YWx1ZVswXSkpKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaGFzU2V0ICYmIChhIGluc3RhbmNlb2YgU2V0KSAmJiAoYiBpbnN0YW5jZW9mIFNldCkpIHtcbiAgICAgIGlmIChhLnNpemUgIT09IGIuc2l6ZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgaXQgPSBhLmVudHJpZXMoKTtcbiAgICAgIHdoaWxlICghKGkgPSBpdC5uZXh0KCkpLmRvbmUpXG4gICAgICAgIGlmICghYi5oYXMoaS52YWx1ZVswXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBFTkQ6IE1vZGlmaWNhdGlvbnNcblxuICAgIGlmIChoYXNBcnJheUJ1ZmZlciAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcoYSkgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KGIpKSB7XG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChhLmNvbnN0cnVjdG9yID09PSBSZWdFeHApIHJldHVybiBhLnNvdXJjZSA9PT0gYi5zb3VyY2UgJiYgYS5mbGFncyA9PT0gYi5mbGFncztcbiAgICBpZiAoYS52YWx1ZU9mICE9PSBPYmplY3QucHJvdG90eXBlLnZhbHVlT2YpIHJldHVybiBhLnZhbHVlT2YoKSA9PT0gYi52YWx1ZU9mKCk7XG4gICAgaWYgKGEudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpIHJldHVybiBhLnRvU3RyaW5nKCkgPT09IGIudG9TdHJpbmcoKTtcblxuICAgIGtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoICE9PSBPYmplY3Qua2V5cyhiKS5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIGtleXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gRU5EOiBmYXN0LWRlZXAtZXF1YWxcblxuICAgIC8vIFNUQVJUOiByZWFjdC1mYXN0LWNvbXBhcmVcbiAgICAvLyBjdXN0b20gaGFuZGxpbmcgZm9yIERPTSBlbGVtZW50c1xuICAgIGlmIChoYXNFbGVtZW50VHlwZSAmJiBhIGluc3RhbmNlb2YgRWxlbWVudCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gY3VzdG9tIGhhbmRsaW5nIGZvciBSZWFjdC9QcmVhY3RcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspIHtcbiAgICAgIGlmICgoa2V5c1tpXSA9PT0gJ19vd25lcicgfHwga2V5c1tpXSA9PT0gJ19fdicgfHwga2V5c1tpXSA9PT0gJ19fbycpICYmIGEuJCR0eXBlb2YpIHtcbiAgICAgICAgLy8gUmVhY3Qtc3BlY2lmaWM6IGF2b2lkIHRyYXZlcnNpbmcgUmVhY3QgZWxlbWVudHMnIF9vd25lclxuICAgICAgICAvLyBQcmVhY3Qtc3BlY2lmaWM6IGF2b2lkIHRyYXZlcnNpbmcgUHJlYWN0IGVsZW1lbnRzJyBfX3YgYW5kIF9fb1xuICAgICAgICAvLyAgICBfX3YgPSAkX29yaWdpbmFsIC8gJF92bm9kZVxuICAgICAgICAvLyAgICBfX28gPSAkX293bmVyXG4gICAgICAgIC8vIFRoZXNlIHByb3BlcnRpZXMgY29udGFpbiBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCBhcmUgbm90IG5lZWRlZCB3aGVuXG4gICAgICAgIC8vIGNvbXBhcmluZyB0aGUgYWN0dWFsIGVsZW1lbnRzIChhbmQgbm90IHRoZWlyIG93bmVycylcbiAgICAgICAgLy8gLiQkdHlwZW9mIGFuZCAuX3N0b3JlIG9uIGp1c3QgcmVhc29uYWJsZSBtYXJrZXJzIG9mIGVsZW1lbnRzXG5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGFsbCBvdGhlciBwcm9wZXJ0aWVzIHNob3VsZCBiZSB0cmF2ZXJzZWQgYXMgdXN1YWxcbiAgICAgIGlmICghZXF1YWwoYVtrZXlzW2ldXSwgYltrZXlzW2ldXSkpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gRU5EOiByZWFjdC1mYXN0LWNvbXBhcmVcblxuICAgIC8vIFNUQVJUOiBmYXN0LWRlZXAtZXF1YWxcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBhICE9PSBhICYmIGIgIT09IGI7XG59XG4vLyBlbmQgZmFzdC1kZWVwLWVxdWFsXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNFcXVhbChhLCBiKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVxdWFsKGEsIGIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICgoKGVycm9yLm1lc3NhZ2UgfHwgJycpLm1hdGNoKC9zdGFja3xyZWN1cnNpb24vaSkpKSB7XG4gICAgICAvLyB3YXJuIG9uIGNpcmN1bGFyIHJlZmVyZW5jZXMsIGRvbid0IGNyYXNoXG4gICAgICAvLyBicm93c2VycyBnaXZlIHRoaXMgZGlmZmVyZW50IGVycm9ycyBuYW1lIGFuZCBtZXNzYWdlczpcbiAgICAgIC8vIGNocm9tZS9zYWZhcmk6IFwiUmFuZ2VFcnJvclwiLCBcIk1heGltdW0gY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCJcbiAgICAgIC8vIGZpcmVmb3g6IFwiSW50ZXJuYWxFcnJvclwiLCB0b28gbXVjaCByZWN1cnNpb25cIlxuICAgICAgLy8gZWRnZTogXCJFcnJvclwiLCBcIk91dCBvZiBzdGFjayBzcGFjZVwiXG4gICAgICBjb25zb2xlLndhcm4oJ3JlYWN0LWZhc3QtY29tcGFyZSBjYW5ub3QgaGFuZGxlIGNpcmN1bGFyIHJlZnMnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gc29tZSBvdGhlciBlcnJvci4gd2Ugc2hvdWxkIGRlZmluaXRlbHkga25vdyBhYm91dCB0aGVzZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5kZXZlbG9wbWVudC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQtbGlrZSB0eXBlcy4gSWYgdGhlcmUgaXMgbm8gbmF0aXZlIFN5bWJvbFxuLy8gbm9yIHBvbHlmaWxsLCB0aGVuIGEgcGxhaW4gbnVtYmVyIGlzIHVzZWQgZm9yIHBlcmZvcm1hbmNlLlxudmFyIGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgOiAweGVhYzc7XG52YXIgUkVBQ1RfUE9SVEFMX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5wb3J0YWwnKSA6IDB4ZWFjYTtcbnZhciBSRUFDVF9GUkFHTUVOVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZnJhZ21lbnQnKSA6IDB4ZWFjYjtcbnZhciBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc3RyaWN0X21vZGUnKSA6IDB4ZWFjYztcbnZhciBSRUFDVF9QUk9GSUxFUl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QucHJvZmlsZXInKSA6IDB4ZWFkMjtcbnZhciBSRUFDVF9QUk9WSURFUl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QucHJvdmlkZXInKSA6IDB4ZWFjZDtcbnZhciBSRUFDVF9DT05URVhUX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5jb250ZXh0JykgOiAweGVhY2U7IC8vIFRPRE86IFdlIGRvbid0IHVzZSBBc3luY01vZGUgb3IgQ29uY3VycmVudE1vZGUgYW55bW9yZS4gVGhleSB3ZXJlIHRlbXBvcmFyeVxuLy8gKHVuc3RhYmxlKSBBUElzIHRoYXQgaGF2ZSBiZWVuIHJlbW92ZWQuIENhbiB3ZSByZW1vdmUgdGhlIHN5bWJvbHM/XG5cbnZhciBSRUFDVF9BU1lOQ19NT0RFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5hc3luY19tb2RlJykgOiAweGVhY2Y7XG52YXIgUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5jb25jdXJyZW50X21vZGUnKSA6IDB4ZWFjZjtcbnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZm9yd2FyZF9yZWYnKSA6IDB4ZWFkMDtcbnZhciBSRUFDVF9TVVNQRU5TRV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2UnKSA6IDB4ZWFkMTtcbnZhciBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5zdXNwZW5zZV9saXN0JykgOiAweGVhZDg7XG52YXIgUkVBQ1RfTUVNT19UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QubWVtbycpIDogMHhlYWQzO1xudmFyIFJFQUNUX0xBWllfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmxhenknKSA6IDB4ZWFkNDtcbnZhciBSRUFDVF9CTE9DS19UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuYmxvY2snKSA6IDB4ZWFkOTtcbnZhciBSRUFDVF9GVU5EQU1FTlRBTF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZnVuZGFtZW50YWwnKSA6IDB4ZWFkNTtcbnZhciBSRUFDVF9SRVNQT05ERVJfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnJlc3BvbmRlcicpIDogMHhlYWQ2O1xudmFyIFJFQUNUX1NDT1BFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5zY29wZScpIDogMHhlYWQ3O1xuXG5mdW5jdGlvbiBpc1ZhbGlkRWxlbWVudFR5cGUodHlwZSkge1xuICByZXR1cm4gdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nIHx8IC8vIE5vdGU6IGl0cyB0eXBlb2YgbWlnaHQgYmUgb3RoZXIgdGhhbiAnc3ltYm9sJyBvciAnbnVtYmVyJyBpZiBpdCdzIGEgcG9seWZpbGwuXG4gIHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFIHx8IHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsICYmICh0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9MQVpZX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTUVNT19UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX1BST1ZJREVSX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRlVOREFNRU5UQUxfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9SRVNQT05ERVJfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9TQ09QRV9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0JMT0NLX1RZUEUpO1xufVxuXG5mdW5jdGlvbiB0eXBlT2Yob2JqZWN0KSB7XG4gIGlmICh0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwpIHtcbiAgICB2YXIgJCR0eXBlb2YgPSBvYmplY3QuJCR0eXBlb2Y7XG5cbiAgICBzd2l0Y2ggKCQkdHlwZW9mKSB7XG4gICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgdmFyIHR5cGUgPSBvYmplY3QudHlwZTtcblxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICBjYXNlIFJFQUNUX0FTWU5DX01PREVfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfRlJBR01FTlRfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1BST0ZJTEVSX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgICAgICAgIHJldHVybiB0eXBlO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHZhciAkJHR5cGVvZlR5cGUgPSB0eXBlICYmIHR5cGUuJCR0eXBlb2Y7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoJCR0eXBlb2ZUeXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9QUk9WSURFUl9UWVBFOlxuICAgICAgICAgICAgICAgIHJldHVybiAkJHR5cGVvZlR5cGU7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJCR0eXBlb2Y7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICByZXR1cm4gJCR0eXBlb2Y7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn0gLy8gQXN5bmNNb2RlIGlzIGRlcHJlY2F0ZWQgYWxvbmcgd2l0aCBpc0FzeW5jTW9kZVxuXG52YXIgQXN5bmNNb2RlID0gUkVBQ1RfQVNZTkNfTU9ERV9UWVBFO1xudmFyIENvbmN1cnJlbnRNb2RlID0gUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEU7XG52YXIgQ29udGV4dENvbnN1bWVyID0gUkVBQ1RfQ09OVEVYVF9UWVBFO1xudmFyIENvbnRleHRQcm92aWRlciA9IFJFQUNUX1BST1ZJREVSX1RZUEU7XG52YXIgRWxlbWVudCA9IFJFQUNUX0VMRU1FTlRfVFlQRTtcbnZhciBGb3J3YXJkUmVmID0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTtcbnZhciBGcmFnbWVudCA9IFJFQUNUX0ZSQUdNRU5UX1RZUEU7XG52YXIgTGF6eSA9IFJFQUNUX0xBWllfVFlQRTtcbnZhciBNZW1vID0gUkVBQ1RfTUVNT19UWVBFO1xudmFyIFBvcnRhbCA9IFJFQUNUX1BPUlRBTF9UWVBFO1xudmFyIFByb2ZpbGVyID0gUkVBQ1RfUFJPRklMRVJfVFlQRTtcbnZhciBTdHJpY3RNb2RlID0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRTtcbnZhciBTdXNwZW5zZSA9IFJFQUNUX1NVU1BFTlNFX1RZUEU7XG52YXIgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGUgPSBmYWxzZTsgLy8gQXN5bmNNb2RlIHNob3VsZCBiZSBkZXByZWNhdGVkXG5cbmZ1bmN0aW9uIGlzQXN5bmNNb2RlKG9iamVjdCkge1xuICB7XG4gICAgaWYgKCFoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSkge1xuICAgICAgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGUgPSB0cnVlOyAvLyBVc2luZyBjb25zb2xlWyd3YXJuJ10gdG8gZXZhZGUgQmFiZWwgYW5kIEVTTGludFxuXG4gICAgICBjb25zb2xlWyd3YXJuJ10oJ1RoZSBSZWFjdElzLmlzQXN5bmNNb2RlKCkgYWxpYXMgaGFzIGJlZW4gZGVwcmVjYXRlZCwgJyArICdhbmQgd2lsbCBiZSByZW1vdmVkIGluIFJlYWN0IDE3Ky4gVXBkYXRlIHlvdXIgY29kZSB0byB1c2UgJyArICdSZWFjdElzLmlzQ29uY3VycmVudE1vZGUoKSBpbnN0ZWFkLiBJdCBoYXMgdGhlIGV4YWN0IHNhbWUgQVBJLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpc0NvbmN1cnJlbnRNb2RlKG9iamVjdCkgfHwgdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0FTWU5DX01PREVfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzQ29uY3VycmVudE1vZGUob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEU7XG59XG5mdW5jdGlvbiBpc0NvbnRleHRDb25zdW1lcihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9DT05URVhUX1RZUEU7XG59XG5mdW5jdGlvbiBpc0NvbnRleHRQcm92aWRlcihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QUk9WSURFUl9UWVBFO1xufVxuZnVuY3Rpb24gaXNFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xufVxuZnVuY3Rpb24gaXNGb3J3YXJkUmVmKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU7XG59XG5mdW5jdGlvbiBpc0ZyYWdtZW50KG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEU7XG59XG5mdW5jdGlvbiBpc0xhenkob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfTEFaWV9UWVBFO1xufVxuZnVuY3Rpb24gaXNNZW1vKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX01FTU9fVFlQRTtcbn1cbmZ1bmN0aW9uIGlzUG9ydGFsKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1BPUlRBTF9UWVBFO1xufVxuZnVuY3Rpb24gaXNQcm9maWxlcihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QUk9GSUxFUl9UWVBFO1xufVxuZnVuY3Rpb24gaXNTdHJpY3RNb2RlKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1NUUklDVF9NT0RFX1RZUEU7XG59XG5mdW5jdGlvbiBpc1N1c3BlbnNlKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1NVU1BFTlNFX1RZUEU7XG59XG5cbmV4cG9ydHMuQXN5bmNNb2RlID0gQXN5bmNNb2RlO1xuZXhwb3J0cy5Db25jdXJyZW50TW9kZSA9IENvbmN1cnJlbnRNb2RlO1xuZXhwb3J0cy5Db250ZXh0Q29uc3VtZXIgPSBDb250ZXh0Q29uc3VtZXI7XG5leHBvcnRzLkNvbnRleHRQcm92aWRlciA9IENvbnRleHRQcm92aWRlcjtcbmV4cG9ydHMuRWxlbWVudCA9IEVsZW1lbnQ7XG5leHBvcnRzLkZvcndhcmRSZWYgPSBGb3J3YXJkUmVmO1xuZXhwb3J0cy5GcmFnbWVudCA9IEZyYWdtZW50O1xuZXhwb3J0cy5MYXp5ID0gTGF6eTtcbmV4cG9ydHMuTWVtbyA9IE1lbW87XG5leHBvcnRzLlBvcnRhbCA9IFBvcnRhbDtcbmV4cG9ydHMuUHJvZmlsZXIgPSBQcm9maWxlcjtcbmV4cG9ydHMuU3RyaWN0TW9kZSA9IFN0cmljdE1vZGU7XG5leHBvcnRzLlN1c3BlbnNlID0gU3VzcGVuc2U7XG5leHBvcnRzLmlzQXN5bmNNb2RlID0gaXNBc3luY01vZGU7XG5leHBvcnRzLmlzQ29uY3VycmVudE1vZGUgPSBpc0NvbmN1cnJlbnRNb2RlO1xuZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lciA9IGlzQ29udGV4dENvbnN1bWVyO1xuZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlciA9IGlzQ29udGV4dFByb3ZpZGVyO1xuZXhwb3J0cy5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG5leHBvcnRzLmlzRm9yd2FyZFJlZiA9IGlzRm9yd2FyZFJlZjtcbmV4cG9ydHMuaXNGcmFnbWVudCA9IGlzRnJhZ21lbnQ7XG5leHBvcnRzLmlzTGF6eSA9IGlzTGF6eTtcbmV4cG9ydHMuaXNNZW1vID0gaXNNZW1vO1xuZXhwb3J0cy5pc1BvcnRhbCA9IGlzUG9ydGFsO1xuZXhwb3J0cy5pc1Byb2ZpbGVyID0gaXNQcm9maWxlcjtcbmV4cG9ydHMuaXNTdHJpY3RNb2RlID0gaXNTdHJpY3RNb2RlO1xuZXhwb3J0cy5pc1N1c3BlbnNlID0gaXNTdXNwZW5zZTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlID0gaXNWYWxpZEVsZW1lbnRUeXBlO1xuZXhwb3J0cy50eXBlT2YgPSB0eXBlT2Y7XG4gIH0pKCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3RGYXN0Q29tcGFyZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWZhc3QtY29tcGFyZVwiKSk7XG5cbnZhciBfcHJvcHMgPSByZXF1aXJlKFwiLi9wcm9wc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBTRUVLX09OX1BMQVlfRVhQSVJZID0gNTAwMDtcblxudmFyIFBsYXllciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUGxheWVyLCBfQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFBsYXllcik7XG5cbiAgZnVuY3Rpb24gUGxheWVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQbGF5ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF9hcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgX2FyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoX2FyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJtb3VudGVkXCIsIGZhbHNlKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpc1JlYWR5XCIsIGZhbHNlKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpc1BsYXlpbmdcIiwgZmFsc2UpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImlzTG9hZGluZ1wiLCB0cnVlKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJsb2FkT25SZWFkeVwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGFydE9uUGxheVwiLCB0cnVlKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZWVrT25QbGF5XCIsIG51bGwpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uRHVyYXRpb25DYWxsZWRcIiwgZmFsc2UpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVBsYXllck1vdW50XCIsIGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgIF90aGlzLnBsYXllciA9IHBsYXllcjtcblxuICAgICAgX3RoaXMucGxheWVyLmxvYWQoX3RoaXMucHJvcHMudXJsKTtcblxuICAgICAgX3RoaXMucHJvZ3Jlc3MoKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRJbnRlcm5hbFBsYXllclwiLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoIV90aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gX3RoaXMucGxheWVyW2tleV07XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicHJvZ3Jlc3NcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnVybCAmJiBfdGhpcy5wbGF5ZXIgJiYgX3RoaXMuaXNSZWFkeSkge1xuICAgICAgICB2YXIgcGxheWVkU2Vjb25kcyA9IF90aGlzLmdldEN1cnJlbnRUaW1lKCkgfHwgMDtcblxuICAgICAgICB2YXIgbG9hZGVkU2Vjb25kcyA9IF90aGlzLmdldFNlY29uZHNMb2FkZWQoKTtcblxuICAgICAgICB2YXIgZHVyYXRpb24gPSBfdGhpcy5nZXREdXJhdGlvbigpO1xuXG4gICAgICAgIGlmIChkdXJhdGlvbikge1xuICAgICAgICAgIHZhciBwcm9ncmVzcyA9IHtcbiAgICAgICAgICAgIHBsYXllZFNlY29uZHM6IHBsYXllZFNlY29uZHMsXG4gICAgICAgICAgICBwbGF5ZWQ6IHBsYXllZFNlY29uZHMgLyBkdXJhdGlvblxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAobG9hZGVkU2Vjb25kcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcHJvZ3Jlc3MubG9hZGVkU2Vjb25kcyA9IGxvYWRlZFNlY29uZHM7XG4gICAgICAgICAgICBwcm9ncmVzcy5sb2FkZWQgPSBsb2FkZWRTZWNvbmRzIC8gZHVyYXRpb247XG4gICAgICAgICAgfSAvLyBPbmx5IGNhbGwgb25Qcm9ncmVzcyBpZiB2YWx1ZXMgaGF2ZSBjaGFuZ2VkXG5cblxuICAgICAgICAgIGlmIChwcm9ncmVzcy5wbGF5ZWRTZWNvbmRzICE9PSBfdGhpcy5wcmV2UGxheWVkIHx8IHByb2dyZXNzLmxvYWRlZFNlY29uZHMgIT09IF90aGlzLnByZXZMb2FkZWQpIHtcbiAgICAgICAgICAgIF90aGlzLnByb3BzLm9uUHJvZ3Jlc3MocHJvZ3Jlc3MpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzLnByZXZQbGF5ZWQgPSBwcm9ncmVzcy5wbGF5ZWRTZWNvbmRzO1xuICAgICAgICAgIF90aGlzLnByZXZMb2FkZWQgPSBwcm9ncmVzcy5sb2FkZWRTZWNvbmRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnByb2dyZXNzVGltZW91dCA9IHNldFRpbWVvdXQoX3RoaXMucHJvZ3Jlc3MsIF90aGlzLnByb3BzLnByb2dyZXNzRnJlcXVlbmN5IHx8IF90aGlzLnByb3BzLnByb2dyZXNzSW50ZXJ2YWwpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVJlYWR5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMubW91bnRlZCkgcmV0dXJuO1xuICAgICAgX3RoaXMuaXNSZWFkeSA9IHRydWU7XG4gICAgICBfdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIG9uUmVhZHkgPSBfdGhpcyRwcm9wcy5vblJlYWR5LFxuICAgICAgICAgIHBsYXlpbmcgPSBfdGhpcyRwcm9wcy5wbGF5aW5nLFxuICAgICAgICAgIHZvbHVtZSA9IF90aGlzJHByb3BzLnZvbHVtZSxcbiAgICAgICAgICBtdXRlZCA9IF90aGlzJHByb3BzLm11dGVkO1xuICAgICAgb25SZWFkeSgpO1xuXG4gICAgICBpZiAoIW11dGVkICYmIHZvbHVtZSAhPT0gbnVsbCkge1xuICAgICAgICBfdGhpcy5wbGF5ZXIuc2V0Vm9sdW1lKHZvbHVtZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5sb2FkT25SZWFkeSkge1xuICAgICAgICBfdGhpcy5wbGF5ZXIubG9hZChfdGhpcy5sb2FkT25SZWFkeSwgdHJ1ZSk7XG5cbiAgICAgICAgX3RoaXMubG9hZE9uUmVhZHkgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmIChwbGF5aW5nKSB7XG4gICAgICAgIF90aGlzLnBsYXllci5wbGF5KCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmhhbmRsZUR1cmF0aW9uQ2hlY2soKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVQbGF5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmlzUGxheWluZyA9IHRydWU7XG4gICAgICBfdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvblN0YXJ0ID0gX3RoaXMkcHJvcHMyLm9uU3RhcnQsXG4gICAgICAgICAgb25QbGF5ID0gX3RoaXMkcHJvcHMyLm9uUGxheSxcbiAgICAgICAgICBwbGF5YmFja1JhdGUgPSBfdGhpcyRwcm9wczIucGxheWJhY2tSYXRlO1xuXG4gICAgICBpZiAoX3RoaXMuc3RhcnRPblBsYXkpIHtcbiAgICAgICAgaWYgKF90aGlzLnBsYXllci5zZXRQbGF5YmFja1JhdGUgJiYgcGxheWJhY2tSYXRlICE9PSAxKSB7XG4gICAgICAgICAgX3RoaXMucGxheWVyLnNldFBsYXliYWNrUmF0ZShwbGF5YmFja1JhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgb25TdGFydCgpO1xuICAgICAgICBfdGhpcy5zdGFydE9uUGxheSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBvblBsYXkoKTtcblxuICAgICAgaWYgKF90aGlzLnNlZWtPblBsYXkpIHtcbiAgICAgICAgX3RoaXMuc2Vla1RvKF90aGlzLnNlZWtPblBsYXkpO1xuXG4gICAgICAgIF90aGlzLnNlZWtPblBsYXkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5oYW5kbGVEdXJhdGlvbkNoZWNrKCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlUGF1c2VcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuXG4gICAgICBpZiAoIV90aGlzLmlzTG9hZGluZykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vblBhdXNlKGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUVuZGVkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBhY3RpdmVQbGF5ZXIgPSBfdGhpcyRwcm9wczMuYWN0aXZlUGxheWVyLFxuICAgICAgICAgIGxvb3AgPSBfdGhpcyRwcm9wczMubG9vcCxcbiAgICAgICAgICBvbkVuZGVkID0gX3RoaXMkcHJvcHMzLm9uRW5kZWQ7XG5cbiAgICAgIGlmIChhY3RpdmVQbGF5ZXIubG9vcE9uRW5kZWQgJiYgbG9vcCkge1xuICAgICAgICBfdGhpcy5zZWVrVG8oMCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghbG9vcCkge1xuICAgICAgICBfdGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcbiAgICAgICAgb25FbmRlZCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUVycm9yXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczQ7XG5cbiAgICAgIF90aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuXG4gICAgICAoX3RoaXMkcHJvcHM0ID0gX3RoaXMucHJvcHMpLm9uRXJyb3IuYXBwbHkoX3RoaXMkcHJvcHM0LCBhcmd1bWVudHMpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUR1cmF0aW9uQ2hlY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmR1cmF0aW9uQ2hlY2tUaW1lb3V0KTtcblxuICAgICAgdmFyIGR1cmF0aW9uID0gX3RoaXMuZ2V0RHVyYXRpb24oKTtcblxuICAgICAgaWYgKGR1cmF0aW9uKSB7XG4gICAgICAgIGlmICghX3RoaXMub25EdXJhdGlvbkNhbGxlZCkge1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uRHVyYXRpb24oZHVyYXRpb24pO1xuXG4gICAgICAgICAgX3RoaXMub25EdXJhdGlvbkNhbGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLmR1cmF0aW9uQ2hlY2tUaW1lb3V0ID0gc2V0VGltZW91dChfdGhpcy5oYW5kbGVEdXJhdGlvbkNoZWNrLCAxMDApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUxvYWRlZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBTb21ldGltZXMgd2Uga25vdyBsb2FkaW5nIGhhcyBzdG9wcGVkIGJ1dCBvblJlYWR5L29uUGxheSBhcmUgbmV2ZXIgY2FsbGVkXG4gICAgICAvLyBzbyB0aGlzIHByb3ZpZGVzIGEgd2F5IGZvciBwbGF5ZXJzIHRvIGF2b2lkIGdldHRpbmcgc3R1Y2tcbiAgICAgIF90aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBsYXllciwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnByb2dyZXNzVGltZW91dCk7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5kdXJhdGlvbkNoZWNrVGltZW91dCk7XG5cbiAgICAgIGlmICh0aGlzLmlzUmVhZHkgJiYgdGhpcy5wcm9wcy5zdG9wT25Vbm1vdW50KSB7XG4gICAgICAgIHRoaXMucGxheWVyLnN0b3AoKTtcblxuICAgICAgICBpZiAodGhpcy5wbGF5ZXIuZGlzYWJsZVBJUCkge1xuICAgICAgICAgIHRoaXMucGxheWVyLmRpc2FibGVQSVAoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAvLyBJZiB0aGVyZSBpc27igJl0IGEgcGxheWVyIGF2YWlsYWJsZSwgZG9u4oCZdCBkbyBhbnl0aGluZ1xuICAgICAgaWYgKCF0aGlzLnBsYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIEludm9rZSBwbGF5ZXIgbWV0aG9kcyBiYXNlZCBvbiBjaGFuZ2VkIHByb3BzXG5cblxuICAgICAgdmFyIF90aGlzJHByb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgdXJsID0gX3RoaXMkcHJvcHM1LnVybCxcbiAgICAgICAgICBwbGF5aW5nID0gX3RoaXMkcHJvcHM1LnBsYXlpbmcsXG4gICAgICAgICAgdm9sdW1lID0gX3RoaXMkcHJvcHM1LnZvbHVtZSxcbiAgICAgICAgICBtdXRlZCA9IF90aGlzJHByb3BzNS5tdXRlZCxcbiAgICAgICAgICBwbGF5YmFja1JhdGUgPSBfdGhpcyRwcm9wczUucGxheWJhY2tSYXRlLFxuICAgICAgICAgIHBpcCA9IF90aGlzJHByb3BzNS5waXAsXG4gICAgICAgICAgbG9vcCA9IF90aGlzJHByb3BzNS5sb29wLFxuICAgICAgICAgIGFjdGl2ZVBsYXllciA9IF90aGlzJHByb3BzNS5hY3RpdmVQbGF5ZXI7XG5cbiAgICAgIGlmICghKDAsIF9yZWFjdEZhc3RDb21wYXJlW1wiZGVmYXVsdFwiXSkocHJldlByb3BzLnVybCwgdXJsKSkge1xuICAgICAgICBpZiAodGhpcy5pc0xvYWRpbmcgJiYgIWFjdGl2ZVBsYXllci5mb3JjZUxvYWQpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJSZWFjdFBsYXllcjogdGhlIGF0dGVtcHQgdG8gbG9hZCBcIi5jb25jYXQodXJsLCBcIiBpcyBiZWluZyBkZWZlcnJlZCB1bnRpbCB0aGUgcGxheWVyIGhhcyBsb2FkZWRcIikpO1xuICAgICAgICAgIHRoaXMubG9hZE9uUmVhZHkgPSB1cmw7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0YXJ0T25QbGF5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vbkR1cmF0aW9uQ2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGxheWVyLmxvYWQodXJsLCB0aGlzLmlzUmVhZHkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXByZXZQcm9wcy5wbGF5aW5nICYmIHBsYXlpbmcgJiYgIXRoaXMuaXNQbGF5aW5nKSB7XG4gICAgICAgIHRoaXMucGxheWVyLnBsYXkoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZQcm9wcy5wbGF5aW5nICYmICFwbGF5aW5nICYmIHRoaXMuaXNQbGF5aW5nKSB7XG4gICAgICAgIHRoaXMucGxheWVyLnBhdXNlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghcHJldlByb3BzLnBpcCAmJiBwaXAgJiYgdGhpcy5wbGF5ZXIuZW5hYmxlUElQKSB7XG4gICAgICAgIHRoaXMucGxheWVyLmVuYWJsZVBJUCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJldlByb3BzLnBpcCAmJiAhcGlwICYmIHRoaXMucGxheWVyLmRpc2FibGVQSVApIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuZGlzYWJsZVBJUCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJldlByb3BzLnZvbHVtZSAhPT0gdm9sdW1lICYmIHZvbHVtZSAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnBsYXllci5zZXRWb2x1bWUodm9sdW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZQcm9wcy5tdXRlZCAhPT0gbXV0ZWQpIHtcbiAgICAgICAgaWYgKG11dGVkKSB7XG4gICAgICAgICAgdGhpcy5wbGF5ZXIubXV0ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucGxheWVyLnVubXV0ZSgpO1xuXG4gICAgICAgICAgaWYgKHZvbHVtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gU2V0IHZvbHVtZSBuZXh0IHRpY2sgdG8gZml4IGEgYnVnIHdpdGggRGFpbHlNb3Rpb25cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLnBsYXllci5zZXRWb2x1bWUodm9sdW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocHJldlByb3BzLnBsYXliYWNrUmF0ZSAhPT0gcGxheWJhY2tSYXRlICYmIHRoaXMucGxheWVyLnNldFBsYXliYWNrUmF0ZSkge1xuICAgICAgICB0aGlzLnBsYXllci5zZXRQbGF5YmFja1JhdGUocGxheWJhY2tSYXRlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZQcm9wcy5sb29wICE9PSBsb29wICYmIHRoaXMucGxheWVyLnNldExvb3ApIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuc2V0TG9vcChsb29wKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RHVyYXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RHVyYXRpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuaXNSZWFkeSkgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuZ2V0RHVyYXRpb24oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q3VycmVudFRpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICBpZiAoIXRoaXMuaXNSZWFkeSkgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U2Vjb25kc0xvYWRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWNvbmRzTG9hZGVkKCkge1xuICAgICAgaWYgKCF0aGlzLmlzUmVhZHkpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIHRoaXMucGxheWVyLmdldFNlY29uZHNMb2FkZWQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2Vla1RvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlZWtUbyhhbW91bnQsIHR5cGUpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAvLyBXaGVuIHNlZWtpbmcgYmVmb3JlIHBsYXllciBpcyByZWFkeSwgc3RvcmUgdmFsdWUgYW5kIHNlZWsgbGF0ZXJcbiAgICAgIGlmICghdGhpcy5pc1JlYWR5ICYmIGFtb3VudCAhPT0gMCkge1xuICAgICAgICB0aGlzLnNlZWtPblBsYXkgPSBhbW91bnQ7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMy5zZWVrT25QbGF5ID0gbnVsbDtcbiAgICAgICAgfSwgU0VFS19PTl9QTEFZX0VYUElSWSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzRnJhY3Rpb24gPSAhdHlwZSA/IGFtb3VudCA+IDAgJiYgYW1vdW50IDwgMSA6IHR5cGUgPT09ICdmcmFjdGlvbic7XG5cbiAgICAgIGlmIChpc0ZyYWN0aW9uKSB7XG4gICAgICAgIC8vIENvbnZlcnQgZnJhY3Rpb24gdG8gc2Vjb25kcyBiYXNlZCBvbiBkdXJhdGlvblxuICAgICAgICB2YXIgZHVyYXRpb24gPSB0aGlzLnBsYXllci5nZXREdXJhdGlvbigpO1xuXG4gICAgICAgIGlmICghZHVyYXRpb24pIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1JlYWN0UGxheWVyOiBjb3VsZCBub3Qgc2VlayB1c2luZyBmcmFjdGlvbiDigJPCoGR1cmF0aW9uIG5vdCB5ZXQgYXZhaWxhYmxlJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wbGF5ZXIuc2Vla1RvKGR1cmF0aW9uICogYW1vdW50KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBsYXllci5zZWVrVG8oYW1vdW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBQbGF5ZXIgPSB0aGlzLnByb3BzLmFjdGl2ZVBsYXllcjtcblxuICAgICAgaWYgKCFQbGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFBsYXllciwgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHtcbiAgICAgICAgb25Nb3VudDogdGhpcy5oYW5kbGVQbGF5ZXJNb3VudCxcbiAgICAgICAgb25SZWFkeTogdGhpcy5oYW5kbGVSZWFkeSxcbiAgICAgICAgb25QbGF5OiB0aGlzLmhhbmRsZVBsYXksXG4gICAgICAgIG9uUGF1c2U6IHRoaXMuaGFuZGxlUGF1c2UsXG4gICAgICAgIG9uRW5kZWQ6IHRoaXMuaGFuZGxlRW5kZWQsXG4gICAgICAgIG9uTG9hZGVkOiB0aGlzLmhhbmRsZUxvYWRlZCxcbiAgICAgICAgb25FcnJvcjogdGhpcy5oYW5kbGVFcnJvclxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQbGF5ZXI7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFBsYXllcjtcblxuX2RlZmluZVByb3BlcnR5KFBsYXllciwgXCJkaXNwbGF5TmFtZVwiLCAnUGxheWVyJyk7XG5cbl9kZWZpbmVQcm9wZXJ0eShQbGF5ZXIsIFwicHJvcFR5cGVzXCIsIF9wcm9wcy5wcm9wVHlwZXMpO1xuXG5fZGVmaW5lUHJvcGVydHkoUGxheWVyLCBcImRlZmF1bHRQcm9wc1wiLCBfcHJvcHMuZGVmYXVsdFByb3BzKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIElDT05fU0laRSA9ICc2NHB4JztcbnZhciBjYWNoZSA9IHt9O1xuXG52YXIgUHJldmlldyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUHJldmlldywgX0NvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihQcmV2aWV3KTtcblxuICBmdW5jdGlvbiBQcmV2aWV3KCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcmV2aWV3KTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwibW91bnRlZFwiLCBmYWxzZSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic3RhdGVcIiwge1xuICAgICAgaW1hZ2U6IG51bGxcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVLZXlQcmVzc1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInIHx8IGUua2V5ID09PSAnICcpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DbGljaygpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFByZXZpZXcsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuZmV0Y2hJbWFnZSh0aGlzLnByb3BzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgdXJsID0gX3RoaXMkcHJvcHMudXJsLFxuICAgICAgICAgIGxpZ2h0ID0gX3RoaXMkcHJvcHMubGlnaHQ7XG5cbiAgICAgIGlmIChwcmV2UHJvcHMudXJsICE9PSB1cmwgfHwgcHJldlByb3BzLmxpZ2h0ICE9PSBsaWdodCkge1xuICAgICAgICB0aGlzLmZldGNoSW1hZ2UodGhpcy5wcm9wcyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZldGNoSW1hZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmV0Y2hJbWFnZShfcmVmKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIHVybCA9IF9yZWYudXJsLFxuICAgICAgICAgIGxpZ2h0ID0gX3JlZi5saWdodDtcblxuICAgICAgaWYgKHR5cGVvZiBsaWdodCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaW1hZ2U6IGxpZ2h0XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWNoZVt1cmxdKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGltYWdlOiBjYWNoZVt1cmxdXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpbWFnZTogbnVsbFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gd2luZG93LmZldGNoKFwiaHR0cHM6Ly9ub2VtYmVkLmNvbS9lbWJlZD91cmw9XCIuY29uY2F0KHVybCkpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhLnRodW1ibmFpbF91cmwgJiYgX3RoaXMyLm1vdW50ZWQpIHtcbiAgICAgICAgICB2YXIgaW1hZ2UgPSBkYXRhLnRodW1ibmFpbF91cmwucmVwbGFjZSgnaGVpZ2h0PTEwMCcsICdoZWlnaHQ9NDgwJyk7XG5cbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaW1hZ2U6IGltYWdlXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBjYWNoZVt1cmxdID0gaW1hZ2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzMi5vbkNsaWNrLFxuICAgICAgICAgIHBsYXlJY29uID0gX3RoaXMkcHJvcHMyLnBsYXlJY29uLFxuICAgICAgICAgIHByZXZpZXdUYWJJbmRleCA9IF90aGlzJHByb3BzMi5wcmV2aWV3VGFiSW5kZXg7XG4gICAgICB2YXIgaW1hZ2UgPSB0aGlzLnN0YXRlLmltYWdlO1xuICAgICAgdmFyIGZsZXhDZW50ZXIgPSB7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJ1xuICAgICAgfTtcbiAgICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICAgIHByZXZpZXc6IF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBpbWFnZSA/IFwidXJsKFwiLmNvbmNhdChpbWFnZSwgXCIpXCIpIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnY292ZXInLFxuICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJ2NlbnRlcicsXG4gICAgICAgICAgY3Vyc29yOiAncG9pbnRlcidcbiAgICAgICAgfSwgZmxleENlbnRlciksXG4gICAgICAgIHNoYWRvdzogX29iamVjdFNwcmVhZCh7XG4gICAgICAgICAgYmFja2dyb3VuZDogJ3JhZGlhbC1ncmFkaWVudChyZ2IoMCwgMCwgMCwgMC4zKSwgcmdiYSgwLCAwLCAwLCAwKSA2MCUpJyxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IElDT05fU0laRSxcbiAgICAgICAgICB3aWR0aDogSUNPTl9TSVpFLFxuICAgICAgICAgIGhlaWdodDogSUNPTl9TSVpFXG4gICAgICAgIH0sIGZsZXhDZW50ZXIpLFxuICAgICAgICBwbGF5SWNvbjoge1xuICAgICAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgICAgIGJvcmRlcldpZHRoOiAnMTZweCAwIDE2cHggMjZweCcsXG4gICAgICAgICAgYm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB3aGl0ZScsXG4gICAgICAgICAgbWFyZ2luTGVmdDogJzdweCdcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdmFyIGRlZmF1bHRQbGF5SWNvbiA9IC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBzdHlsZTogc3R5bGVzLnNoYWRvdyxcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LXBsYXllcl9fc2hhZG93XCJcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBzdHlsZTogc3R5bGVzLnBsYXlJY29uLFxuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtcGxheWVyX19wbGF5LWljb25cIlxuICAgICAgfSkpO1xuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIHN0eWxlOiBzdHlsZXMucHJldmlldyxcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LXBsYXllcl9fcHJldmlld1wiLFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgICAgICB0YWJJbmRleDogcHJldmlld1RhYkluZGV4LFxuICAgICAgICBvbktleVByZXNzOiB0aGlzLmhhbmRsZUtleVByZXNzXG4gICAgICB9LCBwbGF5SWNvbiB8fCBkZWZhdWx0UGxheUljb24pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQcmV2aWV3O1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBQcmV2aWV3OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jcmVhdGVSZWFjdFBsYXllciA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfZGVlcG1lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGVlcG1lcmdlXCIpKTtcblxudmFyIF9tZW1vaXplT25lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibWVtb2l6ZS1vbmVcIikpO1xuXG52YXIgX3JlYWN0RmFzdENvbXBhcmUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1mYXN0LWNvbXBhcmVcIikpO1xuXG52YXIgX3Byb3BzID0gcmVxdWlyZShcIi4vcHJvcHNcIik7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxudmFyIF9QbGF5ZXIzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9QbGF5ZXJcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG52YXIgUHJldmlldyA9IC8qI19fUFVSRV9fKi8oMCwgX3JlYWN0LmxhenkpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCcuL1ByZXZpZXcnKSk7XG4gIH0pO1xufSk7XG52YXIgSVNfQlJPV1NFUiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudDtcbnZhciBJU19HTE9CQUwgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwud2luZG93ICYmIGdsb2JhbC53aW5kb3cuZG9jdW1lbnQ7XG52YXIgU1VQUE9SVEVEX1BST1BTID0gT2JqZWN0LmtleXMoX3Byb3BzLnByb3BUeXBlcyk7IC8vIFJldHVybiBudWxsIHdoZW4gcmVuZGVyaW5nIG9uIHRoZSBzZXJ2ZXJcbi8vIGFzIFN1c3BlbnNlIGlzIG5vdCBzdXBwb3J0ZWQgeWV0XG5cbnZhciBVbml2ZXJzYWxTdXNwZW5zZSA9IElTX0JST1dTRVIgfHwgSVNfR0xPQkFMID8gX3JlYWN0LlN1c3BlbnNlIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbnVsbDtcbn07XG52YXIgY3VzdG9tUGxheWVycyA9IFtdO1xuXG52YXIgY3JlYXRlUmVhY3RQbGF5ZXIgPSBmdW5jdGlvbiBjcmVhdGVSZWFjdFBsYXllcihwbGF5ZXJzLCBmYWxsYmFjaykge1xuICB2YXIgX2NsYXNzLCBfdGVtcDtcblxuICByZXR1cm4gX3RlbXAgPSBfY2xhc3MgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoUmVhY3RQbGF5ZXIsIF9Db21wb25lbnQpO1xuXG4gICAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihSZWFjdFBsYXllcik7XG5cbiAgICBmdW5jdGlvbiBSZWFjdFBsYXllcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlYWN0UGxheWVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0YXRlXCIsIHtcbiAgICAgICAgc2hvd1ByZXZpZXc6ICEhX3RoaXMucHJvcHMubGlnaHRcbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicmVmZXJlbmNlc1wiLCB7XG4gICAgICAgIHdyYXBwZXI6IGZ1bmN0aW9uIHdyYXBwZXIoX3dyYXBwZXIpIHtcbiAgICAgICAgICBfdGhpcy53cmFwcGVyID0gX3dyYXBwZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHBsYXllcjogZnVuY3Rpb24gcGxheWVyKF9wbGF5ZXIpIHtcbiAgICAgICAgICBfdGhpcy5wbGF5ZXIgPSBfcGxheWVyO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrUHJldmlld1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgc2hvd1ByZXZpZXc6IGZhbHNlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2xpY2tQcmV2aWV3KGUpO1xuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzaG93UHJldmlld1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBzaG93UHJldmlldzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0RHVyYXRpb25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcy5wbGF5ZXIuZ2V0RHVyYXRpb24oKTtcbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0Q3VycmVudFRpbWVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcy5wbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKTtcbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0U2Vjb25kc0xvYWRlZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghX3RoaXMucGxheWVyKSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzLnBsYXllci5nZXRTZWNvbmRzTG9hZGVkKCk7XG4gICAgICB9KTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldEludGVybmFsUGxheWVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ3BsYXllcic7XG4gICAgICAgIGlmICghX3RoaXMucGxheWVyKSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzLnBsYXllci5nZXRJbnRlcm5hbFBsYXllcihrZXkpO1xuICAgICAgfSk7XG5cbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZWVrVG9cIiwgZnVuY3Rpb24gKGZyYWN0aW9uLCB0eXBlKSB7XG4gICAgICAgIGlmICghX3RoaXMucGxheWVyKSByZXR1cm4gbnVsbDtcblxuICAgICAgICBfdGhpcy5wbGF5ZXIuc2Vla1RvKGZyYWN0aW9uLCB0eXBlKTtcbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlUmVhZHlcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vblJlYWR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICAgIH0pO1xuXG4gICAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0QWN0aXZlUGxheWVyXCIsICgwLCBfbWVtb2l6ZU9uZVtcImRlZmF1bHRcIl0pKGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYXJyID0gW10uY29uY2F0KGN1c3RvbVBsYXllcnMsIF90b0NvbnN1bWFibGVBcnJheShwbGF5ZXJzKSk7IF9pIDwgX2Fyci5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICB2YXIgcGxheWVyID0gX2FycltfaV07XG5cbiAgICAgICAgICBpZiAocGxheWVyLmNhblBsYXkodXJsKSkge1xuICAgICAgICAgICAgcmV0dXJuIHBsYXllcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmFsbGJhY2spIHtcbiAgICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldENvbmZpZ1wiLCAoMCwgX21lbW9pemVPbmVbXCJkZWZhdWx0XCJdKShmdW5jdGlvbiAodXJsLCBrZXkpIHtcbiAgICAgICAgdmFyIGNvbmZpZyA9IF90aGlzLnByb3BzLmNvbmZpZztcbiAgICAgICAgcmV0dXJuIF9kZWVwbWVyZ2VbXCJkZWZhdWx0XCJdLmFsbChbX3Byb3BzLmRlZmF1bHRQcm9wcy5jb25maWcsIF9wcm9wcy5kZWZhdWx0UHJvcHMuY29uZmlnW2tleV0gfHwge30sIGNvbmZpZywgY29uZmlnW2tleV0gfHwge31dKTtcbiAgICAgIH0pKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldEF0dHJpYnV0ZXNcIiwgKDAsIF9tZW1vaXplT25lW1wiZGVmYXVsdFwiXSkoZnVuY3Rpb24gKHVybCkge1xuICAgICAgICByZXR1cm4gKDAsIF91dGlscy5vbWl0KShfdGhpcy5wcm9wcywgU1VQUE9SVEVEX1BST1BTKTtcbiAgICAgIH0pKTtcblxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlbmRlckFjdGl2ZVBsYXllclwiLCBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIGlmICghdXJsKSByZXR1cm4gbnVsbDtcblxuICAgICAgICB2YXIgcGxheWVyID0gX3RoaXMuZ2V0QWN0aXZlUGxheWVyKHVybCk7XG5cbiAgICAgICAgaWYgKCFwbGF5ZXIpIHJldHVybiBudWxsO1xuXG4gICAgICAgIHZhciBjb25maWcgPSBfdGhpcy5nZXRDb25maWcodXJsLCBwbGF5ZXIua2V5KTtcblxuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfUGxheWVyM1tcImRlZmF1bHRcIl0sIF9leHRlbmRzKHt9LCBfdGhpcy5wcm9wcywge1xuICAgICAgICAgIGtleTogcGxheWVyLmtleSxcbiAgICAgICAgICByZWY6IF90aGlzLnJlZmVyZW5jZXMucGxheWVyLFxuICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICAgIGFjdGl2ZVBsYXllcjogcGxheWVyLmxhenlQbGF5ZXIgfHwgcGxheWVyLFxuICAgICAgICAgIG9uUmVhZHk6IF90aGlzLmhhbmRsZVJlYWR5XG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFJlYWN0UGxheWVyLCBbe1xuICAgICAga2V5OiBcInNob3VsZENvbXBvbmVudFVwZGF0ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgICAgICByZXR1cm4gISgwLCBfcmVhY3RGYXN0Q29tcGFyZVtcImRlZmF1bHRcIl0pKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgISgwLCBfcmVhY3RGYXN0Q29tcGFyZVtcImRlZmF1bHRcIl0pKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgICAgdmFyIGxpZ2h0ID0gdGhpcy5wcm9wcy5saWdodDtcblxuICAgICAgICBpZiAoIXByZXZQcm9wcy5saWdodCAmJiBsaWdodCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2hvd1ByZXZpZXc6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmV2UHJvcHMubGlnaHQgJiYgIWxpZ2h0KSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzaG93UHJldmlldzogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZW5kZXJQcmV2aWV3XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyUHJldmlldyh1cmwpIHtcbiAgICAgICAgaWYgKCF1cmwpIHJldHVybiBudWxsO1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgbGlnaHQgPSBfdGhpcyRwcm9wcy5saWdodCxcbiAgICAgICAgICAgIHBsYXlJY29uID0gX3RoaXMkcHJvcHMucGxheUljb24sXG4gICAgICAgICAgICBwcmV2aWV3VGFiSW5kZXggPSBfdGhpcyRwcm9wcy5wcmV2aWV3VGFiSW5kZXg7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFByZXZpZXcsIHtcbiAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICBsaWdodDogbGlnaHQsXG4gICAgICAgICAgcGxheUljb246IHBsYXlJY29uLFxuICAgICAgICAgIHByZXZpZXdUYWJJbmRleDogcHJldmlld1RhYkluZGV4LFxuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2tQcmV2aWV3XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZW5kZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgdXJsID0gX3RoaXMkcHJvcHMyLnVybCxcbiAgICAgICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMyLnN0eWxlLFxuICAgICAgICAgICAgd2lkdGggPSBfdGhpcyRwcm9wczIud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQgPSBfdGhpcyRwcm9wczIuaGVpZ2h0LFxuICAgICAgICAgICAgZmFsbGJhY2sgPSBfdGhpcyRwcm9wczIuZmFsbGJhY2ssXG4gICAgICAgICAgICBXcmFwcGVyID0gX3RoaXMkcHJvcHMyLndyYXBwZXI7XG4gICAgICAgIHZhciBzaG93UHJldmlldyA9IHRoaXMuc3RhdGUuc2hvd1ByZXZpZXc7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gdGhpcy5nZXRBdHRyaWJ1dGVzKHVybCk7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFdyYXBwZXIsIF9leHRlbmRzKHtcbiAgICAgICAgICByZWY6IHRoaXMucmVmZXJlbmNlcy53cmFwcGVyLFxuICAgICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0eWxlKSwge30sIHtcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgICAgfSlcbiAgICAgICAgfSwgYXR0cmlidXRlcyksIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoVW5pdmVyc2FsU3VzcGVuc2UsIHtcbiAgICAgICAgICBmYWxsYmFjazogZmFsbGJhY2tcbiAgICAgICAgfSwgc2hvd1ByZXZpZXcgPyB0aGlzLnJlbmRlclByZXZpZXcodXJsKSA6IHRoaXMucmVuZGVyQWN0aXZlUGxheWVyKHVybCkpKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUmVhY3RQbGF5ZXI7XG4gIH0oX3JlYWN0LkNvbXBvbmVudCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3MsIFwiZGlzcGxheU5hbWVcIiwgJ1JlYWN0UGxheWVyJyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3MsIFwicHJvcFR5cGVzXCIsIF9wcm9wcy5wcm9wVHlwZXMpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzLCBcImRlZmF1bHRQcm9wc1wiLCBfcHJvcHMuZGVmYXVsdFByb3BzKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzcywgXCJhZGRDdXN0b21QbGF5ZXJcIiwgZnVuY3Rpb24gKHBsYXllcikge1xuICAgIGN1c3RvbVBsYXllcnMucHVzaChwbGF5ZXIpO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9jbGFzcywgXCJyZW1vdmVDdXN0b21QbGF5ZXJzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBjdXN0b21QbGF5ZXJzLmxlbmd0aCA9IDA7XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzLCBcImNhblBsYXlcIiwgZnVuY3Rpb24gKHVybCkge1xuICAgIGZvciAodmFyIF9pMiA9IDAsIF9hcnIyID0gW10uY29uY2F0KGN1c3RvbVBsYXllcnMsIF90b0NvbnN1bWFibGVBcnJheShwbGF5ZXJzKSk7IF9pMiA8IF9hcnIyLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgIHZhciBfUGxheWVyID0gX2FycjJbX2kyXTtcblxuICAgICAgaWYgKF9QbGF5ZXIuY2FuUGxheSh1cmwpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3MsIFwiY2FuRW5hYmxlUElQXCIsIGZ1bmN0aW9uICh1cmwpIHtcbiAgICBmb3IgKHZhciBfaTMgPSAwLCBfYXJyMyA9IFtdLmNvbmNhdChjdXN0b21QbGF5ZXJzLCBfdG9Db25zdW1hYmxlQXJyYXkocGxheWVycykpOyBfaTMgPCBfYXJyMy5sZW5ndGg7IF9pMysrKSB7XG4gICAgICB2YXIgX1BsYXllcjIgPSBfYXJyM1tfaTNdO1xuXG4gICAgICBpZiAoX1BsYXllcjIuY2FuRW5hYmxlUElQICYmIF9QbGF5ZXIyLmNhbkVuYWJsZVBJUCh1cmwpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSksIF90ZW1wO1xufTtcblxuZXhwb3J0cy5jcmVhdGVSZWFjdFBsYXllciA9IGNyZWF0ZVJlYWN0UGxheWVyOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcGxheWVycyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcGxheWVyc1wiKSk7XG5cbnZhciBfUmVhY3RQbGF5ZXIgPSByZXF1aXJlKFwiLi9SZWFjdFBsYXllclwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbi8vIEZhbGwgYmFjayB0byBGaWxlUGxheWVyIGlmIG5vdGhpbmcgZWxzZSBjYW4gcGxheSB0aGUgVVJMXG52YXIgZmFsbGJhY2sgPSBfcGxheWVyc1tcImRlZmF1bHRcIl1bX3BsYXllcnNbXCJkZWZhdWx0XCJdLmxlbmd0aCAtIDFdO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX1JlYWN0UGxheWVyLmNyZWF0ZVJlYWN0UGxheWVyKShfcGxheWVyc1tcImRlZmF1bHRcIl0sIGZhbGxiYWNrKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2FuUGxheSA9IGV4cG9ydHMuRkxWX0VYVEVOU0lPTlMgPSBleHBvcnRzLkRBU0hfRVhURU5TSU9OUyA9IGV4cG9ydHMuSExTX0VYVEVOU0lPTlMgPSBleHBvcnRzLlZJREVPX0VYVEVOU0lPTlMgPSBleHBvcnRzLkFVRElPX0VYVEVOU0lPTlMgPSBleHBvcnRzLk1BVENIX1VSTF9LQUxUVVJBID0gZXhwb3J0cy5NQVRDSF9VUkxfVklEWUFSRCA9IGV4cG9ydHMuTUFUQ0hfVVJMX01JWENMT1VEID0gZXhwb3J0cy5NQVRDSF9VUkxfREFJTFlNT1RJT04gPSBleHBvcnRzLk1BVENIX1VSTF9UV0lUQ0hfQ0hBTk5FTCA9IGV4cG9ydHMuTUFUQ0hfVVJMX1RXSVRDSF9WSURFTyA9IGV4cG9ydHMuTUFUQ0hfVVJMX1dJU1RJQSA9IGV4cG9ydHMuTUFUQ0hfVVJMX1NUUkVBTUFCTEUgPSBleHBvcnRzLk1BVENIX1VSTF9GQUNFQk9PS19XQVRDSCA9IGV4cG9ydHMuTUFUQ0hfVVJMX0ZBQ0VCT09LID0gZXhwb3J0cy5NQVRDSF9VUkxfVklNRU8gPSBleHBvcnRzLk1BVENIX1VSTF9TT1VORENMT1VEID0gZXhwb3J0cy5NQVRDSF9VUkxfWU9VVFVCRSA9IHZvaWQgMDtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQ7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8IG9bU3ltYm9sLml0ZXJhdG9yXSA9PSBudWxsKSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IG9bU3ltYm9sLml0ZXJhdG9yXSgpOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0W1wicmV0dXJuXCJdICE9IG51bGwpIGl0W1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChkaWRFcnIpIHRocm93IGVycjsgfSB9IH07IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG52YXIgTUFUQ0hfVVJMX1lPVVRVQkUgPSAvKD86eW91dHVcXC5iZVxcL3x5b3V0dWJlKD86LW5vY29va2llKT9cXC5jb21cXC8oPzplbWJlZFxcL3x2XFwvfHdhdGNoXFwvfHdhdGNoXFw/dj18d2F0Y2hcXD8uKyZ2PSkpKChcXHd8LSl7MTF9KXx5b3V0dWJlXFwuY29tXFwvcGxheWxpc3RcXD9saXN0PXx5b3V0dWJlXFwuY29tXFwvdXNlclxcLy87XG5leHBvcnRzLk1BVENIX1VSTF9ZT1VUVUJFID0gTUFUQ0hfVVJMX1lPVVRVQkU7XG52YXIgTUFUQ0hfVVJMX1NPVU5EQ0xPVUQgPSAvKD86c291bmRjbG91ZFxcLmNvbXxzbmRcXC5zYylcXC9bXi5dKyQvO1xuZXhwb3J0cy5NQVRDSF9VUkxfU09VTkRDTE9VRCA9IE1BVENIX1VSTF9TT1VORENMT1VEO1xudmFyIE1BVENIX1VSTF9WSU1FTyA9IC92aW1lb1xcLmNvbVxcLy4rLztcbmV4cG9ydHMuTUFUQ0hfVVJMX1ZJTUVPID0gTUFUQ0hfVVJMX1ZJTUVPO1xudmFyIE1BVENIX1VSTF9GQUNFQk9PSyA9IC9eaHR0cHM/OlxcL1xcLyh3d3dcXC4pP2ZhY2Vib29rXFwuY29tLipcXC8odmlkZW8ocyk/fHdhdGNofHN0b3J5KShcXC5waHA/fFxcLykuKyQvO1xuZXhwb3J0cy5NQVRDSF9VUkxfRkFDRUJPT0sgPSBNQVRDSF9VUkxfRkFDRUJPT0s7XG52YXIgTUFUQ0hfVVJMX0ZBQ0VCT09LX1dBVENIID0gL15odHRwcz86XFwvXFwvZmJcXC53YXRjaFxcLy4rJC87XG5leHBvcnRzLk1BVENIX1VSTF9GQUNFQk9PS19XQVRDSCA9IE1BVENIX1VSTF9GQUNFQk9PS19XQVRDSDtcbnZhciBNQVRDSF9VUkxfU1RSRUFNQUJMRSA9IC9zdHJlYW1hYmxlXFwuY29tXFwvKFthLXowLTldKykkLztcbmV4cG9ydHMuTUFUQ0hfVVJMX1NUUkVBTUFCTEUgPSBNQVRDSF9VUkxfU1RSRUFNQUJMRTtcbnZhciBNQVRDSF9VUkxfV0lTVElBID0gLyg/Ondpc3RpYVxcLig/OmNvbXxuZXQpfHdpXFwuc3QpXFwvKD86bWVkaWFzfGVtYmVkKVxcLyg/OmlmcmFtZVxcLyk/KC4qKSQvO1xuZXhwb3J0cy5NQVRDSF9VUkxfV0lTVElBID0gTUFUQ0hfVVJMX1dJU1RJQTtcbnZhciBNQVRDSF9VUkxfVFdJVENIX1ZJREVPID0gLyg/Ond3d1xcLnxnb1xcLik/dHdpdGNoXFwudHZcXC92aWRlb3NcXC8oXFxkKykoJHxcXD8pLztcbmV4cG9ydHMuTUFUQ0hfVVJMX1RXSVRDSF9WSURFTyA9IE1BVENIX1VSTF9UV0lUQ0hfVklERU87XG52YXIgTUFUQ0hfVVJMX1RXSVRDSF9DSEFOTkVMID0gLyg/Ond3d1xcLnxnb1xcLik/dHdpdGNoXFwudHZcXC8oW2EtekEtWjAtOV9dKykoJHxcXD8pLztcbmV4cG9ydHMuTUFUQ0hfVVJMX1RXSVRDSF9DSEFOTkVMID0gTUFUQ0hfVVJMX1RXSVRDSF9DSEFOTkVMO1xudmFyIE1BVENIX1VSTF9EQUlMWU1PVElPTiA9IC9eKD86KD86aHR0cHM/KTopPyg/OlxcL1xcLyk/KD86d3d3XFwuKT8oPzooPzpkYWlseW1vdGlvblxcLmNvbSg/OlxcL2VtYmVkKT9cXC92aWRlbyl8ZGFpXFwubHkpXFwvKFthLXpBLVowLTldKykoPzpfW1xcd18tXSspPyQvO1xuZXhwb3J0cy5NQVRDSF9VUkxfREFJTFlNT1RJT04gPSBNQVRDSF9VUkxfREFJTFlNT1RJT047XG52YXIgTUFUQ0hfVVJMX01JWENMT1VEID0gL21peGNsb3VkXFwuY29tXFwvKFteL10rXFwvW14vXSspLztcbmV4cG9ydHMuTUFUQ0hfVVJMX01JWENMT1VEID0gTUFUQ0hfVVJMX01JWENMT1VEO1xudmFyIE1BVENIX1VSTF9WSURZQVJEID0gL3ZpZHlhcmQuY29tXFwvKD86d2F0Y2hcXC8pPyhbYS16QS1aMC05LV0rKS87XG5leHBvcnRzLk1BVENIX1VSTF9WSURZQVJEID0gTUFUQ0hfVVJMX1ZJRFlBUkQ7XG52YXIgTUFUQ0hfVVJMX0tBTFRVUkEgPSAvXmh0dHBzPzpcXC9cXC9bYS16QS1aXStcXC5rYWx0dXJhLihjb218b3JnKVxcL3BcXC8oWzAtOV0rKVxcL3NwXFwvKFswLTldKykwMFxcL2VtYmVkSWZyYW1lSnNcXC91aWNvbmZfaWRcXC8oWzAtOV0rKVxcL3BhcnRuZXJfaWRcXC8oWzAtOV0rKSguKillbnRyeV9pZC4oW2EtekEtWjAtOS1fXSspJC87XG5leHBvcnRzLk1BVENIX1VSTF9LQUxUVVJBID0gTUFUQ0hfVVJMX0tBTFRVUkE7XG52YXIgQVVESU9fRVhURU5TSU9OUyA9IC9cXC4obTRhfG1wNGF8bXBnYXxtcDJ8bXAyYXxtcDN8bTJhfG0zYXx3YXZ8d2ViYXxhYWN8b2dhfHNweCkoJHxcXD8pL2k7XG5leHBvcnRzLkFVRElPX0VYVEVOU0lPTlMgPSBBVURJT19FWFRFTlNJT05TO1xudmFyIFZJREVPX0VYVEVOU0lPTlMgPSAvXFwuKG1wNHxvZ1tndl18d2VibXxtb3Z8bTR2KSgkfFxcPykvaTtcbmV4cG9ydHMuVklERU9fRVhURU5TSU9OUyA9IFZJREVPX0VYVEVOU0lPTlM7XG52YXIgSExTX0VYVEVOU0lPTlMgPSAvXFwuKG0zdTgpKCR8XFw/KS9pO1xuZXhwb3J0cy5ITFNfRVhURU5TSU9OUyA9IEhMU19FWFRFTlNJT05TO1xudmFyIERBU0hfRVhURU5TSU9OUyA9IC9cXC4obXBkKSgkfFxcPykvaTtcbmV4cG9ydHMuREFTSF9FWFRFTlNJT05TID0gREFTSF9FWFRFTlNJT05TO1xudmFyIEZMVl9FWFRFTlNJT05TID0gL1xcLihmbHYpKCR8XFw/KS9pO1xuZXhwb3J0cy5GTFZfRVhURU5TSU9OUyA9IEZMVl9FWFRFTlNJT05TO1xuXG52YXIgY2FuUGxheUZpbGUgPSBmdW5jdGlvbiBjYW5QbGF5RmlsZSh1cmwpIHtcbiAgaWYgKHVybCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHVybCksXG4gICAgICAgIF9zdGVwO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBpdGVtID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJyAmJiBjYW5QbGF5RmlsZShpdGVtKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhblBsYXlGaWxlKGl0ZW0uc3JjKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IuZigpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICgoMCwgX3V0aWxzLmlzTWVkaWFTdHJlYW0pKHVybCkgfHwgKDAsIF91dGlscy5pc0Jsb2JVcmwpKHVybCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBBVURJT19FWFRFTlNJT05TLnRlc3QodXJsKSB8fCBWSURFT19FWFRFTlNJT05TLnRlc3QodXJsKSB8fCBITFNfRVhURU5TSU9OUy50ZXN0KHVybCkgfHwgREFTSF9FWFRFTlNJT05TLnRlc3QodXJsKSB8fCBGTFZfRVhURU5TSU9OUy50ZXN0KHVybCk7XG59O1xuXG52YXIgY2FuUGxheSA9IHtcbiAgeW91dHViZTogZnVuY3Rpb24geW91dHViZSh1cmwpIHtcbiAgICBpZiAodXJsIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIHJldHVybiB1cmwuZXZlcnkoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIE1BVENIX1VSTF9ZT1VUVUJFLnRlc3QoaXRlbSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gTUFUQ0hfVVJMX1lPVVRVQkUudGVzdCh1cmwpO1xuICB9LFxuICBzb3VuZGNsb3VkOiBmdW5jdGlvbiBzb3VuZGNsb3VkKHVybCkge1xuICAgIHJldHVybiBNQVRDSF9VUkxfU09VTkRDTE9VRC50ZXN0KHVybCkgJiYgIUFVRElPX0VYVEVOU0lPTlMudGVzdCh1cmwpO1xuICB9LFxuICB2aW1lbzogZnVuY3Rpb24gdmltZW8odXJsKSB7XG4gICAgcmV0dXJuIE1BVENIX1VSTF9WSU1FTy50ZXN0KHVybCkgJiYgIVZJREVPX0VYVEVOU0lPTlMudGVzdCh1cmwpICYmICFITFNfRVhURU5TSU9OUy50ZXN0KHVybCk7XG4gIH0sXG4gIGZhY2Vib29rOiBmdW5jdGlvbiBmYWNlYm9vayh1cmwpIHtcbiAgICByZXR1cm4gTUFUQ0hfVVJMX0ZBQ0VCT09LLnRlc3QodXJsKSB8fCBNQVRDSF9VUkxfRkFDRUJPT0tfV0FUQ0gudGVzdCh1cmwpO1xuICB9LFxuICBzdHJlYW1hYmxlOiBmdW5jdGlvbiBzdHJlYW1hYmxlKHVybCkge1xuICAgIHJldHVybiBNQVRDSF9VUkxfU1RSRUFNQUJMRS50ZXN0KHVybCk7XG4gIH0sXG4gIHdpc3RpYTogZnVuY3Rpb24gd2lzdGlhKHVybCkge1xuICAgIHJldHVybiBNQVRDSF9VUkxfV0lTVElBLnRlc3QodXJsKTtcbiAgfSxcbiAgdHdpdGNoOiBmdW5jdGlvbiB0d2l0Y2godXJsKSB7XG4gICAgcmV0dXJuIE1BVENIX1VSTF9UV0lUQ0hfVklERU8udGVzdCh1cmwpIHx8IE1BVENIX1VSTF9UV0lUQ0hfQ0hBTk5FTC50ZXN0KHVybCk7XG4gIH0sXG4gIGRhaWx5bW90aW9uOiBmdW5jdGlvbiBkYWlseW1vdGlvbih1cmwpIHtcbiAgICByZXR1cm4gTUFUQ0hfVVJMX0RBSUxZTU9USU9OLnRlc3QodXJsKTtcbiAgfSxcbiAgbWl4Y2xvdWQ6IGZ1bmN0aW9uIG1peGNsb3VkKHVybCkge1xuICAgIHJldHVybiBNQVRDSF9VUkxfTUlYQ0xPVUQudGVzdCh1cmwpO1xuICB9LFxuICB2aWR5YXJkOiBmdW5jdGlvbiB2aWR5YXJkKHVybCkge1xuICAgIHJldHVybiBNQVRDSF9VUkxfVklEWUFSRC50ZXN0KHVybCk7XG4gIH0sXG4gIGthbHR1cmE6IGZ1bmN0aW9uIGthbHR1cmEodXJsKSB7XG4gICAgcmV0dXJuIE1BVENIX1VSTF9LQUxUVVJBLnRlc3QodXJsKTtcbiAgfSxcbiAgZmlsZTogY2FuUGxheUZpbGVcbn07XG5leHBvcnRzLmNhblBsYXkgPSBjYW5QbGF5OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5cbnZhciBfcGF0dGVybnMgPSByZXF1aXJlKFwiLi4vcGF0dGVybnNcIik7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgU0RLX1VSTCA9ICdodHRwczovL2FwaS5kbWNkbi5uZXQvYWxsLmpzJztcbnZhciBTREtfR0xPQkFMID0gJ0RNJztcbnZhciBTREtfR0xPQkFMX1JFQURZID0gJ2RtQXN5bmNJbml0JztcblxudmFyIERhaWx5TW90aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEYWlseU1vdGlvbiwgX0NvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihEYWlseU1vdGlvbik7XG5cbiAgZnVuY3Rpb24gRGFpbHlNb3Rpb24oKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERhaWx5TW90aW9uKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY2FsbFBsYXllclwiLCBfdXRpbHMuY2FsbFBsYXllcik7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25EdXJhdGlvbkNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZHVyYXRpb24gPSBfdGhpcy5nZXREdXJhdGlvbigpO1xuXG4gICAgICBfdGhpcy5wcm9wcy5vbkR1cmF0aW9uKGR1cmF0aW9uKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJtdXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNhbGxQbGF5ZXIoJ3NldE11dGVkJywgdHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwidW5tdXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNhbGxQbGF5ZXIoJ3NldE11dGVkJywgZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlZlwiLCBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG4gICAgICBfdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGFpbHlNb3Rpb24sIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5wcm9wcy5vbk1vdW50ICYmIHRoaXMucHJvcHMub25Nb3VudCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKHVybCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY29udHJvbHMgPSBfdGhpcyRwcm9wcy5jb250cm9scyxcbiAgICAgICAgICBjb25maWcgPSBfdGhpcyRwcm9wcy5jb25maWcsXG4gICAgICAgICAgb25FcnJvciA9IF90aGlzJHByb3BzLm9uRXJyb3IsXG4gICAgICAgICAgcGxheWluZyA9IF90aGlzJHByb3BzLnBsYXlpbmc7XG5cbiAgICAgIHZhciBfdXJsJG1hdGNoID0gdXJsLm1hdGNoKF9wYXR0ZXJucy5NQVRDSF9VUkxfREFJTFlNT1RJT04pLFxuICAgICAgICAgIF91cmwkbWF0Y2gyID0gX3NsaWNlZFRvQXJyYXkoX3VybCRtYXRjaCwgMiksXG4gICAgICAgICAgaWQgPSBfdXJsJG1hdGNoMlsxXTtcblxuICAgICAgaWYgKHRoaXMucGxheWVyKSB7XG4gICAgICAgIHRoaXMucGxheWVyLmxvYWQoaWQsIHtcbiAgICAgICAgICBzdGFydDogKDAsIF91dGlscy5wYXJzZVN0YXJ0VGltZSkodXJsKSxcbiAgICAgICAgICBhdXRvcGxheTogcGxheWluZ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAoMCwgX3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCwgU0RLX0dMT0JBTF9SRUFEWSwgZnVuY3Rpb24gKERNKSB7XG4gICAgICAgIHJldHVybiBETS5wbGF5ZXI7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChETSkge1xuICAgICAgICBpZiAoIV90aGlzMi5jb250YWluZXIpIHJldHVybjtcbiAgICAgICAgdmFyIFBsYXllciA9IERNLnBsYXllcjtcbiAgICAgICAgX3RoaXMyLnBsYXllciA9IG5ldyBQbGF5ZXIoX3RoaXMyLmNvbnRhaW5lciwge1xuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgdmlkZW86IGlkLFxuICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7XG4gICAgICAgICAgICBjb250cm9sczogY29udHJvbHMsXG4gICAgICAgICAgICBhdXRvcGxheTogX3RoaXMyLnByb3BzLnBsYXlpbmcsXG4gICAgICAgICAgICBtdXRlOiBfdGhpczIucHJvcHMubXV0ZWQsXG4gICAgICAgICAgICBzdGFydDogKDAsIF91dGlscy5wYXJzZVN0YXJ0VGltZSkodXJsKSxcbiAgICAgICAgICAgIG9yaWdpbjogd2luZG93LmxvY2F0aW9uLm9yaWdpblxuICAgICAgICAgIH0sIGNvbmZpZy5wYXJhbXMpLFxuICAgICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgYXBpcmVhZHk6IF90aGlzMi5wcm9wcy5vblJlYWR5LFxuICAgICAgICAgICAgc2Vla2VkOiBmdW5jdGlvbiBzZWVrZWQoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIucHJvcHMub25TZWVrKF90aGlzMi5wbGF5ZXIuY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZpZGVvX2VuZDogX3RoaXMyLnByb3BzLm9uRW5kZWQsXG4gICAgICAgICAgICBkdXJhdGlvbmNoYW5nZTogX3RoaXMyLm9uRHVyYXRpb25DaGFuZ2UsXG4gICAgICAgICAgICBwYXVzZTogX3RoaXMyLnByb3BzLm9uUGF1c2UsXG4gICAgICAgICAgICBwbGF5aW5nOiBfdGhpczIucHJvcHMub25QbGF5LFxuICAgICAgICAgICAgd2FpdGluZzogX3RoaXMyLnByb3BzLm9uQnVmZmVyLFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKGV2ZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBvbkVycm9yKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSwgb25FcnJvcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInBsYXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheSgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGxheScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwYXVzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGF1c2UnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RvcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKCkgey8vIE5vdGhpbmcgdG8gZG9cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2Vla1RvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlZWtUbyhzZWNvbmRzKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NlZWsnLCBzZWNvbmRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0Vm9sdW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZXRWb2x1bWUnLCBmcmFjdGlvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldER1cmF0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldER1cmF0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucGxheWVyLmR1cmF0aW9uIHx8IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEN1cnJlbnRUaW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMucGxheWVyLmN1cnJlbnRUaW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTZWNvbmRzTG9hZGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlY29uZHNMb2FkZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuYnVmZmVyZWRUaW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGRpc3BsYXkgPSB0aGlzLnByb3BzLmRpc3BsYXk7XG4gICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICBkaXNwbGF5OiBkaXNwbGF5XG4gICAgICB9O1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICByZWY6IHRoaXMucmVmXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERhaWx5TW90aW9uO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBEYWlseU1vdGlvbjtcblxuX2RlZmluZVByb3BlcnR5KERhaWx5TW90aW9uLCBcImRpc3BsYXlOYW1lXCIsICdEYWlseU1vdGlvbicpO1xuXG5fZGVmaW5lUHJvcGVydHkoRGFpbHlNb3Rpb24sIFwiY2FuUGxheVwiLCBfcGF0dGVybnMuY2FuUGxheS5kYWlseW1vdGlvbik7XG5cbl9kZWZpbmVQcm9wZXJ0eShEYWlseU1vdGlvbiwgXCJsb29wT25FbmRlZFwiLCB0cnVlKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuXG52YXIgX3BhdHRlcm5zID0gcmVxdWlyZShcIi4uL3BhdHRlcm5zXCIpO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgU0RLX1VSTCA9ICdodHRwczovL2Nvbm5lY3QuZmFjZWJvb2submV0L2VuX1VTL3Nkay5qcyc7XG52YXIgU0RLX0dMT0JBTCA9ICdGQic7XG52YXIgU0RLX0dMT0JBTF9SRUFEWSA9ICdmYkFzeW5jSW5pdCc7XG52YXIgUExBWUVSX0lEX1BSRUZJWCA9ICdmYWNlYm9vay1wbGF5ZXItJztcblxudmFyIEZhY2Vib29rID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhGYWNlYm9vaywgX0NvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihGYWNlYm9vayk7XG5cbiAgZnVuY3Rpb24gRmFjZWJvb2soKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZhY2Vib29rKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY2FsbFBsYXllclwiLCBfdXRpbHMuY2FsbFBsYXllcik7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicGxheWVySURcIiwgX3RoaXMucHJvcHMuY29uZmlnLnBsYXllcklkIHx8IFwiXCIuY29uY2F0KFBMQVlFUl9JRF9QUkVGSVgpLmNvbmNhdCgoMCwgX3V0aWxzLnJhbmRvbVN0cmluZykoKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm11dGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FsbFBsYXllcignbXV0ZScpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInVubXV0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5jYWxsUGxheWVyKCd1bm11dGUnKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhGYWNlYm9vaywgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnByb3BzLm9uTW91bnQgJiYgdGhpcy5wcm9wcy5vbk1vdW50KHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQodXJsLCBpc1JlYWR5KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKGlzUmVhZHkpIHtcbiAgICAgICAgKDAsIF91dGlscy5nZXRTREspKFNES19VUkwsIFNES19HTE9CQUwsIFNES19HTE9CQUxfUkVBRFkpLnRoZW4oZnVuY3Rpb24gKEZCKSB7XG4gICAgICAgICAgcmV0dXJuIEZCLlhGQk1MLnBhcnNlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICgwLCBfdXRpbHMuZ2V0U0RLKShTREtfVVJMLCBTREtfR0xPQkFMLCBTREtfR0xPQkFMX1JFQURZKS50aGVuKGZ1bmN0aW9uIChGQikge1xuICAgICAgICBGQi5pbml0KHtcbiAgICAgICAgICBhcHBJZDogX3RoaXMyLnByb3BzLmNvbmZpZy5hcHBJZCxcbiAgICAgICAgICB4ZmJtbDogdHJ1ZSxcbiAgICAgICAgICB2ZXJzaW9uOiBfdGhpczIucHJvcHMuY29uZmlnLnZlcnNpb25cbiAgICAgICAgfSk7XG4gICAgICAgIEZCLkV2ZW50LnN1YnNjcmliZSgneGZibWwucmVuZGVyJywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgICAgIC8vIEhlcmUgd2Uga25vdyB0aGUgU0RLIGhhcyBsb2FkZWQsIGV2ZW4gaWYgb25SZWFkeS9vblBsYXlcbiAgICAgICAgICAvLyBpcyBub3QgY2FsbGVkIGR1ZSB0byBhIHZpZGVvIHRoYXQgY2Fubm90IGJlIGVtYmVkZGVkXG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uTG9hZGVkKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBGQi5FdmVudC5zdWJzY3JpYmUoJ3hmYm1sLnJlYWR5JywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgICAgIGlmIChtc2cudHlwZSA9PT0gJ3ZpZGVvJyAmJiBtc2cuaWQgPT09IF90aGlzMi5wbGF5ZXJJRCkge1xuICAgICAgICAgICAgX3RoaXMyLnBsYXllciA9IG1zZy5pbnN0YW5jZTtcblxuICAgICAgICAgICAgX3RoaXMyLnBsYXllci5zdWJzY3JpYmUoJ3N0YXJ0ZWRQbGF5aW5nJywgX3RoaXMyLnByb3BzLm9uUGxheSk7XG5cbiAgICAgICAgICAgIF90aGlzMi5wbGF5ZXIuc3Vic2NyaWJlKCdwYXVzZWQnLCBfdGhpczIucHJvcHMub25QYXVzZSk7XG5cbiAgICAgICAgICAgIF90aGlzMi5wbGF5ZXIuc3Vic2NyaWJlKCdmaW5pc2hlZFBsYXlpbmcnLCBfdGhpczIucHJvcHMub25FbmRlZCk7XG5cbiAgICAgICAgICAgIF90aGlzMi5wbGF5ZXIuc3Vic2NyaWJlKCdzdGFydGVkQnVmZmVyaW5nJywgX3RoaXMyLnByb3BzLm9uQnVmZmVyKTtcblxuICAgICAgICAgICAgX3RoaXMyLnBsYXllci5zdWJzY3JpYmUoJ2ZpbmlzaGVkQnVmZmVyaW5nJywgX3RoaXMyLnByb3BzLm9uQnVmZmVyRW5kKTtcblxuICAgICAgICAgICAgX3RoaXMyLnBsYXllci5zdWJzY3JpYmUoJ2Vycm9yJywgX3RoaXMyLnByb3BzLm9uRXJyb3IpO1xuXG4gICAgICAgICAgICBpZiAoX3RoaXMyLnByb3BzLm11dGVkKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5jYWxsUGxheWVyKCdtdXRlJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpczIuY2FsbFBsYXllcigndW5tdXRlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF90aGlzMi5wcm9wcy5vblJlYWR5KCk7IC8vIEZvciBzb21lIHJlYXNvbiBGYWNlYm9vayBoYXZlIGFkZGVkIGB2aXNpYmlsaXR5OiBoaWRkZW5gXG4gICAgICAgICAgICAvLyB0byB0aGUgaWZyYW1lIHdoZW4gYXV0b3BsYXkgZmFpbHMsIHNvIGhlcmUgd2Ugc2V0IGl0IGJhY2tcblxuXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChfdGhpczIucGxheWVySUQpLnF1ZXJ5U2VsZWN0b3IoJ2lmcmFtZScpLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwbGF5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BsYXknKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGF1c2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BhdXNlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHsvLyBOb3RoaW5nIHRvIGRvXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNlZWtUb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWVrVG8oc2Vjb25kcykge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZWVrJywgc2Vjb25kcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFZvbHVtZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUoZnJhY3Rpb24pIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0Vm9sdW1lJywgZnJhY3Rpb24pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXREdXJhdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ2dldER1cmF0aW9uJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEN1cnJlbnRUaW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsbFBsYXllcignZ2V0Q3VycmVudFBvc2l0aW9uJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFNlY29uZHNMb2FkZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSB0aGlzLnByb3BzLmNvbmZpZy5hdHRyaWJ1dGVzO1xuICAgICAgdmFyIHN0eWxlID0ge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJ1xuICAgICAgfTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICBpZDogdGhpcy5wbGF5ZXJJRCxcbiAgICAgICAgY2xhc3NOYW1lOiBcImZiLXZpZGVvXCIsXG4gICAgICAgIFwiZGF0YS1ocmVmXCI6IHRoaXMucHJvcHMudXJsLFxuICAgICAgICBcImRhdGEtYXV0b3BsYXlcIjogdGhpcy5wcm9wcy5wbGF5aW5nID8gJ3RydWUnIDogJ2ZhbHNlJyxcbiAgICAgICAgXCJkYXRhLWFsbG93ZnVsbHNjcmVlblwiOiBcInRydWVcIixcbiAgICAgICAgXCJkYXRhLWNvbnRyb2xzXCI6IHRoaXMucHJvcHMuY29udHJvbHMgPyAndHJ1ZScgOiAnZmFsc2UnXG4gICAgICB9LCBhdHRyaWJ1dGVzKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZhY2Vib29rO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBGYWNlYm9vaztcblxuX2RlZmluZVByb3BlcnR5KEZhY2Vib29rLCBcImRpc3BsYXlOYW1lXCIsICdGYWNlYm9vaycpO1xuXG5fZGVmaW5lUHJvcGVydHkoRmFjZWJvb2ssIFwiY2FuUGxheVwiLCBfcGF0dGVybnMuY2FuUGxheS5mYWNlYm9vayk7XG5cbl9kZWZpbmVQcm9wZXJ0eShGYWNlYm9vaywgXCJsb29wT25FbmRlZFwiLCB0cnVlKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuXG52YXIgX3BhdHRlcm5zID0gcmVxdWlyZShcIi4uL3BhdHRlcm5zXCIpO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgSEFTX05BVklHQVRPUiA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnO1xudmFyIElTX0lQQURfUFJPID0gSEFTX05BVklHQVRPUiAmJiBuYXZpZ2F0b3IucGxhdGZvcm0gPT09ICdNYWNJbnRlbCcgJiYgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMTtcbnZhciBJU19JT1MgPSBIQVNfTkFWSUdBVE9SICYmICgvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSB8fCBJU19JUEFEX1BSTykgJiYgIXdpbmRvdy5NU1N0cmVhbTtcbnZhciBITFNfU0RLX1VSTCA9ICdodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2hscy5qc0BWRVJTSU9OL2Rpc3QvaGxzLm1pbi5qcyc7XG52YXIgSExTX0dMT0JBTCA9ICdIbHMnO1xudmFyIERBU0hfU0RLX1VSTCA9ICdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvVkVSU0lPTi9kYXNoLmFsbC5taW4uanMnO1xudmFyIERBU0hfR0xPQkFMID0gJ2Rhc2hqcyc7XG52YXIgRkxWX1NES19VUkwgPSAnaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9mbHYuanNAVkVSU0lPTi9kaXN0L2Zsdi5taW4uanMnO1xudmFyIEZMVl9HTE9CQUwgPSAnZmx2anMnO1xudmFyIE1BVENIX0RST1BCT1hfVVJMID0gL3d3d1xcLmRyb3Bib3hcXC5jb21cXC8uKy87XG52YXIgTUFUQ0hfQ0xPVURGTEFSRV9TVFJFQU0gPSAvaHR0cHM6XFwvXFwvd2F0Y2hcXC5jbG91ZGZsYXJlc3RyZWFtXFwuY29tXFwvKFthLXowLTldKykvO1xudmFyIFJFUExBQ0VfQ0xPVURGTEFSRV9TVFJFQU0gPSAnaHR0cHM6Ly92aWRlb2RlbGl2ZXJ5Lm5ldC97aWR9L21hbmlmZXN0L3ZpZGVvLm0zdTgnO1xuXG52YXIgRmlsZVBsYXllciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRmlsZVBsYXllciwgX0NvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihGaWxlUGxheWVyKTtcblxuICBmdW5jdGlvbiBGaWxlUGxheWVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGaWxlUGxheWVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBfYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIF9hcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KF9hcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25SZWFkeVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM7XG5cbiAgICAgIHJldHVybiAoX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcykub25SZWFkeS5hcHBseShfdGhpcyRwcm9wcywgYXJndW1lbnRzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvblBsYXlcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMjtcblxuICAgICAgcmV0dXJuIChfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcykub25QbGF5LmFwcGx5KF90aGlzJHByb3BzMiwgYXJndW1lbnRzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbkJ1ZmZlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzO1xuXG4gICAgICByZXR1cm4gKF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzKS5vbkJ1ZmZlci5hcHBseShfdGhpcyRwcm9wczMsIGFyZ3VtZW50cyk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25CdWZmZXJFbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNDtcblxuICAgICAgcmV0dXJuIChfdGhpcyRwcm9wczQgPSBfdGhpcy5wcm9wcykub25CdWZmZXJFbmQuYXBwbHkoX3RoaXMkcHJvcHM0LCBhcmd1bWVudHMpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uUGF1c2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNTtcblxuICAgICAgcmV0dXJuIChfdGhpcyRwcm9wczUgPSBfdGhpcy5wcm9wcykub25QYXVzZS5hcHBseShfdGhpcyRwcm9wczUsIGFyZ3VtZW50cyk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25FbmRlZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM2O1xuXG4gICAgICByZXR1cm4gKF90aGlzJHByb3BzNiA9IF90aGlzLnByb3BzKS5vbkVuZGVkLmFwcGx5KF90aGlzJHByb3BzNiwgYXJndW1lbnRzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbkVycm9yXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczc7XG5cbiAgICAgIHJldHVybiAoX3RoaXMkcHJvcHM3ID0gX3RoaXMucHJvcHMpLm9uRXJyb3IuYXBwbHkoX3RoaXMkcHJvcHM3LCBhcmd1bWVudHMpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uRW5hYmxlUElQXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczg7XG5cbiAgICAgIHJldHVybiAoX3RoaXMkcHJvcHM4ID0gX3RoaXMucHJvcHMpLm9uRW5hYmxlUElQLmFwcGx5KF90aGlzJHByb3BzOCwgYXJndW1lbnRzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbkRpc2FibGVQSVBcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczkgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvbkRpc2FibGVQSVAgPSBfdGhpcyRwcm9wczkub25EaXNhYmxlUElQLFxuICAgICAgICAgIHBsYXlpbmcgPSBfdGhpcyRwcm9wczkucGxheWluZztcbiAgICAgIG9uRGlzYWJsZVBJUChlKTtcblxuICAgICAgaWYgKHBsYXlpbmcpIHtcbiAgICAgICAgX3RoaXMucGxheSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uUHJlc2VudGF0aW9uTW9kZUNoYW5nZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF90aGlzLnBsYXllciAmJiAoMCwgX3V0aWxzLnN1cHBvcnRzV2ViS2l0UHJlc2VudGF0aW9uTW9kZSkoX3RoaXMucGxheWVyKSkge1xuICAgICAgICB2YXIgd2Via2l0UHJlc2VudGF0aW9uTW9kZSA9IF90aGlzLnBsYXllci53ZWJraXRQcmVzZW50YXRpb25Nb2RlO1xuXG4gICAgICAgIGlmICh3ZWJraXRQcmVzZW50YXRpb25Nb2RlID09PSAncGljdHVyZS1pbi1waWN0dXJlJykge1xuICAgICAgICAgIF90aGlzLm9uRW5hYmxlUElQKGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHdlYmtpdFByZXNlbnRhdGlvbk1vZGUgPT09ICdpbmxpbmUnKSB7XG4gICAgICAgICAgX3RoaXMub25EaXNhYmxlUElQKGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25TZWVrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBfdGhpcy5wcm9wcy5vblNlZWsoZS50YXJnZXQuY3VycmVudFRpbWUpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm11dGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMucGxheWVyLm11dGVkID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ1bm11dGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMucGxheWVyLm11dGVkID0gZmFsc2U7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicmVuZGVyU291cmNlRWxlbWVudFwiLCBmdW5jdGlvbiAoc291cmNlLCBpbmRleCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic291cmNlXCIsIHtcbiAgICAgICAgICBrZXk6IGluZGV4LFxuICAgICAgICAgIHNyYzogc291cmNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInNvdXJjZVwiLCBfZXh0ZW5kcyh7XG4gICAgICAgIGtleTogaW5kZXhcbiAgICAgIH0sIHNvdXJjZSkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlbmRlclRyYWNrXCIsIGZ1bmN0aW9uICh0cmFjaywgaW5kZXgpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwidHJhY2tcIiwgX2V4dGVuZHMoe1xuICAgICAgICBrZXk6IGluZGV4XG4gICAgICB9LCB0cmFjaykpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlZlwiLCBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICBpZiAoX3RoaXMucGxheWVyKSB7XG4gICAgICAgIC8vIFN0b3JlIHByZXZpb3VzIHBsYXllciB0byBiZSB1c2VkIGJ5IHJlbW92ZUxpc3RlbmVycygpXG4gICAgICAgIF90aGlzLnByZXZQbGF5ZXIgPSBfdGhpcy5wbGF5ZXI7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnBsYXllciA9IHBsYXllcjtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhGaWxlUGxheWVyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMucHJvcHMub25Nb3VudCAmJiB0aGlzLnByb3BzLm9uTW91bnQodGhpcyk7XG4gICAgICB0aGlzLmFkZExpc3RlbmVycyh0aGlzLnBsYXllcik7XG5cbiAgICAgIGlmIChJU19JT1MpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIubG9hZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgaWYgKHRoaXMuc2hvdWxkVXNlQXVkaW8odGhpcy5wcm9wcykgIT09IHRoaXMuc2hvdWxkVXNlQXVkaW8ocHJldlByb3BzKSkge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycyh0aGlzLnByZXZQbGF5ZXIsIHByZXZQcm9wcy51cmwpO1xuICAgICAgICB0aGlzLmFkZExpc3RlbmVycyh0aGlzLnBsYXllcik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLnVybCAhPT0gcHJldlByb3BzLnVybCAmJiAhKDAsIF91dGlscy5pc01lZGlhU3RyZWFtKSh0aGlzLnByb3BzLnVybCkpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuc3JjT2JqZWN0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycyh0aGlzLnBsYXllcik7XG5cbiAgICAgIGlmICh0aGlzLmhscykge1xuICAgICAgICB0aGlzLmhscy5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZExpc3RlbmVyc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRMaXN0ZW5lcnMocGxheWVyKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxMCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgdXJsID0gX3RoaXMkcHJvcHMxMC51cmwsXG4gICAgICAgICAgcGxheXNpbmxpbmUgPSBfdGhpcyRwcm9wczEwLnBsYXlzaW5saW5lO1xuICAgICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCB0aGlzLm9uUGxheSk7XG4gICAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignd2FpdGluZycsIHRoaXMub25CdWZmZXIpO1xuICAgICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXlpbmcnLCB0aGlzLm9uQnVmZmVyRW5kKTtcbiAgICAgIHBsYXllci5hZGRFdmVudExpc3RlbmVyKCdwYXVzZScsIHRoaXMub25QYXVzZSk7XG4gICAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignc2Vla2VkJywgdGhpcy5vblNlZWspO1xuICAgICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgdGhpcy5vbkVuZGVkKTtcbiAgICAgIHBsYXllci5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMub25FcnJvcik7XG4gICAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignZW50ZXJwaWN0dXJlaW5waWN0dXJlJywgdGhpcy5vbkVuYWJsZVBJUCk7XG4gICAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignbGVhdmVwaWN0dXJlaW5waWN0dXJlJywgdGhpcy5vbkRpc2FibGVQSVApO1xuICAgICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdHByZXNlbnRhdGlvbm1vZGVjaGFuZ2VkJywgdGhpcy5vblByZXNlbnRhdGlvbk1vZGVDaGFuZ2UpO1xuXG4gICAgICBpZiAoIXRoaXMuc2hvdWxkVXNlSExTKHVybCkpIHtcbiAgICAgICAgLy8gb25SZWFkeSBpcyBoYW5kbGVkIGJ5IGhscy5qc1xuICAgICAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignY2FucGxheScsIHRoaXMub25SZWFkeSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwbGF5c2lubGluZSkge1xuICAgICAgICBwbGF5ZXIuc2V0QXR0cmlidXRlKCdwbGF5c2lubGluZScsICcnKTtcbiAgICAgICAgcGxheWVyLnNldEF0dHJpYnV0ZSgnd2Via2l0LXBsYXlzaW5saW5lJywgJycpO1xuICAgICAgICBwbGF5ZXIuc2V0QXR0cmlidXRlKCd4NS1wbGF5c2lubGluZScsICcnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlTGlzdGVuZXJzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVycyhwbGF5ZXIsIHVybCkge1xuICAgICAgcGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NhbnBsYXknLCB0aGlzLm9uUmVhZHkpO1xuICAgICAgcGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BsYXknLCB0aGlzLm9uUGxheSk7XG4gICAgICBwbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2FpdGluZycsIHRoaXMub25CdWZmZXIpO1xuICAgICAgcGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BsYXlpbmcnLCB0aGlzLm9uQnVmZmVyRW5kKTtcbiAgICAgIHBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCdwYXVzZScsIHRoaXMub25QYXVzZSk7XG4gICAgICBwbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Vla2VkJywgdGhpcy5vblNlZWspO1xuICAgICAgcGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgdGhpcy5vbkVuZGVkKTtcbiAgICAgIHBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMub25FcnJvcik7XG4gICAgICBwbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignZW50ZXJwaWN0dXJlaW5waWN0dXJlJywgdGhpcy5vbkVuYWJsZVBJUCk7XG4gICAgICBwbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbGVhdmVwaWN0dXJlaW5waWN0dXJlJywgdGhpcy5vbkRpc2FibGVQSVApO1xuICAgICAgcGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdHByZXNlbnRhdGlvbm1vZGVjaGFuZ2VkJywgdGhpcy5vblByZXNlbnRhdGlvbk1vZGVDaGFuZ2UpO1xuXG4gICAgICBpZiAoIXRoaXMuc2hvdWxkVXNlSExTKHVybCkpIHtcbiAgICAgICAgLy8gb25SZWFkeSBpcyBoYW5kbGVkIGJ5IGhscy5qc1xuICAgICAgICBwbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2FucGxheScsIHRoaXMub25SZWFkeSk7XG4gICAgICB9XG4gICAgfSAvLyBQcm94eSBtZXRob2RzIHRvIHByZXZlbnQgbGlzdGVuZXIgbGVha3NcblxuICB9LCB7XG4gICAga2V5OiBcInNob3VsZFVzZUF1ZGlvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZFVzZUF1ZGlvKHByb3BzKSB7XG4gICAgICBpZiAocHJvcHMuY29uZmlnLmZvcmNlVmlkZW8pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvcHMuY29uZmlnLmF0dHJpYnV0ZXMucG9zdGVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gVXNlIDx2aWRlbz4gc28gdGhhdCBwb3N0ZXIgaXMgc2hvd25cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9wYXR0ZXJucy5BVURJT19FWFRFTlNJT05TLnRlc3QocHJvcHMudXJsKSB8fCBwcm9wcy5jb25maWcuZm9yY2VBdWRpbztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2hvdWxkVXNlSExTXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZFVzZUhMUyh1cmwpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmNvbmZpZy5mb3JjZUhMUykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKElTX0lPUykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcGF0dGVybnMuSExTX0VYVEVOU0lPTlMudGVzdCh1cmwpIHx8IE1BVENIX0NMT1VERkxBUkVfU1RSRUFNLnRlc3QodXJsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2hvdWxkVXNlREFTSFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGRVc2VEQVNIKHVybCkge1xuICAgICAgcmV0dXJuIF9wYXR0ZXJucy5EQVNIX0VYVEVOU0lPTlMudGVzdCh1cmwpIHx8IHRoaXMucHJvcHMuY29uZmlnLmZvcmNlREFTSDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2hvdWxkVXNlRkxWXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZFVzZUZMVih1cmwpIHtcbiAgICAgIHJldHVybiBfcGF0dGVybnMuRkxWX0VYVEVOU0lPTlMudGVzdCh1cmwpIHx8IHRoaXMucHJvcHMuY29uZmlnLmZvcmNlRkxWO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQodXJsKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzJGNvbmZpZyA9IHRoaXMucHJvcHMuY29uZmlnLFxuICAgICAgICAgIGhsc1ZlcnNpb24gPSBfdGhpcyRwcm9wcyRjb25maWcuaGxzVmVyc2lvbixcbiAgICAgICAgICBobHNPcHRpb25zID0gX3RoaXMkcHJvcHMkY29uZmlnLmhsc09wdGlvbnMsXG4gICAgICAgICAgZGFzaFZlcnNpb24gPSBfdGhpcyRwcm9wcyRjb25maWcuZGFzaFZlcnNpb24sXG4gICAgICAgICAgZmx2VmVyc2lvbiA9IF90aGlzJHByb3BzJGNvbmZpZy5mbHZWZXJzaW9uO1xuXG4gICAgICBpZiAodGhpcy5obHMpIHtcbiAgICAgICAgdGhpcy5obHMuZGVzdHJveSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5kYXNoKSB7XG4gICAgICAgIHRoaXMuZGFzaC5yZXNldCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zaG91bGRVc2VITFModXJsKSkge1xuICAgICAgICAoMCwgX3V0aWxzLmdldFNESykoSExTX1NES19VUkwucmVwbGFjZSgnVkVSU0lPTicsIGhsc1ZlcnNpb24pLCBITFNfR0xPQkFMKS50aGVuKGZ1bmN0aW9uIChIbHMpIHtcbiAgICAgICAgICBfdGhpczIuaGxzID0gbmV3IEhscyhobHNPcHRpb25zKTtcblxuICAgICAgICAgIF90aGlzMi5obHMub24oSGxzLkV2ZW50cy5NQU5JRkVTVF9QQVJTRUQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzMi5wcm9wcy5vblJlYWR5KCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBfdGhpczIuaGxzLm9uKEhscy5FdmVudHMuRVJST1IsIGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICAgICAgICBfdGhpczIucHJvcHMub25FcnJvcihlLCBkYXRhLCBfdGhpczIuaGxzLCBIbHMpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKE1BVENIX0NMT1VERkxBUkVfU1RSRUFNLnRlc3QodXJsKSkge1xuICAgICAgICAgICAgdmFyIGlkID0gdXJsLm1hdGNoKE1BVENIX0NMT1VERkxBUkVfU1RSRUFNKVsxXTtcblxuICAgICAgICAgICAgX3RoaXMyLmhscy5sb2FkU291cmNlKFJFUExBQ0VfQ0xPVURGTEFSRV9TVFJFQU0ucmVwbGFjZSgne2lkfScsIGlkKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzMi5obHMubG9hZFNvdXJjZSh1cmwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzMi5obHMuYXR0YWNoTWVkaWEoX3RoaXMyLnBsYXllcik7XG5cbiAgICAgICAgICBfdGhpczIucHJvcHMub25Mb2FkZWQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNob3VsZFVzZURBU0godXJsKSkge1xuICAgICAgICAoMCwgX3V0aWxzLmdldFNESykoREFTSF9TREtfVVJMLnJlcGxhY2UoJ1ZFUlNJT04nLCBkYXNoVmVyc2lvbiksIERBU0hfR0xPQkFMKS50aGVuKGZ1bmN0aW9uIChkYXNoanMpIHtcbiAgICAgICAgICBfdGhpczIuZGFzaCA9IGRhc2hqcy5NZWRpYVBsYXllcigpLmNyZWF0ZSgpO1xuXG4gICAgICAgICAgX3RoaXMyLmRhc2guaW5pdGlhbGl6ZShfdGhpczIucGxheWVyLCB1cmwsIF90aGlzMi5wcm9wcy5wbGF5aW5nKTtcblxuICAgICAgICAgIF90aGlzMi5kYXNoLm9uKCdlcnJvcicsIF90aGlzMi5wcm9wcy5vbkVycm9yKTtcblxuICAgICAgICAgIGlmIChwYXJzZUludChkYXNoVmVyc2lvbikgPCAzKSB7XG4gICAgICAgICAgICBfdGhpczIuZGFzaC5nZXREZWJ1ZygpLnNldExvZ1RvQnJvd3NlckNvbnNvbGUoZmFsc2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpczIuZGFzaC51cGRhdGVTZXR0aW5ncyh7XG4gICAgICAgICAgICAgIGRlYnVnOiB7XG4gICAgICAgICAgICAgICAgbG9nTGV2ZWw6IGRhc2hqcy5EZWJ1Zy5MT0dfTEVWRUxfTk9ORVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczIucHJvcHMub25Mb2FkZWQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNob3VsZFVzZUZMVih1cmwpKSB7XG4gICAgICAgICgwLCBfdXRpbHMuZ2V0U0RLKShGTFZfU0RLX1VSTC5yZXBsYWNlKCdWRVJTSU9OJywgZmx2VmVyc2lvbiksIEZMVl9HTE9CQUwpLnRoZW4oZnVuY3Rpb24gKGZsdmpzKSB7XG4gICAgICAgICAgX3RoaXMyLmZsdiA9IGZsdmpzLmNyZWF0ZVBsYXllcih7XG4gICAgICAgICAgICB0eXBlOiAnZmx2JyxcbiAgICAgICAgICAgIHVybDogdXJsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBfdGhpczIuZmx2LmF0dGFjaE1lZGlhRWxlbWVudChfdGhpczIucGxheWVyKTtcblxuICAgICAgICAgIF90aGlzMi5mbHYubG9hZCgpO1xuXG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uTG9hZGVkKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodXJsIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgLy8gV2hlbiBzZXR0aW5nIG5ldyB1cmxzICg8c291cmNlPikgb24gYW4gYWxyZWFkeSBsb2FkZWQgdmlkZW8sXG4gICAgICAgIC8vIEhUTUxNZWRpYUVsZW1lbnQubG9hZCgpIGlzIG5lZWRlZCB0byByZXNldCB0aGUgbWVkaWEgZWxlbWVudFxuICAgICAgICAvLyBhbmQgcmVzdGFydCB0aGUgbWVkaWEgcmVzb3VyY2UuIEp1c3QgcmVwbGFjaW5nIGNoaWxkcmVuIHNvdXJjZVxuICAgICAgICAvLyBkb20gbm9kZXMgaXMgbm90IGVub3VnaFxuICAgICAgICB0aGlzLnBsYXllci5sb2FkKCk7XG4gICAgICB9IGVsc2UgaWYgKCgwLCBfdXRpbHMuaXNNZWRpYVN0cmVhbSkodXJsKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMucGxheWVyLnNyY09iamVjdCA9IHVybDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRoaXMucGxheWVyLnNyYyA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKHVybCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGxheVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgdmFyIHByb21pc2UgPSB0aGlzLnBsYXllci5wbGF5KCk7XG5cbiAgICAgIGlmIChwcm9taXNlKSB7XG4gICAgICAgIHByb21pc2VbXCJjYXRjaFwiXSh0aGlzLnByb3BzLm9uRXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwYXVzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgIHRoaXMucGxheWVyLnBhdXNlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHRoaXMucGxheWVyLnJlbW92ZUF0dHJpYnV0ZSgnc3JjJyk7XG5cbiAgICAgIGlmICh0aGlzLmRhc2gpIHtcbiAgICAgICAgdGhpcy5kYXNoLnJlc2V0KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNlZWtUb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWVrVG8oc2Vjb25kcykge1xuICAgICAgdGhpcy5wbGF5ZXIuY3VycmVudFRpbWUgPSBzZWNvbmRzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRWb2x1bWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Vm9sdW1lKGZyYWN0aW9uKSB7XG4gICAgICB0aGlzLnBsYXllci52b2x1bWUgPSBmcmFjdGlvbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZW5hYmxlUElQXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZVBJUCgpIHtcbiAgICAgIGlmICh0aGlzLnBsYXllci5yZXF1ZXN0UGljdHVyZUluUGljdHVyZSAmJiBkb2N1bWVudC5waWN0dXJlSW5QaWN0dXJlRWxlbWVudCAhPT0gdGhpcy5wbGF5ZXIpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIucmVxdWVzdFBpY3R1cmVJblBpY3R1cmUoKTtcbiAgICAgIH0gZWxzZSBpZiAoKDAsIF91dGlscy5zdXBwb3J0c1dlYktpdFByZXNlbnRhdGlvbk1vZGUpKHRoaXMucGxheWVyKSAmJiB0aGlzLnBsYXllci53ZWJraXRQcmVzZW50YXRpb25Nb2RlICE9PSAncGljdHVyZS1pbi1waWN0dXJlJykge1xuICAgICAgICB0aGlzLnBsYXllci53ZWJraXRTZXRQcmVzZW50YXRpb25Nb2RlKCdwaWN0dXJlLWluLXBpY3R1cmUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGlzYWJsZVBJUFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlUElQKCkge1xuICAgICAgaWYgKGRvY3VtZW50LmV4aXRQaWN0dXJlSW5QaWN0dXJlICYmIGRvY3VtZW50LnBpY3R1cmVJblBpY3R1cmVFbGVtZW50ID09PSB0aGlzLnBsYXllcikge1xuICAgICAgICBkb2N1bWVudC5leGl0UGljdHVyZUluUGljdHVyZSgpO1xuICAgICAgfSBlbHNlIGlmICgoMCwgX3V0aWxzLnN1cHBvcnRzV2ViS2l0UHJlc2VudGF0aW9uTW9kZSkodGhpcy5wbGF5ZXIpICYmIHRoaXMucGxheWVyLndlYmtpdFByZXNlbnRhdGlvbk1vZGUgIT09ICdpbmxpbmUnKSB7XG4gICAgICAgIHRoaXMucGxheWVyLndlYmtpdFNldFByZXNlbnRhdGlvbk1vZGUoJ2lubGluZScpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRQbGF5YmFja1JhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UGxheWJhY2tSYXRlKHJhdGUpIHtcbiAgICAgIHRoaXMucGxheWVyLnBsYXliYWNrUmF0ZSA9IHJhdGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldER1cmF0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldER1cmF0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgX3RoaXMkcGxheWVyID0gdGhpcy5wbGF5ZXIsXG4gICAgICAgICAgZHVyYXRpb24gPSBfdGhpcyRwbGF5ZXIuZHVyYXRpb24sXG4gICAgICAgICAgc2Vla2FibGUgPSBfdGhpcyRwbGF5ZXIuc2Vla2FibGU7IC8vIG9uIGlPUywgbGl2ZSBzdHJlYW1zIHJldHVybiBJbmZpbml0eSBmb3IgdGhlIGR1cmF0aW9uXG4gICAgICAvLyBzbyBpbnN0ZWFkIHdlIHVzZSB0aGUgZW5kIG9mIHRoZSBzZWVrYWJsZSB0aW1lcmFuZ2VcblxuICAgICAgaWYgKGR1cmF0aW9uID09PSBJbmZpbml0eSAmJiBzZWVrYWJsZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBzZWVrYWJsZS5lbmQoc2Vla2FibGUubGVuZ3RoIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkdXJhdGlvbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q3VycmVudFRpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICBpZiAoIXRoaXMucGxheWVyKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzLnBsYXllci5jdXJyZW50VGltZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U2Vjb25kc0xvYWRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWNvbmRzTG9hZGVkKCkge1xuICAgICAgaWYgKCF0aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgYnVmZmVyZWQgPSB0aGlzLnBsYXllci5idWZmZXJlZDtcblxuICAgICAgaWYgKGJ1ZmZlcmVkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIGVuZCA9IGJ1ZmZlcmVkLmVuZChidWZmZXJlZC5sZW5ndGggLSAxKTtcbiAgICAgIHZhciBkdXJhdGlvbiA9IHRoaXMuZ2V0RHVyYXRpb24oKTtcblxuICAgICAgaWYgKGVuZCA+IGR1cmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBkdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVuZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U291cmNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNvdXJjZSh1cmwpIHtcbiAgICAgIHZhciB1c2VITFMgPSB0aGlzLnNob3VsZFVzZUhMUyh1cmwpO1xuICAgICAgdmFyIHVzZURBU0ggPSB0aGlzLnNob3VsZFVzZURBU0godXJsKTtcbiAgICAgIHZhciB1c2VGTFYgPSB0aGlzLnNob3VsZFVzZUZMVih1cmwpO1xuXG4gICAgICBpZiAodXJsIGluc3RhbmNlb2YgQXJyYXkgfHwgKDAsIF91dGlscy5pc01lZGlhU3RyZWFtKSh1cmwpIHx8IHVzZUhMUyB8fCB1c2VEQVNIIHx8IHVzZUZMVikge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBpZiAoTUFUQ0hfRFJPUEJPWF9VUkwudGVzdCh1cmwpKSB7XG4gICAgICAgIHJldHVybiB1cmwucmVwbGFjZSgnd3d3LmRyb3Bib3guY29tJywgJ2RsLmRyb3Bib3h1c2VyY29udGVudC5jb20nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczExID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICB1cmwgPSBfdGhpcyRwcm9wczExLnVybCxcbiAgICAgICAgICBwbGF5aW5nID0gX3RoaXMkcHJvcHMxMS5wbGF5aW5nLFxuICAgICAgICAgIGxvb3AgPSBfdGhpcyRwcm9wczExLmxvb3AsXG4gICAgICAgICAgY29udHJvbHMgPSBfdGhpcyRwcm9wczExLmNvbnRyb2xzLFxuICAgICAgICAgIG11dGVkID0gX3RoaXMkcHJvcHMxMS5tdXRlZCxcbiAgICAgICAgICBjb25maWcgPSBfdGhpcyRwcm9wczExLmNvbmZpZyxcbiAgICAgICAgICB3aWR0aCA9IF90aGlzJHByb3BzMTEud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gX3RoaXMkcHJvcHMxMS5oZWlnaHQ7XG4gICAgICB2YXIgdXNlQXVkaW8gPSB0aGlzLnNob3VsZFVzZUF1ZGlvKHRoaXMucHJvcHMpO1xuICAgICAgdmFyIEVsZW1lbnQgPSB1c2VBdWRpbyA/ICdhdWRpbycgOiAndmlkZW8nO1xuICAgICAgdmFyIHN0eWxlID0ge1xuICAgICAgICB3aWR0aDogd2lkdGggPT09ICdhdXRvJyA/IHdpZHRoIDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCA9PT0gJ2F1dG8nID8gaGVpZ2h0IDogJzEwMCUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoRWxlbWVudCwgX2V4dGVuZHMoe1xuICAgICAgICByZWY6IHRoaXMucmVmLFxuICAgICAgICBzcmM6IHRoaXMuZ2V0U291cmNlKHVybCksXG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgcHJlbG9hZDogXCJhdXRvXCIsXG4gICAgICAgIGF1dG9QbGF5OiBwbGF5aW5nIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgY29udHJvbHM6IGNvbnRyb2xzLFxuICAgICAgICBtdXRlZDogbXV0ZWQsXG4gICAgICAgIGxvb3A6IGxvb3BcbiAgICAgIH0sIGNvbmZpZy5hdHRyaWJ1dGVzKSwgdXJsIGluc3RhbmNlb2YgQXJyYXkgJiYgdXJsLm1hcCh0aGlzLnJlbmRlclNvdXJjZUVsZW1lbnQpLCBjb25maWcudHJhY2tzLm1hcCh0aGlzLnJlbmRlclRyYWNrKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZpbGVQbGF5ZXI7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IEZpbGVQbGF5ZXI7XG5cbl9kZWZpbmVQcm9wZXJ0eShGaWxlUGxheWVyLCBcImRpc3BsYXlOYW1lXCIsICdGaWxlUGxheWVyJyk7XG5cbl9kZWZpbmVQcm9wZXJ0eShGaWxlUGxheWVyLCBcImNhblBsYXlcIiwgX3BhdHRlcm5zLmNhblBsYXkuZmlsZSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcblxudmFyIF9wYXR0ZXJucyA9IHJlcXVpcmUoXCIuLi9wYXR0ZXJuc1wiKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIFNES19VUkwgPSAnaHR0cHM6Ly9jZG4uZW1iZWQubHkvcGxheWVyLTAuMS4wLm1pbi5qcyc7XG52YXIgU0RLX0dMT0JBTCA9ICdwbGF5ZXJqcyc7XG5cbnZhciBLYWx0dXJhID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhLYWx0dXJhLCBfQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEthbHR1cmEpO1xuXG4gIGZ1bmN0aW9uIEthbHR1cmEoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEthbHR1cmEpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjYWxsUGxheWVyXCIsIF91dGlscy5jYWxsUGxheWVyKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJkdXJhdGlvblwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjdXJyZW50VGltZVwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZWNvbmRzTG9hZGVkXCIsIG51bGwpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm11dGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FsbFBsYXllcignbXV0ZScpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInVubXV0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5jYWxsUGxheWVyKCd1bm11dGUnKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZWZcIiwgZnVuY3Rpb24gKGlmcmFtZSkge1xuICAgICAgX3RoaXMuaWZyYW1lID0gaWZyYW1lO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEthbHR1cmEsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5wcm9wcy5vbk1vdW50ICYmIHRoaXMucHJvcHMub25Nb3VudCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKHVybCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICgwLCBfdXRpbHMuZ2V0U0RLKShTREtfVVJMLCBTREtfR0xPQkFMKS50aGVuKGZ1bmN0aW9uIChwbGF5ZXJqcykge1xuICAgICAgICBpZiAoIV90aGlzMi5pZnJhbWUpIHJldHVybjtcbiAgICAgICAgX3RoaXMyLnBsYXllciA9IG5ldyBwbGF5ZXJqcy5QbGF5ZXIoX3RoaXMyLmlmcmFtZSk7XG5cbiAgICAgICAgX3RoaXMyLnBsYXllci5vbigncmVhZHknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnBsYXllci5pc1JlYWR5ID0gdHJ1ZTtcblxuICAgICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ3BsYXknLCBfdGhpczIucHJvcHMub25QbGF5KTtcblxuICAgICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ3BhdXNlJywgX3RoaXMyLnByb3BzLm9uUGF1c2UpO1xuXG4gICAgICAgICAgX3RoaXMyLnBsYXllci5vbignc2Vla2VkJywgX3RoaXMyLnByb3BzLm9uU2Vlayk7XG5cbiAgICAgICAgICBfdGhpczIucGxheWVyLm9uKCdlbmRlZCcsIF90aGlzMi5wcm9wcy5vbkVuZGVkKTtcblxuICAgICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ2Vycm9yJywgX3RoaXMyLnByb3BzLm9uRXJyb3IpO1xuXG4gICAgICAgICAgX3RoaXMyLnBsYXllci5vbigndGltZXVwZGF0ZScsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBfcmVmLmR1cmF0aW9uLFxuICAgICAgICAgICAgICAgIHNlY29uZHMgPSBfcmVmLnNlY29uZHM7XG4gICAgICAgICAgICBfdGhpczIuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgICAgIF90aGlzMi5jdXJyZW50VGltZSA9IHNlY29uZHM7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBfdGhpczIucGxheWVyLm9uKCdidWZmZXJlZCcsIGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgICAgdmFyIHBlcmNlbnQgPSBfcmVmMi5wZXJjZW50O1xuXG4gICAgICAgICAgICBpZiAoX3RoaXMyLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5zZWNvbmRzTG9hZGVkID0gX3RoaXMyLmR1cmF0aW9uICogcGVyY2VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIF90aGlzMi5wbGF5ZXIuc2V0TG9vcChfdGhpczIucHJvcHMubG9vcCk7XG5cbiAgICAgICAgICBpZiAoX3RoaXMyLnByb3BzLm11dGVkKSB7XG4gICAgICAgICAgICBfdGhpczIucGxheWVyLm11dGUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzMi5wcm9wcy5vblJlYWR5KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgdGhpcy5wcm9wcy5vbkVycm9yKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGxheVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwbGF5Jyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInBhdXNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwYXVzZScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdG9wXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7Ly8gTm90aGluZyB0byBkb1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZWVrVG9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKHNlY29uZHMpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0Q3VycmVudFRpbWUnLCBzZWNvbmRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0Vm9sdW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZXRWb2x1bWUnLCBmcmFjdGlvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldExvb3BcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TG9vcChsb29wKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NldExvb3AnLCBsb29wKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RHVyYXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RHVyYXRpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5kdXJhdGlvbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q3VycmVudFRpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50VGltZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U2Vjb25kc0xvYWRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWNvbmRzTG9hZGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2Vjb25kc0xvYWRlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBzdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJSdcbiAgICAgIH07XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImlmcmFtZVwiLCB7XG4gICAgICAgIHJlZjogdGhpcy5yZWYsXG4gICAgICAgIHNyYzogdGhpcy5wcm9wcy51cmwsXG4gICAgICAgIGZyYW1lQm9yZGVyOiBcIjBcIixcbiAgICAgICAgc2Nyb2xsaW5nOiBcIm5vXCIsXG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgYWxsb3dGdWxsU2NyZWVuOiB0cnVlLFxuICAgICAgICBhbGxvdzogXCJlbmNyeXB0ZWQtbWVkaWFcIixcbiAgICAgICAgcmVmZXJyZXJQb2xpY3k6IFwibm8tcmVmZXJyZXItd2hlbi1kb3duZ3JhZGVcIlxuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEthbHR1cmE7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IEthbHR1cmE7XG5cbl9kZWZpbmVQcm9wZXJ0eShLYWx0dXJhLCBcImRpc3BsYXlOYW1lXCIsICdLYWx0dXJhJyk7XG5cbl9kZWZpbmVQcm9wZXJ0eShLYWx0dXJhLCBcImNhblBsYXlcIiwgX3BhdHRlcm5zLmNhblBsYXkua2FsdHVyYSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcblxudmFyIF9wYXR0ZXJucyA9IHJlcXVpcmUoXCIuLi9wYXR0ZXJuc1wiKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBTREtfVVJMID0gJ2h0dHBzOi8vd2lkZ2V0Lm1peGNsb3VkLmNvbS9tZWRpYS9qcy93aWRnZXRBcGkuanMnO1xudmFyIFNES19HTE9CQUwgPSAnTWl4Y2xvdWQnO1xuXG52YXIgTWl4Y2xvdWQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1peGNsb3VkLCBfQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKE1peGNsb3VkKTtcblxuICBmdW5jdGlvbiBNaXhjbG91ZCgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWl4Y2xvdWQpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjYWxsUGxheWVyXCIsIF91dGlscy5jYWxsUGxheWVyKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJkdXJhdGlvblwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjdXJyZW50VGltZVwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZWNvbmRzTG9hZGVkXCIsIG51bGwpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm11dGVcIiwgZnVuY3Rpb24gKCkgey8vIE5vIHZvbHVtZSBzdXBwb3J0XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwidW5tdXRlXCIsIGZ1bmN0aW9uICgpIHsvLyBObyB2b2x1bWUgc3VwcG9ydFxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlZlwiLCBmdW5jdGlvbiAoaWZyYW1lKSB7XG4gICAgICBfdGhpcy5pZnJhbWUgPSBpZnJhbWU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTWl4Y2xvdWQsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5wcm9wcy5vbk1vdW50ICYmIHRoaXMucHJvcHMub25Nb3VudCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKHVybCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICgwLCBfdXRpbHMuZ2V0U0RLKShTREtfVVJMLCBTREtfR0xPQkFMKS50aGVuKGZ1bmN0aW9uIChNaXhjbG91ZCkge1xuICAgICAgICBfdGhpczIucGxheWVyID0gTWl4Y2xvdWQuUGxheWVyV2lkZ2V0KF90aGlzMi5pZnJhbWUpO1xuXG4gICAgICAgIF90aGlzMi5wbGF5ZXIucmVhZHkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnBsYXllci5ldmVudHMucGxheS5vbihfdGhpczIucHJvcHMub25QbGF5KTtcblxuICAgICAgICAgIF90aGlzMi5wbGF5ZXIuZXZlbnRzLnBhdXNlLm9uKF90aGlzMi5wcm9wcy5vblBhdXNlKTtcblxuICAgICAgICAgIF90aGlzMi5wbGF5ZXIuZXZlbnRzLmVuZGVkLm9uKF90aGlzMi5wcm9wcy5vbkVuZGVkKTtcblxuICAgICAgICAgIF90aGlzMi5wbGF5ZXIuZXZlbnRzLmVycm9yLm9uKF90aGlzMi5wcm9wcy5lcnJvcik7XG5cbiAgICAgICAgICBfdGhpczIucGxheWVyLmV2ZW50cy5wcm9ncmVzcy5vbihmdW5jdGlvbiAoc2Vjb25kcywgZHVyYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzMi5jdXJyZW50VGltZSA9IHNlY29uZHM7XG4gICAgICAgICAgICBfdGhpczIuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIF90aGlzMi5wcm9wcy5vblJlYWR5KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgdGhpcy5wcm9wcy5vbkVycm9yKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGxheVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwbGF5Jyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInBhdXNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwYXVzZScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdG9wXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7Ly8gTm90aGluZyB0byBkb1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZWVrVG9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKHNlY29uZHMpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2VlaycsIHNlY29uZHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRWb2x1bWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Vm9sdW1lKGZyYWN0aW9uKSB7Ly8gTm8gdm9sdW1lIHN1cHBvcnRcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RHVyYXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RHVyYXRpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5kdXJhdGlvbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q3VycmVudFRpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50VGltZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U2Vjb25kc0xvYWRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWNvbmRzTG9hZGVkKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHVybCA9IF90aGlzJHByb3BzLnVybCxcbiAgICAgICAgICBjb25maWcgPSBfdGhpcyRwcm9wcy5jb25maWc7XG4gICAgICB2YXIgaWQgPSB1cmwubWF0Y2goX3BhdHRlcm5zLk1BVENIX1VSTF9NSVhDTE9VRClbMV07XG4gICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgICB9O1xuICAgICAgdmFyIHF1ZXJ5ID0gKDAsIF91dGlscy5xdWVyeVN0cmluZykoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjb25maWcub3B0aW9ucyksIHt9LCB7XG4gICAgICAgIGZlZWQ6IFwiL1wiLmNvbmNhdChpZCwgXCIvXCIpXG4gICAgICB9KSk7IC8vIFdlIGhhdmUgdG8gZ2l2ZSB0aGUgaWZyYW1lIGEga2V5IGhlcmUgdG8gcHJldmVudCBhXG4gICAgICAvLyB3ZWlyZCBkaWFsb2cgYXBwZWFyaW5nIHdoZW4gbG9hZGluZyBhIG5ldyB0cmFja1xuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImlmcmFtZVwiLCB7XG4gICAgICAgIGtleTogaWQsXG4gICAgICAgIHJlZjogdGhpcy5yZWYsXG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgc3JjOiBcImh0dHBzOi8vd3d3Lm1peGNsb3VkLmNvbS93aWRnZXQvaWZyYW1lLz9cIi5jb25jYXQocXVlcnkpLFxuICAgICAgICBmcmFtZUJvcmRlcjogXCIwXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNaXhjbG91ZDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gTWl4Y2xvdWQ7XG5cbl9kZWZpbmVQcm9wZXJ0eShNaXhjbG91ZCwgXCJkaXNwbGF5TmFtZVwiLCAnTWl4Y2xvdWQnKTtcblxuX2RlZmluZVByb3BlcnR5KE1peGNsb3VkLCBcImNhblBsYXlcIiwgX3BhdHRlcm5zLmNhblBsYXkubWl4Y2xvdWQpO1xuXG5fZGVmaW5lUHJvcGVydHkoTWl4Y2xvdWQsIFwibG9vcE9uRW5kZWRcIiwgdHJ1ZSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcblxudmFyIF9wYXR0ZXJucyA9IHJlcXVpcmUoXCIuLi9wYXR0ZXJuc1wiKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBTREtfVVJMID0gJ2h0dHBzOi8vdy5zb3VuZGNsb3VkLmNvbS9wbGF5ZXIvYXBpLmpzJztcbnZhciBTREtfR0xPQkFMID0gJ1NDJztcblxudmFyIFNvdW5kQ2xvdWQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNvdW5kQ2xvdWQsIF9Db21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoU291bmRDbG91ZCk7XG5cbiAgZnVuY3Rpb24gU291bmRDbG91ZCgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU291bmRDbG91ZCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNhbGxQbGF5ZXJcIiwgX3V0aWxzLmNhbGxQbGF5ZXIpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImR1cmF0aW9uXCIsIG51bGwpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImN1cnJlbnRUaW1lXCIsIG51bGwpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImZyYWN0aW9uTG9hZGVkXCIsIG51bGwpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm11dGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0Vm9sdW1lKDApO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInVubXV0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMudm9sdW1lICE9PSBudWxsKSB7XG4gICAgICAgIF90aGlzLnNldFZvbHVtZShfdGhpcy5wcm9wcy52b2x1bWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlZlwiLCBmdW5jdGlvbiAoaWZyYW1lKSB7XG4gICAgICBfdGhpcy5pZnJhbWUgPSBpZnJhbWU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU291bmRDbG91ZCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnByb3BzLm9uTW91bnQgJiYgdGhpcy5wcm9wcy5vbk1vdW50KHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQodXJsLCBpc1JlYWR5KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgKDAsIF91dGlscy5nZXRTREspKFNES19VUkwsIFNES19HTE9CQUwpLnRoZW4oZnVuY3Rpb24gKFNDKSB7XG4gICAgICAgIGlmICghX3RoaXMyLmlmcmFtZSkgcmV0dXJuO1xuICAgICAgICB2YXIgX1NDJFdpZGdldCRFdmVudHMgPSBTQy5XaWRnZXQuRXZlbnRzLFxuICAgICAgICAgICAgUExBWSA9IF9TQyRXaWRnZXQkRXZlbnRzLlBMQVksXG4gICAgICAgICAgICBQTEFZX1BST0dSRVNTID0gX1NDJFdpZGdldCRFdmVudHMuUExBWV9QUk9HUkVTUyxcbiAgICAgICAgICAgIFBBVVNFID0gX1NDJFdpZGdldCRFdmVudHMuUEFVU0UsXG4gICAgICAgICAgICBGSU5JU0ggPSBfU0MkV2lkZ2V0JEV2ZW50cy5GSU5JU0gsXG4gICAgICAgICAgICBFUlJPUiA9IF9TQyRXaWRnZXQkRXZlbnRzLkVSUk9SO1xuXG4gICAgICAgIGlmICghaXNSZWFkeSkge1xuICAgICAgICAgIF90aGlzMi5wbGF5ZXIgPSBTQy5XaWRnZXQoX3RoaXMyLmlmcmFtZSk7XG5cbiAgICAgICAgICBfdGhpczIucGxheWVyLmJpbmQoUExBWSwgX3RoaXMyLnByb3BzLm9uUGxheSk7XG5cbiAgICAgICAgICBfdGhpczIucGxheWVyLmJpbmQoUEFVU0UsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZW1haW5pbmcgPSBfdGhpczIuZHVyYXRpb24gLSBfdGhpczIuY3VycmVudFRpbWU7XG5cbiAgICAgICAgICAgIGlmIChyZW1haW5pbmcgPCAwLjA1KSB7XG4gICAgICAgICAgICAgIC8vIFByZXZlbnQgb25QYXVzZSBmaXJpbmcgcmlnaHQgYmVmb3JlIG9uRW5kZWRcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdGhpczIucHJvcHMub25QYXVzZSgpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgX3RoaXMyLnBsYXllci5iaW5kKFBMQVlfUFJPR1JFU1MsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBfdGhpczIuY3VycmVudFRpbWUgPSBlLmN1cnJlbnRQb3NpdGlvbiAvIDEwMDA7XG4gICAgICAgICAgICBfdGhpczIuZnJhY3Rpb25Mb2FkZWQgPSBlLmxvYWRlZFByb2dyZXNzO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgX3RoaXMyLnBsYXllci5iaW5kKEZJTklTSCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5wcm9wcy5vbkVuZGVkKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBfdGhpczIucGxheWVyLmJpbmQoRVJST1IsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLnByb3BzLm9uRXJyb3IoZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIucGxheWVyLmxvYWQodXJsLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIF90aGlzMi5wcm9wcy5jb25maWcub3B0aW9ucyksIHt9LCB7XG4gICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKCkge1xuICAgICAgICAgICAgX3RoaXMyLnBsYXllci5nZXREdXJhdGlvbihmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgX3RoaXMyLmR1cmF0aW9uID0gZHVyYXRpb24gLyAxMDAwO1xuXG4gICAgICAgICAgICAgIF90aGlzMi5wcm9wcy5vblJlYWR5KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwbGF5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BsYXknKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGF1c2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BhdXNlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHsvLyBOb3RoaW5nIHRvIGRvXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNlZWtUb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWVrVG8oc2Vjb25kcykge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZWVrVG8nLCBzZWNvbmRzICogMTAwMCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFZvbHVtZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUoZnJhY3Rpb24pIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0Vm9sdW1lJywgZnJhY3Rpb24gKiAxMDApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXREdXJhdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmR1cmF0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRDdXJyZW50VGltZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRUaW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTZWNvbmRzTG9hZGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlY29uZHNMb2FkZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5mcmFjdGlvbkxvYWRlZCAqIHRoaXMuZHVyYXRpb247XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgZGlzcGxheSA9IHRoaXMucHJvcHMuZGlzcGxheTtcbiAgICAgIHZhciBzdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIGRpc3BsYXk6IGRpc3BsYXlcbiAgICAgIH07XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImlmcmFtZVwiLCB7XG4gICAgICAgIHJlZjogdGhpcy5yZWYsXG4gICAgICAgIHNyYzogXCJodHRwczovL3cuc291bmRjbG91ZC5jb20vcGxheWVyLz91cmw9XCIuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLnByb3BzLnVybCkpLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIGZyYW1lQm9yZGVyOiAwLFxuICAgICAgICBhbGxvdzogXCJhdXRvcGxheVwiXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU291bmRDbG91ZDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gU291bmRDbG91ZDtcblxuX2RlZmluZVByb3BlcnR5KFNvdW5kQ2xvdWQsIFwiZGlzcGxheU5hbWVcIiwgJ1NvdW5kQ2xvdWQnKTtcblxuX2RlZmluZVByb3BlcnR5KFNvdW5kQ2xvdWQsIFwiY2FuUGxheVwiLCBfcGF0dGVybnMuY2FuUGxheS5zb3VuZGNsb3VkKTtcblxuX2RlZmluZVByb3BlcnR5KFNvdW5kQ2xvdWQsIFwibG9vcE9uRW5kZWRcIiwgdHJ1ZSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcblxudmFyIF9wYXR0ZXJucyA9IHJlcXVpcmUoXCIuLi9wYXR0ZXJuc1wiKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIFNES19VUkwgPSAnaHR0cHM6Ly9jZG4uZW1iZWQubHkvcGxheWVyLTAuMS4wLm1pbi5qcyc7XG52YXIgU0RLX0dMT0JBTCA9ICdwbGF5ZXJqcyc7XG5cbnZhciBTdHJlYW1hYmxlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTdHJlYW1hYmxlLCBfQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFN0cmVhbWFibGUpO1xuXG4gIGZ1bmN0aW9uIFN0cmVhbWFibGUoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0cmVhbWFibGUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjYWxsUGxheWVyXCIsIF91dGlscy5jYWxsUGxheWVyKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJkdXJhdGlvblwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjdXJyZW50VGltZVwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZWNvbmRzTG9hZGVkXCIsIG51bGwpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm11dGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FsbFBsYXllcignbXV0ZScpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInVubXV0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5jYWxsUGxheWVyKCd1bm11dGUnKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZWZcIiwgZnVuY3Rpb24gKGlmcmFtZSkge1xuICAgICAgX3RoaXMuaWZyYW1lID0gaWZyYW1lO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFN0cmVhbWFibGUsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5wcm9wcy5vbk1vdW50ICYmIHRoaXMucHJvcHMub25Nb3VudCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKHVybCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICgwLCBfdXRpbHMuZ2V0U0RLKShTREtfVVJMLCBTREtfR0xPQkFMKS50aGVuKGZ1bmN0aW9uIChwbGF5ZXJqcykge1xuICAgICAgICBpZiAoIV90aGlzMi5pZnJhbWUpIHJldHVybjtcbiAgICAgICAgX3RoaXMyLnBsYXllciA9IG5ldyBwbGF5ZXJqcy5QbGF5ZXIoX3RoaXMyLmlmcmFtZSk7XG5cbiAgICAgICAgX3RoaXMyLnBsYXllci5zZXRMb29wKF90aGlzMi5wcm9wcy5sb29wKTtcblxuICAgICAgICBfdGhpczIucGxheWVyLm9uKCdyZWFkeScsIF90aGlzMi5wcm9wcy5vblJlYWR5KTtcblxuICAgICAgICBfdGhpczIucGxheWVyLm9uKCdwbGF5JywgX3RoaXMyLnByb3BzLm9uUGxheSk7XG5cbiAgICAgICAgX3RoaXMyLnBsYXllci5vbigncGF1c2UnLCBfdGhpczIucHJvcHMub25QYXVzZSk7XG5cbiAgICAgICAgX3RoaXMyLnBsYXllci5vbignc2Vla2VkJywgX3RoaXMyLnByb3BzLm9uU2Vlayk7XG5cbiAgICAgICAgX3RoaXMyLnBsYXllci5vbignZW5kZWQnLCBfdGhpczIucHJvcHMub25FbmRlZCk7XG5cbiAgICAgICAgX3RoaXMyLnBsYXllci5vbignZXJyb3InLCBfdGhpczIucHJvcHMub25FcnJvcik7XG5cbiAgICAgICAgX3RoaXMyLnBsYXllci5vbigndGltZXVwZGF0ZScsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgdmFyIGR1cmF0aW9uID0gX3JlZi5kdXJhdGlvbixcbiAgICAgICAgICAgICAgc2Vjb25kcyA9IF9yZWYuc2Vjb25kcztcbiAgICAgICAgICBfdGhpczIuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgICBfdGhpczIuY3VycmVudFRpbWUgPSBzZWNvbmRzO1xuICAgICAgICB9KTtcblxuICAgICAgICBfdGhpczIucGxheWVyLm9uKCdidWZmZXJlZCcsIGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgIHZhciBwZXJjZW50ID0gX3JlZjIucGVyY2VudDtcblxuICAgICAgICAgIGlmIChfdGhpczIuZHVyYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzMi5zZWNvbmRzTG9hZGVkID0gX3RoaXMyLmR1cmF0aW9uICogcGVyY2VudDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChfdGhpczIucHJvcHMubXV0ZWQpIHtcbiAgICAgICAgICBfdGhpczIucGxheWVyLm11dGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcy5wcm9wcy5vbkVycm9yKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGxheVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwbGF5Jyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInBhdXNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwYXVzZScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdG9wXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7Ly8gTm90aGluZyB0byBkb1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZWVrVG9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKHNlY29uZHMpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0Q3VycmVudFRpbWUnLCBzZWNvbmRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0Vm9sdW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZXRWb2x1bWUnLCBmcmFjdGlvbiAqIDEwMCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldExvb3BcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TG9vcChsb29wKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NldExvb3AnLCBsb29wKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RHVyYXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RHVyYXRpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5kdXJhdGlvbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q3VycmVudFRpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50VGltZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U2Vjb25kc0xvYWRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWNvbmRzTG9hZGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2Vjb25kc0xvYWRlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBpZCA9IHRoaXMucHJvcHMudXJsLm1hdGNoKF9wYXR0ZXJucy5NQVRDSF9VUkxfU1RSRUFNQUJMRSlbMV07XG4gICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIiwge1xuICAgICAgICByZWY6IHRoaXMucmVmLFxuICAgICAgICBzcmM6IFwiaHR0cHM6Ly9zdHJlYW1hYmxlLmNvbS9vL1wiLmNvbmNhdChpZCksXG4gICAgICAgIGZyYW1lQm9yZGVyOiBcIjBcIixcbiAgICAgICAgc2Nyb2xsaW5nOiBcIm5vXCIsXG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgYWxsb3dGdWxsU2NyZWVuOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3RyZWFtYWJsZTtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gU3RyZWFtYWJsZTtcblxuX2RlZmluZVByb3BlcnR5KFN0cmVhbWFibGUsIFwiZGlzcGxheU5hbWVcIiwgJ1N0cmVhbWFibGUnKTtcblxuX2RlZmluZVByb3BlcnR5KFN0cmVhbWFibGUsIFwiY2FuUGxheVwiLCBfcGF0dGVybnMuY2FuUGxheS5zdHJlYW1hYmxlKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuXG52YXIgX3BhdHRlcm5zID0gcmVxdWlyZShcIi4uL3BhdHRlcm5zXCIpO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIFNES19VUkwgPSAnaHR0cHM6Ly9wbGF5ZXIudHdpdGNoLnR2L2pzL2VtYmVkL3YxLmpzJztcbnZhciBTREtfR0xPQkFMID0gJ1R3aXRjaCc7XG52YXIgUExBWUVSX0lEX1BSRUZJWCA9ICd0d2l0Y2gtcGxheWVyLSc7XG5cbnZhciBUd2l0Y2ggPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFR3aXRjaCwgX0NvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihUd2l0Y2gpO1xuXG4gIGZ1bmN0aW9uIFR3aXRjaCgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHdpdGNoKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY2FsbFBsYXllclwiLCBfdXRpbHMuY2FsbFBsYXllcik7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicGxheWVySURcIiwgX3RoaXMucHJvcHMuY29uZmlnLnBsYXllcklkIHx8IFwiXCIuY29uY2F0KFBMQVlFUl9JRF9QUkVGSVgpLmNvbmNhdCgoMCwgX3V0aWxzLnJhbmRvbVN0cmluZykoKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm11dGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FsbFBsYXllcignc2V0TXV0ZWQnLCB0cnVlKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ1bm11dGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FsbFBsYXllcignc2V0TXV0ZWQnLCBmYWxzZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVHdpdGNoLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMucHJvcHMub25Nb3VudCAmJiB0aGlzLnByb3BzLm9uTW91bnQodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxvYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZCh1cmwsIGlzUmVhZHkpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHBsYXlzaW5saW5lID0gX3RoaXMkcHJvcHMucGxheXNpbmxpbmUsXG4gICAgICAgICAgb25FcnJvciA9IF90aGlzJHByb3BzLm9uRXJyb3IsXG4gICAgICAgICAgY29uZmlnID0gX3RoaXMkcHJvcHMuY29uZmlnLFxuICAgICAgICAgIGNvbnRyb2xzID0gX3RoaXMkcHJvcHMuY29udHJvbHM7XG5cbiAgICAgIHZhciBpc0NoYW5uZWwgPSBfcGF0dGVybnMuTUFUQ0hfVVJMX1RXSVRDSF9DSEFOTkVMLnRlc3QodXJsKTtcblxuICAgICAgdmFyIGlkID0gaXNDaGFubmVsID8gdXJsLm1hdGNoKF9wYXR0ZXJucy5NQVRDSF9VUkxfVFdJVENIX0NIQU5ORUwpWzFdIDogdXJsLm1hdGNoKF9wYXR0ZXJucy5NQVRDSF9VUkxfVFdJVENIX1ZJREVPKVsxXTtcblxuICAgICAgaWYgKGlzUmVhZHkpIHtcbiAgICAgICAgaWYgKGlzQ2hhbm5lbCkge1xuICAgICAgICAgIHRoaXMucGxheWVyLnNldENoYW5uZWwoaWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucGxheWVyLnNldFZpZGVvKCd2JyArIGlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgKDAsIF91dGlscy5nZXRTREspKFNES19VUkwsIFNES19HTE9CQUwpLnRoZW4oZnVuY3Rpb24gKFR3aXRjaCkge1xuICAgICAgICBfdGhpczIucGxheWVyID0gbmV3IFR3aXRjaC5QbGF5ZXIoX3RoaXMyLnBsYXllcklELCBfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICB2aWRlbzogaXNDaGFubmVsID8gJycgOiBpZCxcbiAgICAgICAgICBjaGFubmVsOiBpc0NoYW5uZWwgPyBpZCA6ICcnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgcGxheXNpbmxpbmU6IHBsYXlzaW5saW5lLFxuICAgICAgICAgIGF1dG9wbGF5OiBfdGhpczIucHJvcHMucGxheWluZyxcbiAgICAgICAgICBtdXRlZDogX3RoaXMyLnByb3BzLm11dGVkLFxuICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Db29rUGV0ZS9yZWFjdC1wbGF5ZXIvaXNzdWVzLzczMyNpc3N1ZWNvbW1lbnQtNTQ5MDg1ODU5XG4gICAgICAgICAgY29udHJvbHM6IGlzQ2hhbm5lbCA/IHRydWUgOiBjb250cm9scyxcbiAgICAgICAgICB0aW1lOiAoMCwgX3V0aWxzLnBhcnNlU3RhcnRUaW1lKSh1cmwpXG4gICAgICAgIH0sIGNvbmZpZy5vcHRpb25zKSk7XG4gICAgICAgIHZhciBfVHdpdGNoJFBsYXllciA9IFR3aXRjaC5QbGF5ZXIsXG4gICAgICAgICAgICBSRUFEWSA9IF9Ud2l0Y2gkUGxheWVyLlJFQURZLFxuICAgICAgICAgICAgUExBWUlORyA9IF9Ud2l0Y2gkUGxheWVyLlBMQVlJTkcsXG4gICAgICAgICAgICBQQVVTRSA9IF9Ud2l0Y2gkUGxheWVyLlBBVVNFLFxuICAgICAgICAgICAgRU5ERUQgPSBfVHdpdGNoJFBsYXllci5FTkRFRCxcbiAgICAgICAgICAgIE9OTElORSA9IF9Ud2l0Y2gkUGxheWVyLk9OTElORSxcbiAgICAgICAgICAgIE9GRkxJTkUgPSBfVHdpdGNoJFBsYXllci5PRkZMSU5FO1xuXG4gICAgICAgIF90aGlzMi5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcihSRUFEWSwgX3RoaXMyLnByb3BzLm9uUmVhZHkpO1xuXG4gICAgICAgIF90aGlzMi5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcihQTEFZSU5HLCBfdGhpczIucHJvcHMub25QbGF5KTtcblxuICAgICAgICBfdGhpczIucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoUEFVU0UsIF90aGlzMi5wcm9wcy5vblBhdXNlKTtcblxuICAgICAgICBfdGhpczIucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoRU5ERUQsIF90aGlzMi5wcm9wcy5vbkVuZGVkKTsgLy8gUHJldmVudCB3ZWlyZCBpc0xvYWRpbmcgYmVoYXZpb3VyIHdoZW4gc3RyZWFtcyBhcmUgb2ZmbGluZVxuXG5cbiAgICAgICAgX3RoaXMyLnBsYXllci5hZGRFdmVudExpc3RlbmVyKE9OTElORSwgX3RoaXMyLnByb3BzLm9uTG9hZGVkKTtcblxuICAgICAgICBfdGhpczIucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoT0ZGTElORSwgX3RoaXMyLnByb3BzLm9uTG9hZGVkKTtcbiAgICAgIH0sIG9uRXJyb3IpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwbGF5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BsYXknKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGF1c2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BhdXNlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGF1c2UnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2Vla1RvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlZWtUbyhzZWNvbmRzKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NlZWsnLCBzZWNvbmRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0Vm9sdW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZXRWb2x1bWUnLCBmcmFjdGlvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldER1cmF0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldER1cmF0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsbFBsYXllcignZ2V0RHVyYXRpb24nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q3VycmVudFRpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxsUGxheWVyKCdnZXRDdXJyZW50VGltZScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTZWNvbmRzTG9hZGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlY29uZHNMb2FkZWQoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBzdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJSdcbiAgICAgIH07XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgaWQ6IHRoaXMucGxheWVySURcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUd2l0Y2g7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFR3aXRjaDtcblxuX2RlZmluZVByb3BlcnR5KFR3aXRjaCwgXCJkaXNwbGF5TmFtZVwiLCAnVHdpdGNoJyk7XG5cbl9kZWZpbmVQcm9wZXJ0eShUd2l0Y2gsIFwiY2FuUGxheVwiLCBfcGF0dGVybnMuY2FuUGxheS50d2l0Y2gpO1xuXG5fZGVmaW5lUHJvcGVydHkoVHdpdGNoLCBcImxvb3BPbkVuZGVkXCIsIHRydWUpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5cbnZhciBfcGF0dGVybnMgPSByZXF1aXJlKFwiLi4vcGF0dGVybnNcIik7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgU0RLX1VSTCA9ICdodHRwczovL3BsYXkudmlkeWFyZC5jb20vZW1iZWQvdjQuanMnO1xudmFyIFNES19HTE9CQUwgPSAnVmlkeWFyZFY0JztcbnZhciBTREtfR0xPQkFMX1JFQURZID0gJ29uVmlkeWFyZEFQSSc7XG5cbnZhciBWaWR5YXJkID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhWaWR5YXJkLCBfQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFZpZHlhcmQpO1xuXG4gIGZ1bmN0aW9uIFZpZHlhcmQoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZHlhcmQpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjYWxsUGxheWVyXCIsIF91dGlscy5jYWxsUGxheWVyKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJtdXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFZvbHVtZSgwKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ1bm11dGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnZvbHVtZSAhPT0gbnVsbCkge1xuICAgICAgICBfdGhpcy5zZXRWb2x1bWUoX3RoaXMucHJvcHMudm9sdW1lKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZWZcIiwgZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgICAgX3RoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFZpZHlhcmQsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5wcm9wcy5vbk1vdW50ICYmIHRoaXMucHJvcHMub25Nb3VudCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKHVybCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgcGxheWluZyA9IF90aGlzJHByb3BzLnBsYXlpbmcsXG4gICAgICAgICAgY29uZmlnID0gX3RoaXMkcHJvcHMuY29uZmlnLFxuICAgICAgICAgIG9uRXJyb3IgPSBfdGhpcyRwcm9wcy5vbkVycm9yLFxuICAgICAgICAgIG9uRHVyYXRpb24gPSBfdGhpcyRwcm9wcy5vbkR1cmF0aW9uO1xuICAgICAgdmFyIGlkID0gdXJsICYmIHVybC5tYXRjaChfcGF0dGVybnMuTUFUQ0hfVVJMX1ZJRFlBUkQpWzFdO1xuXG4gICAgICBpZiAodGhpcy5wbGF5ZXIpIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICB9XG5cbiAgICAgICgwLCBfdXRpbHMuZ2V0U0RLKShTREtfVVJMLCBTREtfR0xPQkFMLCBTREtfR0xPQkFMX1JFQURZKS50aGVuKGZ1bmN0aW9uIChWaWR5YXJkKSB7XG4gICAgICAgIGlmICghX3RoaXMyLmNvbnRhaW5lcikgcmV0dXJuO1xuICAgICAgICBWaWR5YXJkLmFwaS5hZGRSZWFkeUxpc3RlbmVyKGZ1bmN0aW9uIChkYXRhLCBwbGF5ZXIpIHtcbiAgICAgICAgICBfdGhpczIucGxheWVyID0gcGxheWVyO1xuXG4gICAgICAgICAgX3RoaXMyLnBsYXllci5vbigncmVhZHknLCBfdGhpczIucHJvcHMub25SZWFkeSk7XG5cbiAgICAgICAgICBfdGhpczIucGxheWVyLm9uKCdwbGF5JywgX3RoaXMyLnByb3BzLm9uUGxheSk7XG5cbiAgICAgICAgICBfdGhpczIucGxheWVyLm9uKCdwYXVzZScsIF90aGlzMi5wcm9wcy5vblBhdXNlKTtcblxuICAgICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ3NlZWsnLCBfdGhpczIucHJvcHMub25TZWVrKTtcblxuICAgICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ3BsYXllckNvbXBsZXRlJywgX3RoaXMyLnByb3BzLm9uRW5kZWQpO1xuICAgICAgICB9LCBpZCk7XG4gICAgICAgIFZpZHlhcmQuYXBpLnJlbmRlclBsYXllcihfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICB1dWlkOiBpZCxcbiAgICAgICAgICBjb250YWluZXI6IF90aGlzMi5jb250YWluZXIsXG4gICAgICAgICAgYXV0b3BsYXk6IHBsYXlpbmcgPyAxIDogMFxuICAgICAgICB9LCBjb25maWcub3B0aW9ucykpO1xuICAgICAgICBWaWR5YXJkLmFwaS5nZXRQbGF5ZXJNZXRhZGF0YShpZCkudGhlbihmdW5jdGlvbiAobWV0YSkge1xuICAgICAgICAgIF90aGlzMi5kdXJhdGlvbiA9IG1ldGEubGVuZ3RoX2luX3NlY29uZHM7XG4gICAgICAgICAgb25EdXJhdGlvbihtZXRhLmxlbmd0aF9pbl9zZWNvbmRzKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBvbkVycm9yKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGxheVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwbGF5Jyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInBhdXNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwYXVzZScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdG9wXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB3aW5kb3cuVmlkeWFyZFY0LmFwaS5kZXN0cm95UGxheWVyKHRoaXMucGxheWVyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2Vla1RvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlZWtUbyhhbW91bnQpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2VlaycsIGFtb3VudCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFZvbHVtZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUoZnJhY3Rpb24pIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0Vm9sdW1lJywgZnJhY3Rpb24pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRQbGF5YmFja1JhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UGxheWJhY2tSYXRlKHJhdGUpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0UGxheWJhY2tTcGVlZCcsIHJhdGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXREdXJhdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmR1cmF0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRDdXJyZW50VGltZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ2N1cnJlbnRUaW1lJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFNlY29uZHNMb2FkZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGRpc3BsYXkgPSB0aGlzLnByb3BzLmRpc3BsYXk7XG4gICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICBkaXNwbGF5OiBkaXNwbGF5XG4gICAgICB9O1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICByZWY6IHRoaXMucmVmXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFZpZHlhcmQ7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFZpZHlhcmQ7XG5cbl9kZWZpbmVQcm9wZXJ0eShWaWR5YXJkLCBcImRpc3BsYXlOYW1lXCIsICdWaWR5YXJkJyk7XG5cbl9kZWZpbmVQcm9wZXJ0eShWaWR5YXJkLCBcImNhblBsYXlcIiwgX3BhdHRlcm5zLmNhblBsYXkudmlkeWFyZCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcblxudmFyIF9wYXR0ZXJucyA9IHJlcXVpcmUoXCIuLi9wYXR0ZXJuc1wiKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBTREtfVVJMID0gJ2h0dHBzOi8vcGxheWVyLnZpbWVvLmNvbS9hcGkvcGxheWVyLmpzJztcbnZhciBTREtfR0xPQkFMID0gJ1ZpbWVvJztcblxudmFyIFZpbWVvID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhWaW1lbywgX0NvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihWaW1lbyk7XG5cbiAgZnVuY3Rpb24gVmltZW8oKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpbWVvKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY2FsbFBsYXllclwiLCBfdXRpbHMuY2FsbFBsYXllcik7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZHVyYXRpb25cIiwgbnVsbCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY3VycmVudFRpbWVcIiwgbnVsbCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2Vjb25kc0xvYWRlZFwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJtdXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFZvbHVtZSgwKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ1bm11dGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnZvbHVtZSAhPT0gbnVsbCkge1xuICAgICAgICBfdGhpcy5zZXRWb2x1bWUoX3RoaXMucHJvcHMudm9sdW1lKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZWZcIiwgZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgICAgX3RoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFZpbWVvLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMucHJvcHMub25Nb3VudCAmJiB0aGlzLnByb3BzLm9uTW91bnQodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxvYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZCh1cmwpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLmR1cmF0aW9uID0gbnVsbDtcbiAgICAgICgwLCBfdXRpbHMuZ2V0U0RLKShTREtfVVJMLCBTREtfR0xPQkFMKS50aGVuKGZ1bmN0aW9uIChWaW1lbykge1xuICAgICAgICBpZiAoIV90aGlzMi5jb250YWluZXIpIHJldHVybjtcbiAgICAgICAgX3RoaXMyLnBsYXllciA9IG5ldyBWaW1lby5QbGF5ZXIoX3RoaXMyLmNvbnRhaW5lciwgX29iamVjdFNwcmVhZCh7XG4gICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgYXV0b3BsYXk6IF90aGlzMi5wcm9wcy5wbGF5aW5nLFxuICAgICAgICAgIG11dGVkOiBfdGhpczIucHJvcHMubXV0ZWQsXG4gICAgICAgICAgbG9vcDogX3RoaXMyLnByb3BzLmxvb3AsXG4gICAgICAgICAgcGxheXNpbmxpbmU6IF90aGlzMi5wcm9wcy5wbGF5c2lubGluZSxcbiAgICAgICAgICBjb250cm9sczogX3RoaXMyLnByb3BzLmNvbnRyb2xzXG4gICAgICAgIH0sIF90aGlzMi5wcm9wcy5jb25maWcucGxheWVyT3B0aW9ucykpO1xuXG4gICAgICAgIF90aGlzMi5wbGF5ZXIucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgaWZyYW1lID0gX3RoaXMyLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdpZnJhbWUnKTtcblxuICAgICAgICAgIGlmcmFtZS5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgICBpZnJhbWUuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICB9KVtcImNhdGNoXCJdKF90aGlzMi5wcm9wcy5vbkVycm9yKTtcblxuICAgICAgICBfdGhpczIucGxheWVyLm9uKCdsb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uUmVhZHkoKTtcblxuICAgICAgICAgIF90aGlzMi5yZWZyZXNoRHVyYXRpb24oKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXMyLnBsYXllci5vbigncGxheScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25QbGF5KCk7XG5cbiAgICAgICAgICBfdGhpczIucmVmcmVzaER1cmF0aW9uKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ3BhdXNlJywgX3RoaXMyLnByb3BzLm9uUGF1c2UpO1xuXG4gICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ3NlZWtlZCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5wcm9wcy5vblNlZWsoZS5zZWNvbmRzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXMyLnBsYXllci5vbignZW5kZWQnLCBfdGhpczIucHJvcHMub25FbmRlZCk7XG5cbiAgICAgICAgX3RoaXMyLnBsYXllci5vbignZXJyb3InLCBfdGhpczIucHJvcHMub25FcnJvcik7XG5cbiAgICAgICAgX3RoaXMyLnBsYXllci5vbigndGltZXVwZGF0ZScsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgdmFyIHNlY29uZHMgPSBfcmVmLnNlY29uZHM7XG4gICAgICAgICAgX3RoaXMyLmN1cnJlbnRUaW1lID0gc2Vjb25kcztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXMyLnBsYXllci5vbigncHJvZ3Jlc3MnLCBmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgICB2YXIgc2Vjb25kcyA9IF9yZWYyLnNlY29uZHM7XG4gICAgICAgICAgX3RoaXMyLnNlY29uZHNMb2FkZWQgPSBzZWNvbmRzO1xuICAgICAgICB9KTtcblxuICAgICAgICBfdGhpczIucGxheWVyLm9uKCdidWZmZXJzdGFydCcsIF90aGlzMi5wcm9wcy5vbkJ1ZmZlcik7XG5cbiAgICAgICAgX3RoaXMyLnBsYXllci5vbignYnVmZmVyZW5kJywgX3RoaXMyLnByb3BzLm9uQnVmZmVyRW5kKTtcbiAgICAgIH0sIHRoaXMucHJvcHMub25FcnJvcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlZnJlc2hEdXJhdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWZyZXNoRHVyYXRpb24oKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdGhpcy5wbGF5ZXIuZ2V0RHVyYXRpb24oKS50aGVuKGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgICAgICBfdGhpczMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwbGF5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuY2FsbFBsYXllcigncGxheScpO1xuXG4gICAgICBpZiAocHJvbWlzZSkge1xuICAgICAgICBwcm9taXNlW1wiY2F0Y2hcIl0odGhpcy5wcm9wcy5vbkVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGF1c2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BhdXNlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigndW5sb2FkJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNlZWtUb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWVrVG8oc2Vjb25kcykge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZXRDdXJyZW50VGltZScsIHNlY29uZHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRWb2x1bWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Vm9sdW1lKGZyYWN0aW9uKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NldFZvbHVtZScsIGZyYWN0aW9uKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0TG9vcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMb29wKGxvb3ApIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0TG9vcCcsIGxvb3ApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRQbGF5YmFja1JhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UGxheWJhY2tSYXRlKHJhdGUpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0UGxheWJhY2tSYXRlJywgcmF0ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldER1cmF0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldER1cmF0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZHVyYXRpb247XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEN1cnJlbnRUaW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFRpbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFNlY29uZHNMb2FkZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlY29uZHNMb2FkZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgZGlzcGxheSA9IHRoaXMucHJvcHMuZGlzcGxheTtcbiAgICAgIHZhciBzdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgZGlzcGxheTogZGlzcGxheVxuICAgICAgfTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAga2V5OiB0aGlzLnByb3BzLnVybCxcbiAgICAgICAgcmVmOiB0aGlzLnJlZixcbiAgICAgICAgc3R5bGU6IHN0eWxlXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVmltZW87XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFZpbWVvO1xuXG5fZGVmaW5lUHJvcGVydHkoVmltZW8sIFwiZGlzcGxheU5hbWVcIiwgJ1ZpbWVvJyk7XG5cbl9kZWZpbmVQcm9wZXJ0eShWaW1lbywgXCJjYW5QbGF5XCIsIF9wYXR0ZXJucy5jYW5QbGF5LnZpbWVvKTtcblxuX2RlZmluZVByb3BlcnR5KFZpbWVvLCBcImZvcmNlTG9hZFwiLCB0cnVlKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuXG52YXIgX3BhdHRlcm5zID0gcmVxdWlyZShcIi4uL3BhdHRlcm5zXCIpO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIFNES19VUkwgPSAnaHR0cHM6Ly9mYXN0Lndpc3RpYS5jb20vYXNzZXRzL2V4dGVybmFsL0UtdjEuanMnO1xudmFyIFNES19HTE9CQUwgPSAnV2lzdGlhJztcbnZhciBQTEFZRVJfSURfUFJFRklYID0gJ3dpc3RpYS1wbGF5ZXItJztcblxudmFyIFdpc3RpYSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoV2lzdGlhLCBfQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFdpc3RpYSk7XG5cbiAgZnVuY3Rpb24gV2lzdGlhKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXaXN0aWEpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF9hcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgX2FyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoX2FyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjYWxsUGxheWVyXCIsIF91dGlscy5jYWxsUGxheWVyKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwbGF5ZXJJRFwiLCBfdGhpcy5wcm9wcy5jb25maWcucGxheWVySWQgfHwgXCJcIi5jb25jYXQoUExBWUVSX0lEX1BSRUZJWCkuY29uY2F0KCgwLCBfdXRpbHMucmFuZG9tU3RyaW5nKSgpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25QbGF5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcztcblxuICAgICAgcmV0dXJuIChfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzKS5vblBsYXkuYXBwbHkoX3RoaXMkcHJvcHMsIGFyZ3VtZW50cyk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25QYXVzZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyO1xuXG4gICAgICByZXR1cm4gKF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzKS5vblBhdXNlLmFwcGx5KF90aGlzJHByb3BzMiwgYXJndW1lbnRzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvblNlZWtcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMztcblxuICAgICAgcmV0dXJuIChfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcykub25TZWVrLmFwcGx5KF90aGlzJHByb3BzMywgYXJndW1lbnRzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbkVuZGVkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczQ7XG5cbiAgICAgIHJldHVybiAoX3RoaXMkcHJvcHM0ID0gX3RoaXMucHJvcHMpLm9uRW5kZWQuYXBwbHkoX3RoaXMkcHJvcHM0LCBhcmd1bWVudHMpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm11dGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FsbFBsYXllcignbXV0ZScpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInVubXV0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5jYWxsUGxheWVyKCd1bm11dGUnKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhXaXN0aWEsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5wcm9wcy5vbk1vdW50ICYmIHRoaXMucHJvcHMub25Nb3VudCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKHVybCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczUgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHBsYXlpbmcgPSBfdGhpcyRwcm9wczUucGxheWluZyxcbiAgICAgICAgICBtdXRlZCA9IF90aGlzJHByb3BzNS5tdXRlZCxcbiAgICAgICAgICBjb250cm9scyA9IF90aGlzJHByb3BzNS5jb250cm9scyxcbiAgICAgICAgICBfb25SZWFkeSA9IF90aGlzJHByb3BzNS5vblJlYWR5LFxuICAgICAgICAgIGNvbmZpZyA9IF90aGlzJHByb3BzNS5jb25maWcsXG4gICAgICAgICAgb25FcnJvciA9IF90aGlzJHByb3BzNS5vbkVycm9yO1xuICAgICAgKDAsIF91dGlscy5nZXRTREspKFNES19VUkwsIFNES19HTE9CQUwpLnRoZW4oZnVuY3Rpb24gKFdpc3RpYSkge1xuICAgICAgICBpZiAoY29uZmlnLmN1c3RvbUNvbnRyb2xzKSB7XG4gICAgICAgICAgY29uZmlnLmN1c3RvbUNvbnRyb2xzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2wpIHtcbiAgICAgICAgICAgIHJldHVybiBXaXN0aWEuZGVmaW5lQ29udHJvbChjb250cm9sKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdpbmRvdy5fd3EgPSB3aW5kb3cuX3dxIHx8IFtdO1xuXG4gICAgICAgIHdpbmRvdy5fd3EucHVzaCh7XG4gICAgICAgICAgaWQ6IF90aGlzMi5wbGF5ZXJJRCxcbiAgICAgICAgICBvcHRpb25zOiBfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICAgIGF1dG9QbGF5OiBwbGF5aW5nLFxuICAgICAgICAgICAgc2lsZW50QXV0b1BsYXk6ICdhbGxvdycsXG4gICAgICAgICAgICBtdXRlZDogbXV0ZWQsXG4gICAgICAgICAgICBjb250cm9sc1Zpc2libGVPbkxvYWQ6IGNvbnRyb2xzLFxuICAgICAgICAgICAgZnVsbHNjcmVlbkJ1dHRvbjogY29udHJvbHMsXG4gICAgICAgICAgICBwbGF5YmFyOiBjb250cm9scyxcbiAgICAgICAgICAgIHBsYXliYWNrUmF0ZUNvbnRyb2w6IGNvbnRyb2xzLFxuICAgICAgICAgICAgcXVhbGl0eUNvbnRyb2w6IGNvbnRyb2xzLFxuICAgICAgICAgICAgdm9sdW1lQ29udHJvbDogY29udHJvbHMsXG4gICAgICAgICAgICBzZXR0aW5nc0NvbnRyb2w6IGNvbnRyb2xzLFxuICAgICAgICAgICAgc21hbGxQbGF5QnV0dG9uOiBjb250cm9sc1xuICAgICAgICAgIH0sIGNvbmZpZy5vcHRpb25zKSxcbiAgICAgICAgICBvblJlYWR5OiBmdW5jdGlvbiBvblJlYWR5KHBsYXllcikge1xuICAgICAgICAgICAgX3RoaXMyLnBsYXllciA9IHBsYXllcjtcblxuICAgICAgICAgICAgX3RoaXMyLnVuYmluZCgpO1xuXG4gICAgICAgICAgICBfdGhpczIucGxheWVyLmJpbmQoJ3BsYXknLCBfdGhpczIub25QbGF5KTtcblxuICAgICAgICAgICAgX3RoaXMyLnBsYXllci5iaW5kKCdwYXVzZScsIF90aGlzMi5vblBhdXNlKTtcblxuICAgICAgICAgICAgX3RoaXMyLnBsYXllci5iaW5kKCdzZWVrJywgX3RoaXMyLm9uU2Vlayk7XG5cbiAgICAgICAgICAgIF90aGlzMi5wbGF5ZXIuYmluZCgnZW5kJywgX3RoaXMyLm9uRW5kZWQpO1xuXG4gICAgICAgICAgICBfb25SZWFkeSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LCBvbkVycm9yKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidW5iaW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICAgIHRoaXMucGxheWVyLnVuYmluZCgncGxheScsIHRoaXMub25QbGF5KTtcbiAgICAgIHRoaXMucGxheWVyLnVuYmluZCgncGF1c2UnLCB0aGlzLm9uUGF1c2UpO1xuICAgICAgdGhpcy5wbGF5ZXIudW5iaW5kKCdzZWVrJywgdGhpcy5vblNlZWspO1xuICAgICAgdGhpcy5wbGF5ZXIudW5iaW5kKCdlbmQnLCB0aGlzLm9uRW5kZWQpO1xuICAgIH0gLy8gUHJveHkgbWV0aG9kcyB0byBwcmV2ZW50IGxpc3RlbmVyIGxlYWtzXG5cbiAgfSwge1xuICAgIGtleTogXCJwbGF5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BsYXknKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGF1c2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BhdXNlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0b3BcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3JlbW92ZScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZWVrVG9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKHNlY29uZHMpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigndGltZScsIHNlY29uZHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRWb2x1bWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Vm9sdW1lKGZyYWN0aW9uKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3ZvbHVtZScsIGZyYWN0aW9uKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0UGxheWJhY2tSYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFBsYXliYWNrUmF0ZShyYXRlKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BsYXliYWNrUmF0ZScsIHJhdGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXREdXJhdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ2R1cmF0aW9uJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEN1cnJlbnRUaW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsbFBsYXllcigndGltZScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTZWNvbmRzTG9hZGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlY29uZHNMb2FkZWQoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciB1cmwgPSB0aGlzLnByb3BzLnVybDtcbiAgICAgIHZhciB2aWRlb0lEID0gdXJsICYmIHVybC5tYXRjaChfcGF0dGVybnMuTUFUQ0hfVVJMX1dJU1RJQSlbMV07XG4gICAgICB2YXIgY2xhc3NOYW1lID0gXCJ3aXN0aWFfZW1iZWQgd2lzdGlhX2FzeW5jX1wiLmNvbmNhdCh2aWRlb0lEKTtcbiAgICAgIHZhciBzdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJSdcbiAgICAgIH07XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGlkOiB0aGlzLnBsYXllcklELFxuICAgICAgICBrZXk6IHZpZGVvSUQsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBXaXN0aWE7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFdpc3RpYTtcblxuX2RlZmluZVByb3BlcnR5KFdpc3RpYSwgXCJkaXNwbGF5TmFtZVwiLCAnV2lzdGlhJyk7XG5cbl9kZWZpbmVQcm9wZXJ0eShXaXN0aWEsIFwiY2FuUGxheVwiLCBfcGF0dGVybnMuY2FuUGxheS53aXN0aWEpO1xuXG5fZGVmaW5lUHJvcGVydHkoV2lzdGlhLCBcImxvb3BPbkVuZGVkXCIsIHRydWUpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5cbnZhciBfcGF0dGVybnMgPSByZXF1aXJlKFwiLi4vcGF0dGVybnNcIik7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgU0RLX1VSTCA9ICdodHRwczovL3d3dy55b3V0dWJlLmNvbS9pZnJhbWVfYXBpJztcbnZhciBTREtfR0xPQkFMID0gJ1lUJztcbnZhciBTREtfR0xPQkFMX1JFQURZID0gJ29uWW91VHViZUlmcmFtZUFQSVJlYWR5JztcbnZhciBNQVRDSF9QTEFZTElTVCA9IC9bPyZdKD86bGlzdHxjaGFubmVsKT0oW2EtekEtWjAtOV8tXSspLztcbnZhciBNQVRDSF9VU0VSX1VQTE9BRFMgPSAvdXNlclxcLyhbYS16QS1aMC05Xy1dKylcXC8/LztcbnZhciBNQVRDSF9OT0NPT0tJRSA9IC95b3V0dWJlLW5vY29va2llXFwuY29tLztcbnZhciBOT0NPT0tJRV9IT1NUID0gJ2h0dHBzOi8vd3d3LnlvdXR1YmUtbm9jb29raWUuY29tJztcblxudmFyIFlvdVR1YmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFlvdVR1YmUsIF9Db21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoWW91VHViZSk7XG5cbiAgZnVuY3Rpb24gWW91VHViZSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgWW91VHViZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNhbGxQbGF5ZXJcIiwgX3V0aWxzLmNhbGxQbGF5ZXIpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInBhcnNlUGxheWxpc3RcIiwgZnVuY3Rpb24gKHVybCkge1xuICAgICAgaWYgKHVybCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGlzdFR5cGU6ICdwbGF5bGlzdCcsXG4gICAgICAgICAgcGxheWxpc3Q6IHVybC5tYXAoX3RoaXMuZ2V0SUQpLmpvaW4oJywnKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAoTUFUQ0hfUExBWUxJU1QudGVzdCh1cmwpKSB7XG4gICAgICAgIHZhciBfdXJsJG1hdGNoID0gdXJsLm1hdGNoKE1BVENIX1BMQVlMSVNUKSxcbiAgICAgICAgICAgIF91cmwkbWF0Y2gyID0gX3NsaWNlZFRvQXJyYXkoX3VybCRtYXRjaCwgMiksXG4gICAgICAgICAgICBwbGF5bGlzdElkID0gX3VybCRtYXRjaDJbMV07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsaXN0VHlwZTogJ3BsYXlsaXN0JyxcbiAgICAgICAgICBsaXN0OiBwbGF5bGlzdElkLnJlcGxhY2UoL15VQy8sICdVVScpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChNQVRDSF9VU0VSX1VQTE9BRFMudGVzdCh1cmwpKSB7XG4gICAgICAgIHZhciBfdXJsJG1hdGNoMyA9IHVybC5tYXRjaChNQVRDSF9VU0VSX1VQTE9BRFMpLFxuICAgICAgICAgICAgX3VybCRtYXRjaDQgPSBfc2xpY2VkVG9BcnJheShfdXJsJG1hdGNoMywgMiksXG4gICAgICAgICAgICB1c2VybmFtZSA9IF91cmwkbWF0Y2g0WzFdO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGlzdFR5cGU6ICd1c2VyX3VwbG9hZHMnLFxuICAgICAgICAgIGxpc3Q6IHVzZXJuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7fTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvblN0YXRlQ2hhbmdlXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGRhdGEgPSBldmVudC5kYXRhO1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25QbGF5ID0gX3RoaXMkcHJvcHMub25QbGF5LFxuICAgICAgICAgIG9uUGF1c2UgPSBfdGhpcyRwcm9wcy5vblBhdXNlLFxuICAgICAgICAgIG9uQnVmZmVyID0gX3RoaXMkcHJvcHMub25CdWZmZXIsXG4gICAgICAgICAgb25CdWZmZXJFbmQgPSBfdGhpcyRwcm9wcy5vbkJ1ZmZlckVuZCxcbiAgICAgICAgICBvbkVuZGVkID0gX3RoaXMkcHJvcHMub25FbmRlZCxcbiAgICAgICAgICBvblJlYWR5ID0gX3RoaXMkcHJvcHMub25SZWFkeSxcbiAgICAgICAgICBsb29wID0gX3RoaXMkcHJvcHMubG9vcCxcbiAgICAgICAgICBfdGhpcyRwcm9wcyRjb25maWcgPSBfdGhpcyRwcm9wcy5jb25maWcsXG4gICAgICAgICAgcGxheWVyVmFycyA9IF90aGlzJHByb3BzJGNvbmZpZy5wbGF5ZXJWYXJzLFxuICAgICAgICAgIG9uVW5zdGFydGVkID0gX3RoaXMkcHJvcHMkY29uZmlnLm9uVW5zdGFydGVkO1xuICAgICAgdmFyIF93aW5kb3ckU0RLX0dMT0JBTCRQbCA9IHdpbmRvd1tTREtfR0xPQkFMXS5QbGF5ZXJTdGF0ZSxcbiAgICAgICAgICBVTlNUQVJURUQgPSBfd2luZG93JFNES19HTE9CQUwkUGwuVU5TVEFSVEVELFxuICAgICAgICAgIFBMQVlJTkcgPSBfd2luZG93JFNES19HTE9CQUwkUGwuUExBWUlORyxcbiAgICAgICAgICBQQVVTRUQgPSBfd2luZG93JFNES19HTE9CQUwkUGwuUEFVU0VELFxuICAgICAgICAgIEJVRkZFUklORyA9IF93aW5kb3ckU0RLX0dMT0JBTCRQbC5CVUZGRVJJTkcsXG4gICAgICAgICAgRU5ERUQgPSBfd2luZG93JFNES19HTE9CQUwkUGwuRU5ERUQsXG4gICAgICAgICAgQ1VFRCA9IF93aW5kb3ckU0RLX0dMT0JBTCRQbC5DVUVEO1xuICAgICAgaWYgKGRhdGEgPT09IFVOU1RBUlRFRCkgb25VbnN0YXJ0ZWQoKTtcblxuICAgICAgaWYgKGRhdGEgPT09IFBMQVlJTkcpIHtcbiAgICAgICAgb25QbGF5KCk7XG4gICAgICAgIG9uQnVmZmVyRW5kKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhID09PSBQQVVTRUQpIG9uUGF1c2UoKTtcbiAgICAgIGlmIChkYXRhID09PSBCVUZGRVJJTkcpIG9uQnVmZmVyKCk7XG5cbiAgICAgIGlmIChkYXRhID09PSBFTkRFRCkge1xuICAgICAgICB2YXIgaXNQbGF5bGlzdCA9ICEhX3RoaXMuY2FsbFBsYXllcignZ2V0UGxheWxpc3QnKTsgLy8gT25seSBsb29wIG1hbnVhbGx5IGlmIG5vdCBwbGF5aW5nIGEgcGxheWxpc3RcblxuICAgICAgICBpZiAobG9vcCAmJiAhaXNQbGF5bGlzdCkge1xuICAgICAgICAgIGlmIChwbGF5ZXJWYXJzLnN0YXJ0KSB7XG4gICAgICAgICAgICBfdGhpcy5zZWVrVG8ocGxheWVyVmFycy5zdGFydCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLnBsYXkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvbkVuZGVkKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhID09PSBDVUVEKSBvblJlYWR5KCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwibXV0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5jYWxsUGxheWVyKCdtdXRlJyk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwidW5tdXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNhbGxQbGF5ZXIoJ3VuTXV0ZScpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlZlwiLCBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG4gICAgICBfdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoWW91VHViZSwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnByb3BzLm9uTW91bnQgJiYgdGhpcy5wcm9wcy5vbk1vdW50KHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRJRFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJRCh1cmwpIHtcbiAgICAgIGlmICghdXJsIHx8IHVybCBpbnN0YW5jZW9mIEFycmF5IHx8IE1BVENIX1BMQVlMSVNULnRlc3QodXJsKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVybC5tYXRjaChfcGF0dGVybnMuTUFUQ0hfVVJMX1lPVVRVQkUpWzFdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQodXJsLCBpc1JlYWR5KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgcGxheWluZyA9IF90aGlzJHByb3BzMi5wbGF5aW5nLFxuICAgICAgICAgIG11dGVkID0gX3RoaXMkcHJvcHMyLm11dGVkLFxuICAgICAgICAgIHBsYXlzaW5saW5lID0gX3RoaXMkcHJvcHMyLnBsYXlzaW5saW5lLFxuICAgICAgICAgIGNvbnRyb2xzID0gX3RoaXMkcHJvcHMyLmNvbnRyb2xzLFxuICAgICAgICAgIGxvb3AgPSBfdGhpcyRwcm9wczIubG9vcCxcbiAgICAgICAgICBjb25maWcgPSBfdGhpcyRwcm9wczIuY29uZmlnLFxuICAgICAgICAgIF9vbkVycm9yID0gX3RoaXMkcHJvcHMyLm9uRXJyb3I7XG4gICAgICB2YXIgcGxheWVyVmFycyA9IGNvbmZpZy5wbGF5ZXJWYXJzLFxuICAgICAgICAgIGVtYmVkT3B0aW9ucyA9IGNvbmZpZy5lbWJlZE9wdGlvbnM7XG4gICAgICB2YXIgaWQgPSB0aGlzLmdldElEKHVybCk7XG5cbiAgICAgIGlmIChpc1JlYWR5KSB7XG4gICAgICAgIGlmIChNQVRDSF9QTEFZTElTVC50ZXN0KHVybCkgfHwgTUFUQ0hfVVNFUl9VUExPQURTLnRlc3QodXJsKSB8fCB1cmwgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgIHRoaXMucGxheWVyLmxvYWRQbGF5bGlzdCh0aGlzLnBhcnNlUGxheWxpc3QodXJsKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wbGF5ZXIuY3VlVmlkZW9CeUlkKHtcbiAgICAgICAgICB2aWRlb0lkOiBpZCxcbiAgICAgICAgICBzdGFydFNlY29uZHM6ICgwLCBfdXRpbHMucGFyc2VTdGFydFRpbWUpKHVybCkgfHwgcGxheWVyVmFycy5zdGFydCxcbiAgICAgICAgICBlbmRTZWNvbmRzOiAoMCwgX3V0aWxzLnBhcnNlRW5kVGltZSkodXJsKSB8fCBwbGF5ZXJWYXJzLmVuZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAoMCwgX3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCwgU0RLX0dMT0JBTF9SRUFEWSwgZnVuY3Rpb24gKFlUKSB7XG4gICAgICAgIHJldHVybiBZVC5sb2FkZWQ7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChZVCkge1xuICAgICAgICBpZiAoIV90aGlzMi5jb250YWluZXIpIHJldHVybjtcbiAgICAgICAgX3RoaXMyLnBsYXllciA9IG5ldyBZVC5QbGF5ZXIoX3RoaXMyLmNvbnRhaW5lciwgX29iamVjdFNwcmVhZCh7XG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICB2aWRlb0lkOiBpZCxcbiAgICAgICAgICBwbGF5ZXJWYXJzOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAgICAgYXV0b3BsYXk6IHBsYXlpbmcgPyAxIDogMCxcbiAgICAgICAgICAgIG11dGU6IG11dGVkID8gMSA6IDAsXG4gICAgICAgICAgICBjb250cm9sczogY29udHJvbHMgPyAxIDogMCxcbiAgICAgICAgICAgIHN0YXJ0OiAoMCwgX3V0aWxzLnBhcnNlU3RhcnRUaW1lKSh1cmwpLFxuICAgICAgICAgICAgZW5kOiAoMCwgX3V0aWxzLnBhcnNlRW5kVGltZSkodXJsKSxcbiAgICAgICAgICAgIG9yaWdpbjogd2luZG93LmxvY2F0aW9uLm9yaWdpbixcbiAgICAgICAgICAgIHBsYXlzaW5saW5lOiBwbGF5c2lubGluZSA/IDEgOiAwXG4gICAgICAgICAgfSwgX3RoaXMyLnBhcnNlUGxheWxpc3QodXJsKSksIHBsYXllclZhcnMpLFxuICAgICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgb25SZWFkeTogZnVuY3Rpb24gb25SZWFkeSgpIHtcbiAgICAgICAgICAgICAgaWYgKGxvb3ApIHtcbiAgICAgICAgICAgICAgICBfdGhpczIucGxheWVyLnNldExvb3AodHJ1ZSk7IC8vIEVuYWJsZSBwbGF5bGlzdCBsb29waW5nXG5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIF90aGlzMi5wcm9wcy5vblJlYWR5KCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25TdGF0ZUNoYW5nZTogX3RoaXMyLm9uU3RhdGVDaGFuZ2UsXG4gICAgICAgICAgICBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKGV2ZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBfb25FcnJvcihldmVudC5kYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGhvc3Q6IE1BVENIX05PQ09PS0lFLnRlc3QodXJsKSA/IE5PQ09PS0lFX0hPU1QgOiB1bmRlZmluZWRcbiAgICAgICAgfSwgZW1iZWRPcHRpb25zKSk7XG4gICAgICB9LCBfb25FcnJvcik7XG5cbiAgICAgIGlmIChlbWJlZE9wdGlvbnMuZXZlbnRzKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignVXNpbmcgYGVtYmVkT3B0aW9ucy5ldmVudHNgIHdpbGwgbGlrZWx5IGJyZWFrIHRoaW5ncy4gVXNlIFJlYWN0UGxheWVy4oCZcyBjYWxsYmFjayBwcm9wcyBpbnN0ZWFkLCBlZyBvblJlYWR5LCBvblBsYXksIG9uUGF1c2UnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGxheVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwbGF5VmlkZW8nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGF1c2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BhdXNlVmlkZW8nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RvcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgaWYgKCFkb2N1bWVudC5ib2R5LmNvbnRhaW5zKHRoaXMuY2FsbFBsYXllcignZ2V0SWZyYW1lJykpKSByZXR1cm47XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3N0b3BWaWRlbycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZWVrVG9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKGFtb3VudCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZWVrVG8nLCBhbW91bnQpO1xuXG4gICAgICBpZiAoIXRoaXMucHJvcHMucGxheWluZykge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFZvbHVtZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUoZnJhY3Rpb24pIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0Vm9sdW1lJywgZnJhY3Rpb24gKiAxMDApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRQbGF5YmFja1JhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UGxheWJhY2tSYXRlKHJhdGUpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0UGxheWJhY2tSYXRlJywgcmF0ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldExvb3BcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TG9vcChsb29wKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NldExvb3AnLCBsb29wKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RHVyYXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RHVyYXRpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxsUGxheWVyKCdnZXREdXJhdGlvbicpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRDdXJyZW50VGltZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ2dldEN1cnJlbnRUaW1lJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFNlY29uZHNMb2FkZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ2dldFZpZGVvTG9hZGVkRnJhY3Rpb24nKSAqIHRoaXMuZ2V0RHVyYXRpb24oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBkaXNwbGF5ID0gdGhpcy5wcm9wcy5kaXNwbGF5O1xuICAgICAgdmFyIHN0eWxlID0ge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgZGlzcGxheTogZGlzcGxheVxuICAgICAgfTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgc3R5bGU6IHN0eWxlXG4gICAgICB9LCAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgcmVmOiB0aGlzLnJlZlxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBZb3VUdWJlO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBZb3VUdWJlO1xuXG5fZGVmaW5lUHJvcGVydHkoWW91VHViZSwgXCJkaXNwbGF5TmFtZVwiLCAnWW91VHViZScpO1xuXG5fZGVmaW5lUHJvcGVydHkoWW91VHViZSwgXCJjYW5QbGF5XCIsIF9wYXR0ZXJucy5jYW5QbGF5LnlvdXR1YmUpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5cbnZhciBfcGF0dGVybnMgPSByZXF1aXJlKFwiLi4vcGF0dGVybnNcIik7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxudmFyIF9kZWZhdWx0ID0gW3tcbiAga2V5OiAneW91dHViZScsXG4gIG5hbWU6ICdZb3VUdWJlJyxcbiAgY2FuUGxheTogX3BhdHRlcm5zLmNhblBsYXkueW91dHViZSxcbiAgbGF6eVBsYXllcjogLyojX19QVVJFX18qLygwLCBfcmVhY3QubGF6eSkoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCcuL1lvdVR1YmUnKSk7XG4gICAgfSk7XG4gIH0pXG59LCB7XG4gIGtleTogJ3NvdW5kY2xvdWQnLFxuICBuYW1lOiAnU291bmRDbG91ZCcsXG4gIGNhblBsYXk6IF9wYXR0ZXJucy5jYW5QbGF5LnNvdW5kY2xvdWQsXG4gIGxhenlQbGF5ZXI6IC8qI19fUFVSRV9fKi8oMCwgX3JlYWN0LmxhenkpKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnLi9Tb3VuZENsb3VkJykpO1xuICAgIH0pO1xuICB9KVxufSwge1xuICBrZXk6ICd2aW1lbycsXG4gIG5hbWU6ICdWaW1lbycsXG4gIGNhblBsYXk6IF9wYXR0ZXJucy5jYW5QbGF5LnZpbWVvLFxuICBsYXp5UGxheWVyOiAvKiNfX1BVUkVfXyovKDAsIF9yZWFjdC5sYXp5KShmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoJy4vVmltZW8nKSk7XG4gICAgfSk7XG4gIH0pXG59LCB7XG4gIGtleTogJ2ZhY2Vib29rJyxcbiAgbmFtZTogJ0ZhY2Vib29rJyxcbiAgY2FuUGxheTogX3BhdHRlcm5zLmNhblBsYXkuZmFjZWJvb2ssXG4gIGxhenlQbGF5ZXI6IC8qI19fUFVSRV9fKi8oMCwgX3JlYWN0LmxhenkpKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnLi9GYWNlYm9vaycpKTtcbiAgICB9KTtcbiAgfSlcbn0sIHtcbiAga2V5OiAnc3RyZWFtYWJsZScsXG4gIG5hbWU6ICdTdHJlYW1hYmxlJyxcbiAgY2FuUGxheTogX3BhdHRlcm5zLmNhblBsYXkuc3RyZWFtYWJsZSxcbiAgbGF6eVBsYXllcjogLyojX19QVVJFX18qLygwLCBfcmVhY3QubGF6eSkoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCcuL1N0cmVhbWFibGUnKSk7XG4gICAgfSk7XG4gIH0pXG59LCB7XG4gIGtleTogJ3dpc3RpYScsXG4gIG5hbWU6ICdXaXN0aWEnLFxuICBjYW5QbGF5OiBfcGF0dGVybnMuY2FuUGxheS53aXN0aWEsXG4gIGxhenlQbGF5ZXI6IC8qI19fUFVSRV9fKi8oMCwgX3JlYWN0LmxhenkpKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnLi9XaXN0aWEnKSk7XG4gICAgfSk7XG4gIH0pXG59LCB7XG4gIGtleTogJ3R3aXRjaCcsXG4gIG5hbWU6ICdUd2l0Y2gnLFxuICBjYW5QbGF5OiBfcGF0dGVybnMuY2FuUGxheS50d2l0Y2gsXG4gIGxhenlQbGF5ZXI6IC8qI19fUFVSRV9fKi8oMCwgX3JlYWN0LmxhenkpKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnLi9Ud2l0Y2gnKSk7XG4gICAgfSk7XG4gIH0pXG59LCB7XG4gIGtleTogJ2RhaWx5bW90aW9uJyxcbiAgbmFtZTogJ0RhaWx5TW90aW9uJyxcbiAgY2FuUGxheTogX3BhdHRlcm5zLmNhblBsYXkuZGFpbHltb3Rpb24sXG4gIGxhenlQbGF5ZXI6IC8qI19fUFVSRV9fKi8oMCwgX3JlYWN0LmxhenkpKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnLi9EYWlseU1vdGlvbicpKTtcbiAgICB9KTtcbiAgfSlcbn0sIHtcbiAga2V5OiAnbWl4Y2xvdWQnLFxuICBuYW1lOiAnTWl4Y2xvdWQnLFxuICBjYW5QbGF5OiBfcGF0dGVybnMuY2FuUGxheS5taXhjbG91ZCxcbiAgbGF6eVBsYXllcjogLyojX19QVVJFX18qLygwLCBfcmVhY3QubGF6eSkoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCcuL01peGNsb3VkJykpO1xuICAgIH0pO1xuICB9KVxufSwge1xuICBrZXk6ICd2aWR5YXJkJyxcbiAgbmFtZTogJ1ZpZHlhcmQnLFxuICBjYW5QbGF5OiBfcGF0dGVybnMuY2FuUGxheS52aWR5YXJkLFxuICBsYXp5UGxheWVyOiAvKiNfX1BVUkVfXyovKDAsIF9yZWFjdC5sYXp5KShmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoJy4vVmlkeWFyZCcpKTtcbiAgICB9KTtcbiAgfSlcbn0sIHtcbiAga2V5OiAna2FsdHVyYScsXG4gIG5hbWU6ICdLYWx0dXJhJyxcbiAgY2FuUGxheTogX3BhdHRlcm5zLmNhblBsYXkua2FsdHVyYSxcbiAgbGF6eVBsYXllcjogLyojX19QVVJFX18qLygwLCBfcmVhY3QubGF6eSkoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCcuL0thbHR1cmEnKSk7XG4gICAgfSk7XG4gIH0pXG59LCB7XG4gIGtleTogJ2ZpbGUnLFxuICBuYW1lOiAnRmlsZVBsYXllcicsXG4gIGNhblBsYXk6IF9wYXR0ZXJucy5jYW5QbGF5LmZpbGUsXG4gIGNhbkVuYWJsZVBJUDogZnVuY3Rpb24gY2FuRW5hYmxlUElQKHVybCkge1xuICAgIHJldHVybiBfcGF0dGVybnMuY2FuUGxheS5maWxlKHVybCkgJiYgKGRvY3VtZW50LnBpY3R1cmVJblBpY3R1cmVFbmFibGVkIHx8ICgwLCBfdXRpbHMuc3VwcG9ydHNXZWJLaXRQcmVzZW50YXRpb25Nb2RlKSgpKSAmJiAhX3BhdHRlcm5zLkFVRElPX0VYVEVOU0lPTlMudGVzdCh1cmwpO1xuICB9LFxuICBsYXp5UGxheWVyOiAvKiNfX1BVUkVfXyovKDAsIF9yZWFjdC5sYXp5KShmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoJy4vRmlsZVBsYXllcicpKTtcbiAgICB9KTtcbiAgfSlcbn1dO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdFByb3BzID0gZXhwb3J0cy5wcm9wVHlwZXMgPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG52YXIgc3RyaW5nID0gX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICAgIGJvb2wgPSBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICAgIG51bWJlciA9IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgICBhcnJheSA9IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmFycmF5LFxuICAgIG9uZU9mVHlwZSA9IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mVHlwZSxcbiAgICBzaGFwZSA9IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnNoYXBlLFxuICAgIG9iamVjdCA9IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdCxcbiAgICBmdW5jID0gX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgICBub2RlID0gX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubm9kZTtcbnZhciBwcm9wVHlwZXMgPSB7XG4gIHVybDogb25lT2ZUeXBlKFtzdHJpbmcsIGFycmF5LCBvYmplY3RdKSxcbiAgcGxheWluZzogYm9vbCxcbiAgbG9vcDogYm9vbCxcbiAgY29udHJvbHM6IGJvb2wsXG4gIHZvbHVtZTogbnVtYmVyLFxuICBtdXRlZDogYm9vbCxcbiAgcGxheWJhY2tSYXRlOiBudW1iZXIsXG4gIHdpZHRoOiBvbmVPZlR5cGUoW3N0cmluZywgbnVtYmVyXSksXG4gIGhlaWdodDogb25lT2ZUeXBlKFtzdHJpbmcsIG51bWJlcl0pLFxuICBzdHlsZTogb2JqZWN0LFxuICBwcm9ncmVzc0ludGVydmFsOiBudW1iZXIsXG4gIHBsYXlzaW5saW5lOiBib29sLFxuICBwaXA6IGJvb2wsXG4gIHN0b3BPblVubW91bnQ6IGJvb2wsXG4gIGxpZ2h0OiBvbmVPZlR5cGUoW2Jvb2wsIHN0cmluZ10pLFxuICBwbGF5SWNvbjogbm9kZSxcbiAgcHJldmlld1RhYkluZGV4OiBudW1iZXIsXG4gIGZhbGxiYWNrOiBub2RlLFxuICB3cmFwcGVyOiBvbmVPZlR5cGUoW3N0cmluZywgZnVuYywgc2hhcGUoe1xuICAgIHJlbmRlcjogZnVuYy5pc1JlcXVpcmVkXG4gIH0pXSksXG4gIGNvbmZpZzogc2hhcGUoe1xuICAgIHNvdW5kY2xvdWQ6IHNoYXBlKHtcbiAgICAgIG9wdGlvbnM6IG9iamVjdFxuICAgIH0pLFxuICAgIHlvdXR1YmU6IHNoYXBlKHtcbiAgICAgIHBsYXllclZhcnM6IG9iamVjdCxcbiAgICAgIGVtYmVkT3B0aW9uczogb2JqZWN0LFxuICAgICAgb25VbnN0YXJ0ZWQ6IGZ1bmNcbiAgICB9KSxcbiAgICBmYWNlYm9vazogc2hhcGUoe1xuICAgICAgYXBwSWQ6IHN0cmluZyxcbiAgICAgIHZlcnNpb246IHN0cmluZyxcbiAgICAgIHBsYXllcklkOiBzdHJpbmcsXG4gICAgICBhdHRyaWJ1dGVzOiBvYmplY3RcbiAgICB9KSxcbiAgICBkYWlseW1vdGlvbjogc2hhcGUoe1xuICAgICAgcGFyYW1zOiBvYmplY3RcbiAgICB9KSxcbiAgICB2aW1lbzogc2hhcGUoe1xuICAgICAgcGxheWVyT3B0aW9uczogb2JqZWN0XG4gICAgfSksXG4gICAgZmlsZTogc2hhcGUoe1xuICAgICAgYXR0cmlidXRlczogb2JqZWN0LFxuICAgICAgdHJhY2tzOiBhcnJheSxcbiAgICAgIGZvcmNlVmlkZW86IGJvb2wsXG4gICAgICBmb3JjZUF1ZGlvOiBib29sLFxuICAgICAgZm9yY2VITFM6IGJvb2wsXG4gICAgICBmb3JjZURBU0g6IGJvb2wsXG4gICAgICBmb3JjZUZMVjogYm9vbCxcbiAgICAgIGhsc09wdGlvbnM6IG9iamVjdCxcbiAgICAgIGhsc1ZlcnNpb246IHN0cmluZyxcbiAgICAgIGRhc2hWZXJzaW9uOiBzdHJpbmcsXG4gICAgICBmbHZWZXJzaW9uOiBzdHJpbmdcbiAgICB9KSxcbiAgICB3aXN0aWE6IHNoYXBlKHtcbiAgICAgIG9wdGlvbnM6IG9iamVjdCxcbiAgICAgIHBsYXllcklkOiBzdHJpbmcsXG4gICAgICBjdXN0b21Db250cm9sczogYXJyYXlcbiAgICB9KSxcbiAgICBtaXhjbG91ZDogc2hhcGUoe1xuICAgICAgb3B0aW9uczogb2JqZWN0XG4gICAgfSksXG4gICAgdHdpdGNoOiBzaGFwZSh7XG4gICAgICBvcHRpb25zOiBvYmplY3QsXG4gICAgICBwbGF5ZXJJZDogc3RyaW5nXG4gICAgfSksXG4gICAgdmlkeWFyZDogc2hhcGUoe1xuICAgICAgb3B0aW9uczogb2JqZWN0XG4gICAgfSlcbiAgfSksXG4gIG9uUmVhZHk6IGZ1bmMsXG4gIG9uU3RhcnQ6IGZ1bmMsXG4gIG9uUGxheTogZnVuYyxcbiAgb25QYXVzZTogZnVuYyxcbiAgb25CdWZmZXI6IGZ1bmMsXG4gIG9uQnVmZmVyRW5kOiBmdW5jLFxuICBvbkVuZGVkOiBmdW5jLFxuICBvbkVycm9yOiBmdW5jLFxuICBvbkR1cmF0aW9uOiBmdW5jLFxuICBvblNlZWs6IGZ1bmMsXG4gIG9uUHJvZ3Jlc3M6IGZ1bmMsXG4gIG9uQ2xpY2tQcmV2aWV3OiBmdW5jLFxuICBvbkVuYWJsZVBJUDogZnVuYyxcbiAgb25EaXNhYmxlUElQOiBmdW5jXG59O1xuZXhwb3J0cy5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBwbGF5aW5nOiBmYWxzZSxcbiAgbG9vcDogZmFsc2UsXG4gIGNvbnRyb2xzOiBmYWxzZSxcbiAgdm9sdW1lOiBudWxsLFxuICBtdXRlZDogZmFsc2UsXG4gIHBsYXliYWNrUmF0ZTogMSxcbiAgd2lkdGg6ICc2NDBweCcsXG4gIGhlaWdodDogJzM2MHB4JyxcbiAgc3R5bGU6IHt9LFxuICBwcm9ncmVzc0ludGVydmFsOiAxMDAwLFxuICBwbGF5c2lubGluZTogZmFsc2UsXG4gIHBpcDogZmFsc2UsXG4gIHN0b3BPblVubW91bnQ6IHRydWUsXG4gIGxpZ2h0OiBmYWxzZSxcbiAgZmFsbGJhY2s6IG51bGwsXG4gIHdyYXBwZXI6ICdkaXYnLFxuICBwcmV2aWV3VGFiSW5kZXg6IDAsXG4gIGNvbmZpZzoge1xuICAgIHNvdW5kY2xvdWQ6IHtcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgdmlzdWFsOiB0cnVlLFxuICAgICAgICAvLyBVbmRvY3VtZW50ZWQsIGJ1dCBtYWtlcyBwbGF5ZXIgZmlsbCBjb250YWluZXIgYW5kIGxvb2sgYmV0dGVyXG4gICAgICAgIGJ1eWluZzogZmFsc2UsXG4gICAgICAgIGxpa2luZzogZmFsc2UsXG4gICAgICAgIGRvd25sb2FkOiBmYWxzZSxcbiAgICAgICAgc2hhcmluZzogZmFsc2UsXG4gICAgICAgIHNob3dfY29tbWVudHM6IGZhbHNlLFxuICAgICAgICBzaG93X3BsYXljb3VudDogZmFsc2VcbiAgICAgIH1cbiAgICB9LFxuICAgIHlvdXR1YmU6IHtcbiAgICAgIHBsYXllclZhcnM6IHtcbiAgICAgICAgcGxheXNpbmxpbmU6IDEsXG4gICAgICAgIHNob3dpbmZvOiAwLFxuICAgICAgICByZWw6IDAsXG4gICAgICAgIGl2X2xvYWRfcG9saWN5OiAzLFxuICAgICAgICBtb2Rlc3RicmFuZGluZzogMVxuICAgICAgfSxcbiAgICAgIGVtYmVkT3B0aW9uczoge30sXG4gICAgICBvblVuc3RhcnRlZDogbm9vcFxuICAgIH0sXG4gICAgZmFjZWJvb2s6IHtcbiAgICAgIGFwcElkOiAnMTMwOTY5NzIwNTc3MjgxOScsXG4gICAgICB2ZXJzaW9uOiAndjMuMycsXG4gICAgICBwbGF5ZXJJZDogbnVsbCxcbiAgICAgIGF0dHJpYnV0ZXM6IHt9XG4gICAgfSxcbiAgICBkYWlseW1vdGlvbjoge1xuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGFwaTogMSxcbiAgICAgICAgJ2VuZHNjcmVlbi1lbmFibGUnOiBmYWxzZVxuICAgICAgfVxuICAgIH0sXG4gICAgdmltZW86IHtcbiAgICAgIHBsYXllck9wdGlvbnM6IHtcbiAgICAgICAgYXV0b3BhdXNlOiBmYWxzZSxcbiAgICAgICAgYnlsaW5lOiBmYWxzZSxcbiAgICAgICAgcG9ydHJhaXQ6IGZhbHNlLFxuICAgICAgICB0aXRsZTogZmFsc2VcbiAgICAgIH1cbiAgICB9LFxuICAgIGZpbGU6IHtcbiAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgdHJhY2tzOiBbXSxcbiAgICAgIGZvcmNlVmlkZW86IGZhbHNlLFxuICAgICAgZm9yY2VBdWRpbzogZmFsc2UsXG4gICAgICBmb3JjZUhMUzogZmFsc2UsXG4gICAgICBmb3JjZURBU0g6IGZhbHNlLFxuICAgICAgZm9yY2VGTFY6IGZhbHNlLFxuICAgICAgaGxzT3B0aW9uczoge30sXG4gICAgICBobHNWZXJzaW9uOiAnMC4xNC4xNicsXG4gICAgICBkYXNoVmVyc2lvbjogJzMuMS4zJyxcbiAgICAgIGZsdlZlcnNpb246ICcxLjUuMCdcbiAgICB9LFxuICAgIHdpc3RpYToge1xuICAgICAgb3B0aW9uczoge30sXG4gICAgICBwbGF5ZXJJZDogbnVsbCxcbiAgICAgIGN1c3RvbUNvbnRyb2xzOiBudWxsXG4gICAgfSxcbiAgICBtaXhjbG91ZDoge1xuICAgICAgb3B0aW9uczoge1xuICAgICAgICBoaWRlX2NvdmVyOiAxXG4gICAgICB9XG4gICAgfSxcbiAgICB0d2l0Y2g6IHtcbiAgICAgIG9wdGlvbnM6IHt9LFxuICAgICAgcGxheWVySWQ6IG51bGxcbiAgICB9LFxuICAgIHZpZHlhcmQ6IHtcbiAgICAgIG9wdGlvbnM6IHt9XG4gICAgfVxuICB9LFxuICBvblJlYWR5OiBub29wLFxuICBvblN0YXJ0OiBub29wLFxuICBvblBsYXk6IG5vb3AsXG4gIG9uUGF1c2U6IG5vb3AsXG4gIG9uQnVmZmVyOiBub29wLFxuICBvbkJ1ZmZlckVuZDogbm9vcCxcbiAgb25FbmRlZDogbm9vcCxcbiAgb25FcnJvcjogbm9vcCxcbiAgb25EdXJhdGlvbjogbm9vcCxcbiAgb25TZWVrOiBub29wLFxuICBvblByb2dyZXNzOiBub29wLFxuICBvbkNsaWNrUHJldmlldzogbm9vcCxcbiAgb25FbmFibGVQSVA6IG5vb3AsXG4gIG9uRGlzYWJsZVBJUDogbm9vcFxufTtcbmV4cG9ydHMuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5wYXJzZVN0YXJ0VGltZSA9IHBhcnNlU3RhcnRUaW1lO1xuZXhwb3J0cy5wYXJzZUVuZFRpbWUgPSBwYXJzZUVuZFRpbWU7XG5leHBvcnRzLnJhbmRvbVN0cmluZyA9IHJhbmRvbVN0cmluZztcbmV4cG9ydHMucXVlcnlTdHJpbmcgPSBxdWVyeVN0cmluZztcbmV4cG9ydHMuZ2V0U0RLID0gZ2V0U0RLO1xuZXhwb3J0cy5nZXRDb25maWcgPSBnZXRDb25maWc7XG5leHBvcnRzLm9taXQgPSBvbWl0O1xuZXhwb3J0cy5jYWxsUGxheWVyID0gY2FsbFBsYXllcjtcbmV4cG9ydHMuaXNNZWRpYVN0cmVhbSA9IGlzTWVkaWFTdHJlYW07XG5leHBvcnRzLmlzQmxvYlVybCA9IGlzQmxvYlVybDtcbmV4cG9ydHMuc3VwcG9ydHNXZWJLaXRQcmVzZW50YXRpb25Nb2RlID0gc3VwcG9ydHNXZWJLaXRQcmVzZW50YXRpb25Nb2RlO1xuXG52YXIgX2xvYWRTY3JpcHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJsb2FkLXNjcmlwdFwiKSk7XG5cbnZhciBfZGVlcG1lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGVlcG1lcmdlXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbnZhciBNQVRDSF9TVEFSVF9RVUVSWSA9IC9bPyYjXSg/OnN0YXJ0fHQpPShbMC05aG1zXSspLztcbnZhciBNQVRDSF9FTkRfUVVFUlkgPSAvWz8mI11lbmQ9KFswLTlobXNdKykvO1xudmFyIE1BVENIX1NUQVJUX1NUQU1QID0gLyhcXGQrKShofG18cykvZztcbnZhciBNQVRDSF9OVU1FUklDID0gL15cXGQrJC87IC8vIFBhcnNlIFlvdVR1YmUgVVJMIGZvciBhIHN0YXJ0IHRpbWUgcGFyYW0sIGllID90PTFoMTRtMzBzXG4vLyBhbmQgcmV0dXJuIHRoZSBzdGFydCB0aW1lIGluIHNlY29uZHNcblxuZnVuY3Rpb24gcGFyc2VUaW1lUGFyYW0odXJsLCBwYXR0ZXJuKSB7XG4gIGlmICh1cmwgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICB2YXIgbWF0Y2ggPSB1cmwubWF0Y2gocGF0dGVybik7XG5cbiAgaWYgKG1hdGNoKSB7XG4gICAgdmFyIHN0YW1wID0gbWF0Y2hbMV07XG5cbiAgICBpZiAoc3RhbXAubWF0Y2goTUFUQ0hfU1RBUlRfU1RBTVApKSB7XG4gICAgICByZXR1cm4gcGFyc2VUaW1lU3RyaW5nKHN0YW1wKTtcbiAgICB9XG5cbiAgICBpZiAoTUFUQ0hfTlVNRVJJQy50ZXN0KHN0YW1wKSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHN0YW1wKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRpbWVTdHJpbmcoc3RhbXApIHtcbiAgdmFyIHNlY29uZHMgPSAwO1xuICB2YXIgYXJyYXkgPSBNQVRDSF9TVEFSVF9TVEFNUC5leGVjKHN0YW1wKTtcblxuICB3aGlsZSAoYXJyYXkgIT09IG51bGwpIHtcbiAgICB2YXIgX2FycmF5ID0gYXJyYXksXG4gICAgICAgIF9hcnJheTIgPSBfc2xpY2VkVG9BcnJheShfYXJyYXksIDMpLFxuICAgICAgICBjb3VudCA9IF9hcnJheTJbMV0sXG4gICAgICAgIHBlcmlvZCA9IF9hcnJheTJbMl07XG5cbiAgICBpZiAocGVyaW9kID09PSAnaCcpIHNlY29uZHMgKz0gcGFyc2VJbnQoY291bnQsIDEwKSAqIDYwICogNjA7XG4gICAgaWYgKHBlcmlvZCA9PT0gJ20nKSBzZWNvbmRzICs9IHBhcnNlSW50KGNvdW50LCAxMCkgKiA2MDtcbiAgICBpZiAocGVyaW9kID09PSAncycpIHNlY29uZHMgKz0gcGFyc2VJbnQoY291bnQsIDEwKTtcbiAgICBhcnJheSA9IE1BVENIX1NUQVJUX1NUQU1QLmV4ZWMoc3RhbXApO1xuICB9XG5cbiAgcmV0dXJuIHNlY29uZHM7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU3RhcnRUaW1lKHVybCkge1xuICByZXR1cm4gcGFyc2VUaW1lUGFyYW0odXJsLCBNQVRDSF9TVEFSVF9RVUVSWSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRW5kVGltZSh1cmwpIHtcbiAgcmV0dXJuIHBhcnNlVGltZVBhcmFtKHVybCwgTUFUQ0hfRU5EX1FVRVJZKTtcbn0gLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzg2MjI1NDVcblxuXG5mdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgNSk7XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5U3RyaW5nKG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqZWN0KS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChrZXksIFwiPVwiKS5jb25jYXQob2JqZWN0W2tleV0pO1xuICB9KS5qb2luKCcmJyk7XG59XG5cbmZ1bmN0aW9uIGdldEdsb2JhbChrZXkpIHtcbiAgaWYgKHdpbmRvd1trZXldKSB7XG4gICAgcmV0dXJuIHdpbmRvd1trZXldO1xuICB9XG5cbiAgaWYgKHdpbmRvdy5leHBvcnRzICYmIHdpbmRvdy5leHBvcnRzW2tleV0pIHtcbiAgICByZXR1cm4gd2luZG93LmV4cG9ydHNba2V5XTtcbiAgfVxuXG4gIGlmICh3aW5kb3cubW9kdWxlICYmIHdpbmRvdy5tb2R1bGUuZXhwb3J0cyAmJiB3aW5kb3cubW9kdWxlLmV4cG9ydHNba2V5XSkge1xuICAgIHJldHVybiB3aW5kb3cubW9kdWxlLmV4cG9ydHNba2V5XTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSAvLyBVdGlsIGZ1bmN0aW9uIHRvIGxvYWQgYW4gZXh0ZXJuYWwgU0RLXG4vLyBvciByZXR1cm4gdGhlIFNESyBpZiBpdCBpcyBhbHJlYWR5IGxvYWRlZFxuXG5cbnZhciByZXF1ZXN0cyA9IHt9O1xuXG5mdW5jdGlvbiBnZXRTREsodXJsLCBzZGtHbG9iYWwpIHtcbiAgdmFyIHNka1JlYWR5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBudWxsO1xuICB2YXIgaXNMb2FkZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbiAgdmFyIGZldGNoU2NyaXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBfbG9hZFNjcmlwdFtcImRlZmF1bHRcIl07XG4gIHZhciBleGlzdGluZ0dsb2JhbCA9IGdldEdsb2JhbChzZGtHbG9iYWwpO1xuXG4gIGlmIChleGlzdGluZ0dsb2JhbCAmJiBpc0xvYWRlZChleGlzdGluZ0dsb2JhbCkpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGV4aXN0aW5nR2xvYmFsKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgLy8gSWYgd2UgYXJlIGFscmVhZHkgbG9hZGluZyB0aGUgU0RLLCBhZGQgdGhlIHJlc29sdmUgYW5kIHJlamVjdFxuICAgIC8vIGZ1bmN0aW9ucyB0byB0aGUgZXhpc3RpbmcgYXJyYXkgb2YgcmVxdWVzdHNcbiAgICBpZiAocmVxdWVzdHNbdXJsXSkge1xuICAgICAgcmVxdWVzdHNbdXJsXS5wdXNoKHtcbiAgICAgICAgcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICAgICAgcmVqZWN0OiByZWplY3RcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJlcXVlc3RzW3VybF0gPSBbe1xuICAgICAgcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICAgIHJlamVjdDogcmVqZWN0XG4gICAgfV07XG5cbiAgICB2YXIgb25Mb2FkZWQgPSBmdW5jdGlvbiBvbkxvYWRlZChzZGspIHtcbiAgICAgIC8vIFdoZW4gbG9hZGVkLCByZXNvbHZlIGFsbCBwZW5kaW5nIHJlcXVlc3QgcHJvbWlzZXNcbiAgICAgIHJlcXVlc3RzW3VybF0uZm9yRWFjaChmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gcmVxdWVzdC5yZXNvbHZlKHNkayk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKHNka1JlYWR5KSB7XG4gICAgICB2YXIgcHJldmlvdXNPblJlYWR5ID0gd2luZG93W3Nka1JlYWR5XTtcblxuICAgICAgd2luZG93W3Nka1JlYWR5XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHByZXZpb3VzT25SZWFkeSkgcHJldmlvdXNPblJlYWR5KCk7XG4gICAgICAgIG9uTG9hZGVkKGdldEdsb2JhbChzZGtHbG9iYWwpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZmV0Y2hTY3JpcHQodXJsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIC8vIExvYWRpbmcgdGhlIFNESyBmYWlsZWQg4oCTIHJlamVjdCBhbGwgcmVxdWVzdHMgYW5kXG4gICAgICAgIC8vIHJlc2V0IHRoZSBhcnJheSBvZiByZXF1ZXN0cyBmb3IgdGhpcyBTREtcbiAgICAgICAgcmVxdWVzdHNbdXJsXS5mb3JFYWNoKGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlcXVlc3QucmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXF1ZXN0c1t1cmxdID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoIXNka1JlYWR5KSB7XG4gICAgICAgIG9uTG9hZGVkKGdldEdsb2JhbChzZGtHbG9iYWwpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldENvbmZpZyhwcm9wcywgZGVmYXVsdFByb3BzKSB7XG4gIHJldHVybiAoMCwgX2RlZXBtZXJnZVtcImRlZmF1bHRcIl0pKGRlZmF1bHRQcm9wcy5jb25maWcsIHByb3BzLmNvbmZpZyk7XG59XG5cbmZ1bmN0aW9uIG9taXQob2JqZWN0KSB7XG4gIHZhciBfcmVmO1xuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcnJheXMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFycmF5c1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgb21pdEtleXMgPSAoX3JlZiA9IFtdKS5jb25jYXQuYXBwbHkoX3JlZiwgYXJyYXlzKTtcblxuICB2YXIgb3V0cHV0ID0ge307XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBmb3IgKHZhciBfaTIgPSAwLCBfa2V5cyA9IGtleXM7IF9pMiA8IF9rZXlzLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIga2V5ID0gX2tleXNbX2kyXTtcblxuICAgIGlmIChvbWl0S2V5cy5pbmRleE9mKGtleSkgPT09IC0xKSB7XG4gICAgICBvdXRwdXRba2V5XSA9IG9iamVjdFtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGNhbGxQbGF5ZXIobWV0aG9kKSB7XG4gIHZhciBfdGhpcyRwbGF5ZXI7XG5cbiAgLy8gVXRpbCBtZXRob2QgZm9yIGNhbGxpbmcgYSBtZXRob2Qgb24gdGhpcy5wbGF5ZXJcbiAgLy8gYnV0IGd1YXJkIGFnYWluc3QgZXJyb3JzIGFuZCBjb25zb2xlLndhcm4gaW5zdGVhZFxuICBpZiAoIXRoaXMucGxheWVyIHx8ICF0aGlzLnBsYXllclttZXRob2RdKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBcIlJlYWN0UGxheWVyOiBcIi5jb25jYXQodGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSwgXCIgcGxheWVyIGNvdWxkIG5vdCBjYWxsICVjXCIpLmNvbmNhdChtZXRob2QsIFwiJWMgXFx1MjAxMyBcIik7XG5cbiAgICBpZiAoIXRoaXMucGxheWVyKSB7XG4gICAgICBtZXNzYWdlICs9ICdUaGUgcGxheWVyIHdhcyBub3QgYXZhaWxhYmxlJztcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnBsYXllclttZXRob2RdKSB7XG4gICAgICBtZXNzYWdlICs9ICdUaGUgbWV0aG9kIHdhcyBub3QgYXZhaWxhYmxlJztcbiAgICB9XG5cbiAgICBjb25zb2xlLndhcm4obWVzc2FnZSwgJ2ZvbnQtd2VpZ2h0OiBib2xkJywgJycpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgcmV0dXJuIChfdGhpcyRwbGF5ZXIgPSB0aGlzLnBsYXllcilbbWV0aG9kXS5hcHBseShfdGhpcyRwbGF5ZXIsIGFyZ3MpO1xufVxuXG5mdW5jdGlvbiBpc01lZGlhU3RyZWFtKHVybCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5NZWRpYVN0cmVhbSAhPT0gJ3VuZGVmaW5lZCcgJiYgdXJsIGluc3RhbmNlb2Ygd2luZG93Lk1lZGlhU3RyZWFtO1xufVxuXG5mdW5jdGlvbiBpc0Jsb2JVcmwodXJsKSB7XG4gIHJldHVybiAvXmJsb2I6Ly50ZXN0KHVybCk7XG59XG5cbmZ1bmN0aW9uIHN1cHBvcnRzV2ViS2l0UHJlc2VudGF0aW9uTW9kZSgpIHtcbiAgdmFyIHZpZGVvID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuICAvLyBDaGVjayBpZiBTYWZhcmkgc3VwcG9ydHMgUGlQLCBhbmQgaXMgbm90IG9uIG1vYmlsZSAob3RoZXIgdGhhbiBpUGFkKVxuICAvLyBpUGhvbmUgc2FmYXJpIGFwcGVhcnMgdG8gXCJzdXBwb3J0XCIgUGlQIHRocm91Z2ggdGhlIGNoZWNrLCBob3dldmVyIFBpUCBkb2VzIG5vdCBmdW5jdGlvblxuICB2YXIgbm90TW9iaWxlID0gL2lQaG9uZXxpUG9kLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpID09PSBmYWxzZTtcbiAgcmV0dXJuIHZpZGVvLndlYmtpdFN1cHBvcnRzUHJlc2VudGF0aW9uTW9kZSAmJiB0eXBlb2YgdmlkZW8ud2Via2l0U2V0UHJlc2VudGF0aW9uTW9kZSA9PT0gJ2Z1bmN0aW9uJyAmJiBub3RNb2JpbGU7XG59IiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdDsiXSwic291cmNlUm9vdCI6IiJ9