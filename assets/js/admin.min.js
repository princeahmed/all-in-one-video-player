/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/admin.js":
/*!****************************!*\
  !*** ./assets/js/admin.js ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _metabox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./metabox */ "./assets/js/metabox/index.js");


/***/ }),

/***/ "./assets/js/components/functions.js":
/*!*******************************************!*\
  !*** ./assets/js/components/functions.js ***!
  \*******************************************/
/*! exports provided: updateParam, updateURL */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateParam", function() { return updateParam; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateURL", function() { return updateURL; });
function updateParam(param) {
  var key = Object.keys(param)[0];
  var value = param[key];

  function addOrReplaceParam(param, value) {
    var url = window.location.href;
    var stringToAdd = "".concat(param, "=") + value;
    var has_param = url.match(/\?./);

    if (window.location.search === "") {
      return "".concat(url).concat(has_param ? '&' : '?').concat(stringToAdd);
    }

    if (window.location.search.indexOf("".concat(param, "=")) === -1) {
      return "".concat(url).concat(has_param ? '&' : '?').concat(stringToAdd);
    }

    var searchParams = window.location.search.substring(1).split("&");

    for (var i = 0; i < searchParams.length; i++) {
      if (searchParams[i].indexOf("".concat(param, "=")) > -1) {
        searchParams[i] = "".concat(param, "=") + value;
        break;
      }
    }

    return url.split("?")[0] + "?" + searchParams.join("&");
  }

  updateURL(addOrReplaceParam(key, value));
}
function updateURL(url) {
  try {
    history.pushState('', '', url);
  } catch (e) {
    console.log(e);
  }
}

/***/ }),

/***/ "./assets/js/metabox/PlayerType.js":
/*!*****************************************!*\
  !*** ./assets/js/metabox/PlayerType.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PlayerType; });
function PlayerType(_ref) {
  var setPlayerType = _ref.setPlayerType;
  return /*#__PURE__*/React.createElement("div", {
    className: 'aiovp-metabox-body playertype-selection'
  }, /*#__PURE__*/React.createElement("h3", null, "Player Type"), /*#__PURE__*/React.createElement("h4", null, "Select the player type to optimize the player for your usage."), /*#__PURE__*/React.createElement("div", {
    className: "player-types"
  }, /*#__PURE__*/React.createElement("div", {
    className: "player-type",
    onClick: function onClick() {
      setPlayerType('single');
    }
  }, /*#__PURE__*/React.createElement("i", {
    className: "dashicons dashicons-media-video"
  }), /*#__PURE__*/React.createElement("span", null, "Single Video Player")), /*#__PURE__*/React.createElement("div", {
    className: "player-type",
    onClick: function onClick() {
      return setPlayerType('playlist');
    }
  }, /*#__PURE__*/React.createElement("i", {
    className: "dashicons dashicons-playlist-video"
  }), /*#__PURE__*/React.createElement("span", null, "Video Playlist Player"))));
}

/***/ }),

/***/ "./assets/js/metabox/Top.js":
/*!**********************************!*\
  !*** ./assets/js/metabox/Top.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var _wp$components = wp.components,
    Spinner = _wp$components.Spinner,
    SelectControl = _wp$components.SelectControl;

var Top = function Top(_ref) {
  var _ref$state = _ref.state,
      init = _ref$state.init,
      updating = _ref$state.updating,
      deleting = _ref$state.deleting,
      playerType = _ref.playerType,
      setPlayerType = _ref.setPlayerType,
      updateData = _ref.updateData,
      deletePlayer = _ref.deletePlayer;
  var postID = document.getElementById('post_ID').value;
  return /*#__PURE__*/React.createElement("div", {
    className: "aiovp-metabox-top"
  }, /*#__PURE__*/React.createElement("div", {
    className: "player_shortcode"
  }, /*#__PURE__*/React.createElement("div", {
    className: "tooltip-wrap"
  }, /*#__PURE__*/React.createElement("span", {
    className: "tooltip-text"
  }, "Shortcode"), /*#__PURE__*/React.createElement("i", {
    className: "dashicons dashicons-shortcode"
  }), /*#__PURE__*/React.createElement("input", {
    id: "player_shortcode",
    className: "shortcode",
    type: "text",
    readOnly: true,
    value: "[aiovp id=\"".concat(postID, "\"]")
  }))), /*#__PURE__*/React.createElement("div", {
    className: "player_type"
  }, /*#__PURE__*/React.createElement(SelectControl, {
    label: 'Player Type : ',
    value: playerType,
    options: [{
      label: 'Playlist',
      value: 'playlist'
    }, {
      label: 'Single',
      value: 'single'
    }],
    onChange: function onChange(playerType) {
      return setPlayerType(playerType);
    }
  })), (init || updating) && /*#__PURE__*/React.createElement(Spinner, null), /*#__PURE__*/React.createElement("button", {
    type: "button",
    onClick: function onClick() {
      handleChange({
        updating: true
      });
      window.location = aiovp.admin_url + '/edit.php?post_type=aiovp';
    },
    className: "button"
  }, /*#__PURE__*/React.createElement("div", {
    className: "tooltip-wrap"
  }, /*#__PURE__*/React.createElement("span", {
    className: "tooltip-text"
  }, "Back to all players"), /*#__PURE__*/React.createElement("span", {
    className: "dashicons dashicons-arrow-left-alt2"
  }), deleting ? 'Deleting...' : 'Back')), !!window.location.href.match(/post-new.php/) || /*#__PURE__*/React.createElement("button", {
    type: "button",
    onClick: function onClick() {
      var yes = confirm('Are you sure, want to delete the player?');

      if (yes) {
        deletePlayer();
      }
    },
    className: "button-link-delete button"
  }, /*#__PURE__*/React.createElement("div", {
    className: "tooltip-wrap"
  }, /*#__PURE__*/React.createElement("span", {
    className: "tooltip-text"
  }, "Delete Player"), /*#__PURE__*/React.createElement("span", {
    className: "dashicons dashicons-trash"
  }), deleting ? 'Deleting...' : 'Delete')), /*#__PURE__*/React.createElement("button", {
    type: "button",
    onClick: function onClick() {
      updateData();
      window.open(aiovp.site_url + "?all_in_one_video_player=".concat(postID, "&preview"));
    },
    className: "button"
  }, /*#__PURE__*/React.createElement("div", {
    className: "tooltip-wrap"
  }, /*#__PURE__*/React.createElement("span", {
    className: "tooltip-text"
  }, "Player Preview"), /*#__PURE__*/React.createElement("span", {
    className: "dashicons dashicons-visibility"
  }), updating ? 'Saving...' : 'Preview')), /*#__PURE__*/React.createElement("button", {
    type: "button",
    onClick: updateData,
    className: "button-primary button"
  }, /*#__PURE__*/React.createElement("span", {
    className: "dashicons dashicons-yes"
  }), updating ? 'Saving...' : 'Save Changes'));
};

/* harmony default export */ __webpack_exports__["default"] = (Top);

/***/ }),

/***/ "./assets/js/metabox/Uploader.js":
/*!***************************************!*\
  !*** ./assets/js/metabox/Uploader.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Uploader; });
var TextControl = wp.components.TextControl;
function Uploader(_ref) {
  var media = _ref.media,
      _onChange = _ref.onChange,
      config = _ref.config;

  var openUploader = function openUploader(e) {
    e.preventDefault(); // Create the media frame.

    var file_frame = wp.media.frames.file_frame = wp.media({
      title: config.title,
      library: {
        type: config.type
      },
      button: {
        text: config.text
      },
      multiple: false
    });
    file_frame.on('select', function () {
      var attachment = file_frame.state().get('selection').first().toJSON();

      _onChange(attachment);
    }); // Finally, open the modal

    file_frame.open();
  };

  var deleteMedia = function deleteMedia(e) {
    e.preventDefault();

    _onChange('');
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "thumbnail-metabox-actions"
  }, /*#__PURE__*/React.createElement("label", {
    htmlFor: ""
  }, config.label), /*#__PURE__*/React.createElement("div", {
    className: "form-group"
  }, 'image' === config.type && !!media && /*#__PURE__*/React.createElement("img", {
    src: media,
    className: 'media-preview'
  }), /*#__PURE__*/React.createElement("input", {
    type: "text",
    value: media,
    onChange: function onChange(e) {
      return _onChange(e.target.value);
    }
  })), /*#__PURE__*/React.createElement("button", {
    type: 'button',
    className: "button button-primary select_video",
    onClick: openUploader
  }, /*#__PURE__*/React.createElement("i", {
    className: "dashicons dashicons-plus-alt"
  }, " ")), !!media && /*#__PURE__*/React.createElement("button", {
    type: 'button',
    className: "button button-link-delete remove_video",
    onClick: deleteMedia
  }, /*#__PURE__*/React.createElement("i", {
    className: "dashicons dashicons-trash"
  }, " "))), /*#__PURE__*/React.createElement("p", {
    className: "description"
  }, config.desc));
}

/***/ }),

/***/ "./assets/js/metabox/Videos.js":
/*!*************************************!*\
  !*** ./assets/js/metabox/Videos.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Videos; });
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Uploader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Uploader */ "./assets/js/metabox/Uploader.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }



var useState = wp.element.useState;
var _wp$components = wp.components,
    SelectControl = _wp$components.SelectControl,
    TextControl = _wp$components.TextControl;
function Videos(_ref) {
  var videos = _ref.videos,
      setVideos = _ref.setVideos,
      playerType = _ref.playerType;
  videos = !!videos.length ? videos : [{
    title: '',
    source: 'YouTube',
    video: '',
    poster: ''
  }];

  var _useState = useState(!!videos && videos.length === 1 ? 0 : null),
      _useState2 = _slicedToArray(_useState, 2),
      active = _useState2[0],
      setActive = _useState2[1];

  var handleChange = function handleChange(obj) {
    var key = Object.keys(obj)[0];
    videos[active][key] = obj[key];
    setVideos(_toConsumableArray(videos));
  };

  var removeVideo = function removeVideo(index) {
    var conf = confirm('Are you sure want to delete the track?');

    if (conf) {
      setVideos(videos.filter(function (item, i) {
        return i !== index;
      }));
    }
  };

  if ('single' === playerType) {
    videos = [_objectSpread({}, videos[0])];
  }

  return /*#__PURE__*/React.createElement("div", {
    className: "content-tab"
  }, /*#__PURE__*/React.createElement("h3", {
    className: "tab_title"
  }, 'single' === playerType ? 'Video' : 'Videos'), /*#__PURE__*/React.createElement("div", {
    className: "video-items"
  }, !!videos && !!videos.length && videos.map(function (_ref2, index) {
    var title = _ref2.title,
        source = _ref2.source,
        video = _ref2.video,
        poster = _ref2.poster;
    var isActive = index === active;
    return /*#__PURE__*/React.createElement("div", {
      className: classnames__WEBPACK_IMPORTED_MODULE_0___default()('video-item', {
        active: isActive
      })
    }, 'single' !== playerType && /*#__PURE__*/React.createElement("div", {
      className: "video-item-header"
    }, /*#__PURE__*/React.createElement("h4", null, index + 1, ". ", title), videos.length > 1 && /*#__PURE__*/React.createElement("button", {
      type: "button",
      className: 'button button-link-delete',
      onClick: function onClick() {
        return removeVideo(index);
      }
    }, /*#__PURE__*/React.createElement("i", {
      className: "dashicons dashicons-trash"
    })), /*#__PURE__*/React.createElement("button", {
      type: "button",
      className: 'button button-primary',
      onClick: function onClick() {
        return setActive(isActive ? null : index);
      }
    }, /*#__PURE__*/React.createElement("i", {
      className: classnames__WEBPACK_IMPORTED_MODULE_0___default()('dashicons', {
        'dashicons-arrow-down-alt2': !isActive
      }, {
        'dashicons-arrow-up-alt2': isActive
      })
    }))), (isActive || 'single' === playerType) && /*#__PURE__*/React.createElement("div", {
      className: "video-item-body"
    }, /*#__PURE__*/React.createElement("div", {
      className: "form-field"
    }, /*#__PURE__*/React.createElement(TextControl, {
      label: 'Title',
      value: title,
      onChange: function onChange(title) {
        return handleChange({
          title: title
        });
      },
      help: 'Enter the video title.'
    })), /*#__PURE__*/React.createElement("div", {
      className: "form-field"
    }, /*#__PURE__*/React.createElement(SelectControl, {
      label: 'Source',
      value: source,
      options: [{
        label: 'YouTube',
        value: 'YouTube'
      }, {
        label: 'SoundCloud',
        value: 'SoundCloud'
      }, {
        label: 'Facebook',
        value: 'Facebook'
      }, {
        label: 'Vimeo',
        value: 'Vimeo'
      }, {
        label: 'Twitch',
        value: 'Twitch'
      }, {
        label: 'Streamable',
        value: 'Streamable'
      }, {
        label: 'Wistia',
        value: 'Wistia'
      }, {
        label: 'DailyMotion',
        value: 'DailyMotion'
      }, {
        label: 'Mixcloud',
        value: 'Mixcloud'
      }, {
        label: 'Vidyard',
        value: 'Vidyard'
      }, {
        label: 'Self Hosted',
        value: 'SelfHosted'
      }],
      onChange: function onChange(source) {
        return handleChange({
          source: source
        });
      },
      help: 'Select video source you want to use.'
    })), /*#__PURE__*/React.createElement("div", {
      className: "form-field"
    }, 'SelfHosted' === source ? /*#__PURE__*/React.createElement(_Uploader__WEBPACK_IMPORTED_MODULE_1__["default"], {
      media: video,
      onChange: function onChange(media) {
        return handleChange({
          video: media.url
        });
      },
      config: {
        title: 'Select Video',
        type: 'video',
        text: 'Use this video',
        label: 'Select Video',
        desc: 'Enter the self hosted video url or select an video from media library.'
      }
    }) : /*#__PURE__*/React.createElement(TextControl, {
      label: 'Video URL',
      value: video,
      onChange: function onChange(video) {
        return handleChange({
          video: video
        });
      },
      help: 'Enter the video URL.'
    })), /*#__PURE__*/React.createElement("div", {
      className: 'form-field'
    }, /*#__PURE__*/React.createElement(_Uploader__WEBPACK_IMPORTED_MODULE_1__["default"], {
      media: poster,
      onChange: function onChange(media) {
        return handleChange({
          poster: media.url
        });
      },
      config: {
        title: 'Select Image',
        type: 'image',
        text: 'Use this image',
        label: 'Poster Image',
        desc: 'Enter the image url or select an image from media library.'
      }
    }))));
  }), 'single' !== playerType && /*#__PURE__*/React.createElement("div", {
    className: "add-new-btn-wrap"
  }, /*#__PURE__*/React.createElement("button", {
    type: "button",
    className: classnames__WEBPACK_IMPORTED_MODULE_0___default()('add-new button'),
    onClick: function onClick() {
      setVideos([].concat(_toConsumableArray(videos), [{}]));
      setActive(videos.length);
    }
  }, /*#__PURE__*/React.createElement("i", {
    className: "dashicons dashicons-plus-alt"
  }), /*#__PURE__*/React.createElement("span", null, "Add New Video")))));
}

/***/ }),

/***/ "./assets/js/metabox/index.js":
/*!************************************!*\
  !*** ./assets/js/metabox/index.js ***!
  \************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/functions */ "./assets/js/components/functions.js");
/* harmony import */ var _Top__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Top */ "./assets/js/metabox/Top.js");
/* harmony import */ var _Videos__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Videos */ "./assets/js/metabox/Videos.js");
/* harmony import */ var _PlayerType__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PlayerType */ "./assets/js/metabox/PlayerType.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_4__);
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }






var _wp$element = wp.element,
    useState = _wp$element.useState,
    useEffect = _wp$element.useEffect;
var Spinner = wp.components.Spinner;

var Metabox = function Metabox(_ref) {
  var editLink = _ref.editLink;
  var postID = document.getElementById('post_ID').value;

  var _useState = useState('videos'),
      _useState2 = _slicedToArray(_useState, 2),
      tab = _useState2[0],
      setTab = _useState2[1];

  var _useState3 = useState([]),
      _useState4 = _slicedToArray(_useState3, 2),
      videos = _useState4[0],
      setVideos = _useState4[1];

  var _useState5 = useState('skin1'),
      _useState6 = _slicedToArray(_useState5, 2),
      skin = _useState6[0],
      setSkin = _useState6[1];

  var _useState7 = useState({}),
      _useState8 = _slicedToArray(_useState7, 2),
      customization = _useState8[0],
      setCustomization = _useState8[1];

  var _useState9 = useState(null),
      _useState10 = _slicedToArray(_useState9, 2),
      playerType = _useState10[0],
      setPlayerType = _useState10[1];

  var _useState11 = useState(!!document.getElementById('title').value ? document.getElementById('title').value : 'Player Title'),
      _useState12 = _slicedToArray(_useState11, 2),
      playerTitle = _useState12[0],
      setPlayerTitle = _useState12[1];

  var _useState13 = useState({
    init: true,
    updating: false,
    deleting: false
  }),
      _useState14 = _slicedToArray(_useState13, 2),
      state = _useState14[0],
      setState = _useState14[1];

  var updateData = function updateData() {
    setState(_objectSpread(_objectSpread({}, state), {}, {
      updating: true
    }));
    wp.apiFetch({
      method: 'POST',
      path: "aiovp/v1/player-data/".concat(postID),
      headers: {
        'Content-Type': 'application/json',
        'X-WP-Nonce': aiovp.nonce
      },
      data: {
        videos: videos,
        postID: postID,
        playerType: playerType,
        playerTitle: playerTitle
      }
    }).then(function () {
      setState(_objectSpread(_objectSpread({}, state), {}, {
        updating: false
      }));
      Object(_components_functions__WEBPACK_IMPORTED_MODULE_0__["updateURL"])(editLink);
    });
  };

  var getData = function getData() {
    wp.apiFetch({
      path: "aiovp/v1/player-data/".concat(postID)
    }).then(function (_ref2) {
      var _ref2$data = _ref2.data,
          videos = _ref2$data.videos,
          playerType = _ref2$data.playerType,
          playerTitle = _ref2$data.playerTitle;

      if (!!videos) {
        setVideos(_toConsumableArray(videos));
      }

      setPlayerType(playerType);
      setPlayerTitle(playerTitle);
      setState(_objectSpread(_objectSpread({}, state), {}, {
        init: false
      }));
    });
  };

  useEffect(function () {
    getData();

    document.getElementById('title').oninput = function (e) {
      setPlayerTitle(e.target.value);
      jQuery(window).off('beforeunload');
    };
  }, []);
  return /*#__PURE__*/React.createElement("div", {
    className: classnames__WEBPACK_IMPORTED_MODULE_4___default()('aiovp-metabox', "player-type-".concat(playerType))
  }, state.init ? /*#__PURE__*/React.createElement(Spinner, null) : /*#__PURE__*/React.createElement(React.Fragment, null, !!playerType || /*#__PURE__*/React.createElement(_PlayerType__WEBPACK_IMPORTED_MODULE_3__["default"], {
    setPlayerType: setPlayerType
  }), !!playerType && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_Top__WEBPACK_IMPORTED_MODULE_1__["default"], {
    playerType: playerType,
    setPlayerType: setPlayerType,
    updateData: updateData,
    state: state
  }), /*#__PURE__*/React.createElement("div", {
    className: "aiovp-metabox-sidebar"
  }, /*#__PURE__*/React.createElement("button", {
    type: 'button',
    className: 'videos' === tab && 'active',
    onClick: function onClick() {
      return setTab('videos');
    }
  }, /*#__PURE__*/React.createElement("i", {
    className: "dashicons dashicons-".concat('single' === playerType ? 'media' : 'playlist', "-video")
  }), 'single' === playerType ? 'Video' : 'Videos'), /*#__PURE__*/React.createElement("button", {
    type: 'button',
    className: 'skin' === tab && 'active',
    onClick: function onClick() {
      return setTab('skin');
    }
  }, /*#__PURE__*/React.createElement("i", {
    className: "dashicons dashicons-format-video"
  }), " Skin"), /*#__PURE__*/React.createElement("button", {
    type: 'button',
    className: 'customization' === tab && 'active',
    onClick: function onClick() {
      return setTab('customization');
    }
  }, /*#__PURE__*/React.createElement("i", {
    className: "dashicons dashicons-admin-appearance"
  }), " Customization")), /*#__PURE__*/React.createElement("div", {
    className: "aiovp-metabox-body"
  }, 'videos' === tab && /*#__PURE__*/React.createElement(_Videos__WEBPACK_IMPORTED_MODULE_2__["default"], {
    videos: videos,
    setVideos: setVideos,
    playerType: playerType
  })))));
};

var app = document.getElementById('aiovp_metabox_app');

if (app) {
  var editLink = app.getAttribute('data-edit_link');
  wp.element.render( /*#__PURE__*/React.createElement(Metabox, {
    editLink: editLink
  }), app);
}

/***/ }),

/***/ "./node_modules/classnames/index.js":
/*!******************************************!*\
  !*** ./node_modules/classnames/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

/* global define */
(function () {
  'use strict';

  var hasOwn = {}.hasOwnProperty;

  function classNames() {
    var classes = [];

    for (var i = 0; i < arguments.length; i++) {
      var arg = arguments[i];
      if (!arg) continue;
      var argType = typeof arg;

      if (argType === 'string' || argType === 'number') {
        classes.push(arg);
      } else if (Array.isArray(arg)) {
        if (arg.length) {
          var inner = classNames.apply(null, arg);

          if (inner) {
            classes.push(inner);
          }
        }
      } else if (argType === 'object') {
        if (arg.toString === Object.prototype.toString) {
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes.push(key);
            }
          }
        } else {
          classes.push(arg.toString());
        }
      }
    }

    return classes.join(' ');
  }

  if ( true && module.exports) {
    classNames.default = classNames;
    module.exports = classNames;
  } else if (true) {
    // register as 'classnames', consistent with npm package name
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return classNames;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})();

/***/ }),

/***/ 1:
/*!**********************************!*\
  !*** multi ./assets/js/admin.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\xampp\htdocs\wpmilitary\wp-content\plugins\all-in-one-video-player\assets\js\admin.js */"./assets/js/admin.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL2FkbWluLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9jb21wb25lbnRzL2Z1bmN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvbWV0YWJveC9QbGF5ZXJUeXBlLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9tZXRhYm94L1RvcC5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvbWV0YWJveC9VcGxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvbWV0YWJveC9WaWRlb3MuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL21ldGFib3gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiXSwibmFtZXMiOlsidXBkYXRlUGFyYW0iLCJwYXJhbSIsImtleSIsIk9iamVjdCIsImtleXMiLCJ2YWx1ZSIsImFkZE9yUmVwbGFjZVBhcmFtIiwidXJsIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwic3RyaW5nVG9BZGQiLCJoYXNfcGFyYW0iLCJtYXRjaCIsInNlYXJjaCIsImluZGV4T2YiLCJzZWFyY2hQYXJhbXMiLCJzdWJzdHJpbmciLCJzcGxpdCIsImkiLCJsZW5ndGgiLCJqb2luIiwidXBkYXRlVVJMIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsImUiLCJjb25zb2xlIiwibG9nIiwiUGxheWVyVHlwZSIsInNldFBsYXllclR5cGUiLCJ3cCIsImNvbXBvbmVudHMiLCJTcGlubmVyIiwiU2VsZWN0Q29udHJvbCIsIlRvcCIsInN0YXRlIiwiaW5pdCIsInVwZGF0aW5nIiwiZGVsZXRpbmciLCJwbGF5ZXJUeXBlIiwidXBkYXRlRGF0YSIsImRlbGV0ZVBsYXllciIsInBvc3RJRCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJsYWJlbCIsImhhbmRsZUNoYW5nZSIsImFpb3ZwIiwiYWRtaW5fdXJsIiwieWVzIiwiY29uZmlybSIsIm9wZW4iLCJzaXRlX3VybCIsIlRleHRDb250cm9sIiwiVXBsb2FkZXIiLCJtZWRpYSIsIm9uQ2hhbmdlIiwiY29uZmlnIiwib3BlblVwbG9hZGVyIiwicHJldmVudERlZmF1bHQiLCJmaWxlX2ZyYW1lIiwiZnJhbWVzIiwidGl0bGUiLCJsaWJyYXJ5IiwidHlwZSIsImJ1dHRvbiIsInRleHQiLCJtdWx0aXBsZSIsIm9uIiwiYXR0YWNobWVudCIsImdldCIsImZpcnN0IiwidG9KU09OIiwiZGVsZXRlTWVkaWEiLCJ0YXJnZXQiLCJkZXNjIiwidXNlU3RhdGUiLCJlbGVtZW50IiwiVmlkZW9zIiwidmlkZW9zIiwic2V0VmlkZW9zIiwic291cmNlIiwidmlkZW8iLCJwb3N0ZXIiLCJhY3RpdmUiLCJzZXRBY3RpdmUiLCJvYmoiLCJyZW1vdmVWaWRlbyIsImluZGV4IiwiY29uZiIsImZpbHRlciIsIml0ZW0iLCJtYXAiLCJpc0FjdGl2ZSIsImNsYXNzTmFtZXMiLCJ1c2VFZmZlY3QiLCJNZXRhYm94IiwiZWRpdExpbmsiLCJ0YWIiLCJzZXRUYWIiLCJza2luIiwic2V0U2tpbiIsImN1c3RvbWl6YXRpb24iLCJzZXRDdXN0b21pemF0aW9uIiwicGxheWVyVGl0bGUiLCJzZXRQbGF5ZXJUaXRsZSIsInNldFN0YXRlIiwiYXBpRmV0Y2giLCJtZXRob2QiLCJwYXRoIiwiaGVhZGVycyIsIm5vbmNlIiwiZGF0YSIsInRoZW4iLCJnZXREYXRhIiwib25pbnB1dCIsImpRdWVyeSIsIm9mZiIsImFwcCIsImdldEF0dHJpYnV0ZSIsInJlbmRlciIsImhhc093biIsImhhc093blByb3BlcnR5IiwiY2xhc3NlcyIsImFyZ3VtZW50cyIsImFyZyIsImFyZ1R5cGUiLCJwdXNoIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5uZXIiLCJhcHBseSIsInRvU3RyaW5nIiwicHJvdG90eXBlIiwiY2FsbCIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0IiwiZGVmaW5lIl0sIm1hcHBpbmdzIjoiO1FBQUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7OztRQUdBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwwQ0FBMEMsZ0NBQWdDO1FBQzFFO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0Esd0RBQXdELGtCQUFrQjtRQUMxRTtRQUNBLGlEQUFpRCxjQUFjO1FBQy9EOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSx5Q0FBeUMsaUNBQWlDO1FBQzFFLGdIQUFnSCxtQkFBbUIsRUFBRTtRQUNySTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDJCQUEyQiwwQkFBMEIsRUFBRTtRQUN2RCxpQ0FBaUMsZUFBZTtRQUNoRDtRQUNBO1FBQ0E7O1FBRUE7UUFDQSxzREFBc0QsK0RBQStEOztRQUVySDtRQUNBOzs7UUFHQTtRQUNBOzs7Ozs7Ozs7Ozs7O0FDbEZBO0FBQUE7Ozs7Ozs7Ozs7Ozs7QUNBQTtBQUFBO0FBQUE7QUFBTyxTQUFTQSxXQUFULENBQXFCQyxLQUFyQixFQUE0QjtBQUMvQixNQUFNQyxHQUFHLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxLQUFaLEVBQW1CLENBQW5CLENBQVo7QUFDQSxNQUFNSSxLQUFLLEdBQUdKLEtBQUssQ0FBQ0MsR0FBRCxDQUFuQjs7QUFFQSxXQUFTSSxpQkFBVCxDQUEyQkwsS0FBM0IsRUFBa0NJLEtBQWxDLEVBQXlDO0FBQ3JDLFFBQU1FLEdBQUcsR0FBR0MsTUFBTSxDQUFDQyxRQUFQLENBQWdCQyxJQUE1QjtBQUVBLFFBQU1DLFdBQVcsR0FBRyxVQUFHVixLQUFILFNBQWNJLEtBQWxDO0FBRUEsUUFBTU8sU0FBUyxHQUFHTCxHQUFHLENBQUNNLEtBQUosQ0FBVSxLQUFWLENBQWxCOztBQUVBLFFBQUlMLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQkssTUFBaEIsS0FBMkIsRUFBL0IsRUFBbUM7QUFDL0IsdUJBQVVQLEdBQVYsU0FBZ0JLLFNBQVMsR0FBRyxHQUFILEdBQVMsR0FBbEMsU0FBd0NELFdBQXhDO0FBQ0g7O0FBRUQsUUFBSUgsTUFBTSxDQUFDQyxRQUFQLENBQWdCSyxNQUFoQixDQUF1QkMsT0FBdkIsV0FBa0NkLEtBQWxDLFlBQWdELENBQUMsQ0FBckQsRUFBd0Q7QUFDcEQsdUJBQVVNLEdBQVYsU0FBZ0JLLFNBQVMsR0FBRyxHQUFILEdBQVMsR0FBbEMsU0FBd0NELFdBQXhDO0FBQ0g7O0FBRUQsUUFBTUssWUFBWSxHQUFHUixNQUFNLENBQUNDLFFBQVAsQ0FBZ0JLLE1BQWhCLENBQXVCRyxTQUF2QixDQUFpQyxDQUFqQyxFQUFvQ0MsS0FBcEMsQ0FBMEMsR0FBMUMsQ0FBckI7O0FBRUEsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSCxZQUFZLENBQUNJLE1BQWpDLEVBQXlDRCxDQUFDLEVBQTFDLEVBQThDO0FBQzFDLFVBQUlILFlBQVksQ0FBQ0csQ0FBRCxDQUFaLENBQWdCSixPQUFoQixXQUEyQmQsS0FBM0IsVUFBdUMsQ0FBQyxDQUE1QyxFQUErQztBQUMzQ2Usb0JBQVksQ0FBQ0csQ0FBRCxDQUFaLEdBQWtCLFVBQUdsQixLQUFILFNBQWNJLEtBQWhDO0FBQ0E7QUFDSDtBQUNKOztBQUVELFdBQU9FLEdBQUcsQ0FBQ1csS0FBSixDQUFVLEdBQVYsRUFBZSxDQUFmLElBQW9CLEdBQXBCLEdBQTBCRixZQUFZLENBQUNLLElBQWIsQ0FBa0IsR0FBbEIsQ0FBakM7QUFDSDs7QUFFREMsV0FBUyxDQUFDaEIsaUJBQWlCLENBQUNKLEdBQUQsRUFBTUcsS0FBTixDQUFsQixDQUFUO0FBRUg7QUFFTSxTQUFTaUIsU0FBVCxDQUFtQmYsR0FBbkIsRUFBd0I7QUFFM0IsTUFBSTtBQUNBZ0IsV0FBTyxDQUFDQyxTQUFSLENBQWtCLEVBQWxCLEVBQXNCLEVBQXRCLEVBQTBCakIsR0FBMUI7QUFDSCxHQUZELENBRUUsT0FBT2tCLENBQVAsRUFBVTtBQUNSQyxXQUFPLENBQUNDLEdBQVIsQ0FBWUYsQ0FBWjtBQUNIO0FBQ0osQzs7Ozs7Ozs7Ozs7O0FDMUNEO0FBQUE7QUFBZSxTQUFTRyxVQUFULE9BQXFDO0FBQUEsTUFBaEJDLGFBQWdCLFFBQWhCQSxhQUFnQjtBQUNoRCxzQkFDSTtBQUFLLGFBQVMsRUFBRTtBQUFoQixrQkFDSSw4Q0FESixlQUdJLGdHQUhKLGVBS0k7QUFBSyxhQUFTLEVBQUM7QUFBZixrQkFDSTtBQUFLLGFBQVMsRUFBQyxhQUFmO0FBQTZCLFdBQU8sRUFBRSxtQkFBTTtBQUN4Q0EsbUJBQWEsQ0FBQyxRQUFELENBQWI7QUFDSDtBQUZELGtCQUdJO0FBQUcsYUFBUyxFQUFDO0FBQWIsSUFISixlQUlJLHdEQUpKLENBREosZUFRSTtBQUFLLGFBQVMsRUFBQyxhQUFmO0FBQTZCLFdBQU8sRUFBRTtBQUFBLGFBQU1BLGFBQWEsQ0FBQyxVQUFELENBQW5CO0FBQUE7QUFBdEMsa0JBQ0k7QUFBRyxhQUFTLEVBQUM7QUFBYixJQURKLGVBRUksMERBRkosQ0FSSixDQUxKLENBREo7QUFzQkgsQzs7Ozs7Ozs7Ozs7O0FDdkJEO0FBQUEscUJBQWlDQyxFQUFFLENBQUNDLFVBQXBDO0FBQUEsSUFBT0MsT0FBUCxrQkFBT0EsT0FBUDtBQUFBLElBQWdCQyxhQUFoQixrQkFBZ0JBLGFBQWhCOztBQUVBLElBQU1DLEdBQUcsR0FBRyxTQUFOQSxHQUFNLE9BQThGO0FBQUEsd0JBQTVGQyxLQUE0RjtBQUFBLE1BQXBGQyxJQUFvRixjQUFwRkEsSUFBb0Y7QUFBQSxNQUE5RUMsUUFBOEUsY0FBOUVBLFFBQThFO0FBQUEsTUFBcEVDLFFBQW9FLGNBQXBFQSxRQUFvRTtBQUFBLE1BQXpEQyxVQUF5RCxRQUF6REEsVUFBeUQ7QUFBQSxNQUE3Q1YsYUFBNkMsUUFBN0NBLGFBQTZDO0FBQUEsTUFBOUJXLFVBQThCLFFBQTlCQSxVQUE4QjtBQUFBLE1BQWxCQyxZQUFrQixRQUFsQkEsWUFBa0I7QUFDdEcsTUFBTUMsTUFBTSxHQUFHQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsU0FBeEIsRUFBbUN2QyxLQUFsRDtBQUVBLHNCQUNJO0FBQUssYUFBUyxFQUFDO0FBQWYsa0JBRUk7QUFBSyxhQUFTLEVBQUM7QUFBZixrQkFDSTtBQUFLLGFBQVMsRUFBQztBQUFmLGtCQUNJO0FBQU0sYUFBUyxFQUFDO0FBQWhCLGlCQURKLGVBRUk7QUFBRyxhQUFTLEVBQUM7QUFBYixJQUZKLGVBR0k7QUFBTyxNQUFFLEVBQUMsa0JBQVY7QUFBNkIsYUFBUyxFQUFDLFdBQXZDO0FBQW1ELFFBQUksRUFBQyxNQUF4RDtBQUErRCxZQUFRLE1BQXZFO0FBQ08sU0FBSyx3QkFBZ0JxQyxNQUFoQjtBQURaLElBSEosQ0FESixDQUZKLGVBV0k7QUFBSyxhQUFTLEVBQUM7QUFBZixrQkFDSSxvQkFBQyxhQUFEO0FBQ0ksU0FBSyxFQUFFLGdCQURYO0FBRUksU0FBSyxFQUFFSCxVQUZYO0FBR0ksV0FBTyxFQUFFLENBQ0w7QUFBQ00sV0FBSyxFQUFFLFVBQVI7QUFBb0J4QyxXQUFLLEVBQUU7QUFBM0IsS0FESyxFQUVMO0FBQUN3QyxXQUFLLEVBQUUsUUFBUjtBQUFrQnhDLFdBQUssRUFBRTtBQUF6QixLQUZLLENBSGI7QUFPSSxZQUFRLEVBQUUsa0JBQUFrQyxVQUFVO0FBQUEsYUFBSVYsYUFBYSxDQUFDVSxVQUFELENBQWpCO0FBQUE7QUFQeEIsSUFESixDQVhKLEVBdUJLLENBQUNILElBQUksSUFBSUMsUUFBVCxrQkFBc0Isb0JBQUMsT0FBRCxPQXZCM0IsZUF5Qkk7QUFBUSxRQUFJLEVBQUMsUUFBYjtBQUNRLFdBQU8sRUFBRSxtQkFBTTtBQUNYUyxrQkFBWSxDQUFDO0FBQUNULGdCQUFRLEVBQUU7QUFBWCxPQUFELENBQVo7QUFDQTdCLFlBQU0sQ0FBQ0MsUUFBUCxHQUFrQnNDLEtBQUssQ0FBQ0MsU0FBTixHQUFrQiwyQkFBcEM7QUFDSCxLQUpUO0FBS1EsYUFBUyxFQUFDO0FBTGxCLGtCQU1JO0FBQUssYUFBUyxFQUFDO0FBQWYsa0JBQ0k7QUFBTSxhQUFTLEVBQUM7QUFBaEIsMkJBREosZUFFSTtBQUFNLGFBQVMsRUFBQztBQUFoQixJQUZKLEVBR0tWLFFBQVEsR0FBRyxhQUFILEdBQW1CLE1BSGhDLENBTkosQ0F6QkosRUFzQ0ssQ0FBQyxDQUFDOUIsTUFBTSxDQUFDQyxRQUFQLENBQWdCQyxJQUFoQixDQUFxQkcsS0FBckIsQ0FBMkIsY0FBM0IsQ0FBRixpQkFDRDtBQUFRLFFBQUksRUFBQyxRQUFiO0FBQXNCLFdBQU8sRUFBRSxtQkFBTTtBQUNqQyxVQUFNb0MsR0FBRyxHQUFHQyxPQUFPLENBQUMsMENBQUQsQ0FBbkI7O0FBRUEsVUFBSUQsR0FBSixFQUFTO0FBQ0xSLG9CQUFZO0FBQ2Y7QUFFSixLQVBEO0FBT0csYUFBUyxFQUFDO0FBUGIsa0JBUUk7QUFBSyxhQUFTLEVBQUM7QUFBZixrQkFDSTtBQUFNLGFBQVMsRUFBQztBQUFoQixxQkFESixlQUVJO0FBQU0sYUFBUyxFQUFDO0FBQWhCLElBRkosRUFHS0gsUUFBUSxHQUFHLGFBQUgsR0FBbUIsUUFIaEMsQ0FSSixDQXZDSixlQXdESTtBQUFRLFFBQUksRUFBQyxRQUFiO0FBQ1EsV0FBTyxFQUFFLG1CQUFNO0FBQ1hFLGdCQUFVO0FBQ1ZoQyxZQUFNLENBQUMyQyxJQUFQLENBQVlKLEtBQUssQ0FBQ0ssUUFBTixzQ0FBNkNWLE1BQTdDLGFBQVo7QUFDSCxLQUpUO0FBS1EsYUFBUyxFQUFDO0FBTGxCLGtCQU9JO0FBQUssYUFBUyxFQUFDO0FBQWYsa0JBQ0k7QUFBTSxhQUFTLEVBQUM7QUFBaEIsc0JBREosZUFFSTtBQUFNLGFBQVMsRUFBQztBQUFoQixJQUZKLEVBR0tMLFFBQVEsR0FBRyxXQUFILEdBQWlCLFNBSDlCLENBUEosQ0F4REosZUF3RUk7QUFBUSxRQUFJLEVBQUMsUUFBYjtBQUFzQixXQUFPLEVBQUVHLFVBQS9CO0FBQTJDLGFBQVMsRUFBQztBQUFyRCxrQkFDSTtBQUFNLGFBQVMsRUFBQztBQUFoQixJQURKLEVBRUtILFFBQVEsR0FBRyxXQUFILEdBQWlCLGNBRjlCLENBeEVKLENBREo7QUFnRkgsQ0FuRkQ7O0FBcUZlSCxrRUFBZixFOzs7Ozs7Ozs7Ozs7QUN2RkE7QUFBQTtBQUFBLElBQU9tQixXQUFQLEdBQXNCdkIsRUFBRSxDQUFDQyxVQUF6QixDQUFPc0IsV0FBUDtBQUVlLFNBQVNDLFFBQVQsT0FBNkM7QUFBQSxNQUExQkMsS0FBMEIsUUFBMUJBLEtBQTBCO0FBQUEsTUFBbkJDLFNBQW1CLFFBQW5CQSxRQUFtQjtBQUFBLE1BQVRDLE1BQVMsUUFBVEEsTUFBUzs7QUFHeEQsTUFBTUMsWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBQ2pDLENBQUQsRUFBTztBQUN4QkEsS0FBQyxDQUFDa0MsY0FBRixHQUR3QixDQUd4Qjs7QUFDQSxRQUFNQyxVQUFVLEdBQUc5QixFQUFFLENBQUN5QixLQUFILENBQVNNLE1BQVQsQ0FBZ0JELFVBQWhCLEdBQTZCOUIsRUFBRSxDQUFDeUIsS0FBSCxDQUFTO0FBQ3JETyxXQUFLLEVBQUVMLE1BQU0sQ0FBQ0ssS0FEdUM7QUFFckRDLGFBQU8sRUFBRTtBQUNMQyxZQUFJLEVBQUVQLE1BQU0sQ0FBQ087QUFEUixPQUY0QztBQUtyREMsWUFBTSxFQUFFO0FBQ0pDLFlBQUksRUFBRVQsTUFBTSxDQUFDUztBQURULE9BTDZDO0FBUXJEQyxjQUFRLEVBQUU7QUFSMkMsS0FBVCxDQUFoRDtBQVdBUCxjQUFVLENBQUNRLEVBQVgsQ0FBYyxRQUFkLEVBQXdCLFlBQU07QUFFMUIsVUFBTUMsVUFBVSxHQUFHVCxVQUFVLENBQUN6QixLQUFYLEdBQW1CbUMsR0FBbkIsQ0FBdUIsV0FBdkIsRUFBb0NDLEtBQXBDLEdBQTRDQyxNQUE1QyxFQUFuQjs7QUFDQWhCLGVBQVEsQ0FBQ2EsVUFBRCxDQUFSO0FBQ0gsS0FKRCxFQWZ3QixDQXFCeEI7O0FBQ0FULGNBQVUsQ0FBQ1QsSUFBWDtBQUNILEdBdkJEOztBQXlCQSxNQUFNc0IsV0FBVyxHQUFHLFNBQWRBLFdBQWMsQ0FBQ2hELENBQUQsRUFBTztBQUN2QkEsS0FBQyxDQUFDa0MsY0FBRjs7QUFFQUgsYUFBUSxDQUFDLEVBQUQsQ0FBUjtBQUNILEdBSkQ7O0FBT0Esc0JBQ0ksdURBQ0k7QUFBSyxhQUFTLEVBQUM7QUFBZixrQkFDSTtBQUFPLFdBQU8sRUFBQztBQUFmLEtBQW1CQyxNQUFNLENBQUNaLEtBQTFCLENBREosZUFHSTtBQUFLLGFBQVMsRUFBQztBQUFmLEtBQ0ssWUFBWVksTUFBTSxDQUFDTyxJQUFuQixJQUEyQixDQUFDLENBQUNULEtBQTdCLGlCQUNEO0FBQUssT0FBRyxFQUFFQSxLQUFWO0FBQWlCLGFBQVMsRUFBRTtBQUE1QixJQUZKLGVBS0k7QUFBTyxRQUFJLEVBQUMsTUFBWjtBQUFtQixTQUFLLEVBQUVBLEtBQTFCO0FBQWlDLFlBQVEsRUFBRSxrQkFBQTlCLENBQUM7QUFBQSxhQUFJK0IsU0FBUSxDQUFDL0IsQ0FBQyxDQUFDaUQsTUFBRixDQUFTckUsS0FBVixDQUFaO0FBQUE7QUFBNUMsSUFMSixDQUhKLGVBV0k7QUFBUSxRQUFJLEVBQUUsUUFBZDtBQUF3QixhQUFTLEVBQUMsb0NBQWxDO0FBQXVFLFdBQU8sRUFBRXFEO0FBQWhGLGtCQUNJO0FBQUcsYUFBUyxFQUFDO0FBQWIsU0FESixDQVhKLEVBZUssQ0FBQyxDQUFDSCxLQUFGLGlCQUNEO0FBQVEsUUFBSSxFQUFFLFFBQWQ7QUFBd0IsYUFBUyxFQUFDLHdDQUFsQztBQUEyRSxXQUFPLEVBQUVrQjtBQUFwRixrQkFDSTtBQUFHLGFBQVMsRUFBQztBQUFiLFNBREosQ0FoQkosQ0FESixlQXVCSTtBQUFHLGFBQVMsRUFBQztBQUFiLEtBQTRCaEIsTUFBTSxDQUFDa0IsSUFBbkMsQ0F2QkosQ0FESjtBQTZCSCxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbEVEO0FBRUE7QUFFQSxJQUFPQyxRQUFQLEdBQW1COUMsRUFBRSxDQUFDK0MsT0FBdEIsQ0FBT0QsUUFBUDtBQUNBLHFCQUFxQzlDLEVBQUUsQ0FBQ0MsVUFBeEM7QUFBQSxJQUFPRSxhQUFQLGtCQUFPQSxhQUFQO0FBQUEsSUFBc0JvQixXQUF0QixrQkFBc0JBLFdBQXRCO0FBRWUsU0FBU3lCLE1BQVQsT0FBaUQ7QUFBQSxNQUFoQ0MsTUFBZ0MsUUFBaENBLE1BQWdDO0FBQUEsTUFBeEJDLFNBQXdCLFFBQXhCQSxTQUF3QjtBQUFBLE1BQWJ6QyxVQUFhLFFBQWJBLFVBQWE7QUFFNUR3QyxRQUFNLEdBQUcsQ0FBQyxDQUFDQSxNQUFNLENBQUMzRCxNQUFULEdBQWtCMkQsTUFBbEIsR0FBMkIsQ0FBQztBQUNqQ2pCLFNBQUssRUFBRSxFQUQwQjtBQUVqQ21CLFVBQU0sRUFBRSxTQUZ5QjtBQUdqQ0MsU0FBSyxFQUFFLEVBSDBCO0FBSWpDQyxVQUFNLEVBQUU7QUFKeUIsR0FBRCxDQUFwQzs7QUFPQSxrQkFBNEJQLFFBQVEsQ0FBQyxDQUFDLENBQUNHLE1BQUYsSUFBWUEsTUFBTSxDQUFDM0QsTUFBUCxLQUFrQixDQUE5QixHQUFrQyxDQUFsQyxHQUFzQyxJQUF2QyxDQUFwQztBQUFBO0FBQUEsTUFBT2dFLE1BQVA7QUFBQSxNQUFlQyxTQUFmOztBQUVBLE1BQU12QyxZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFDd0MsR0FBRCxFQUFTO0FBQzFCLFFBQU1wRixHQUFHLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZa0YsR0FBWixFQUFpQixDQUFqQixDQUFaO0FBQ0FQLFVBQU0sQ0FBQ0ssTUFBRCxDQUFOLENBQWVsRixHQUFmLElBQXNCb0YsR0FBRyxDQUFDcEYsR0FBRCxDQUF6QjtBQUVBOEUsYUFBUyxvQkFBS0QsTUFBTCxFQUFUO0FBQ0gsR0FMRDs7QUFPQSxNQUFNUSxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFDQyxLQUFELEVBQVc7QUFDM0IsUUFBTUMsSUFBSSxHQUFHdkMsT0FBTyxDQUFDLHdDQUFELENBQXBCOztBQUVBLFFBQUl1QyxJQUFKLEVBQVU7QUFDTlQsZUFBUyxDQUFDRCxNQUFNLENBQUNXLE1BQVAsQ0FBYyxVQUFDQyxJQUFELEVBQU94RSxDQUFQO0FBQUEsZUFBYUEsQ0FBQyxLQUFLcUUsS0FBbkI7QUFBQSxPQUFkLENBQUQsQ0FBVDtBQUNIO0FBQ0osR0FORDs7QUFRQSxNQUFJLGFBQWFqRCxVQUFqQixFQUE2QjtBQUN6QndDLFVBQU0sR0FBRyxtQkFBS0EsTUFBTSxDQUFDLENBQUQsQ0FBWCxFQUFUO0FBQ0g7O0FBR0Qsc0JBQ0k7QUFBSyxhQUFTLEVBQUM7QUFBZixrQkFDSTtBQUFJLGFBQVMsRUFBQztBQUFkLEtBQTJCLGFBQWF4QyxVQUFiLEdBQTBCLE9BQTFCLEdBQW9DLFFBQS9ELENBREosZUFHSTtBQUFLLGFBQVMsRUFBQztBQUFmLEtBRUssQ0FBQyxDQUFDd0MsTUFBRixJQUFZLENBQUMsQ0FBQ0EsTUFBTSxDQUFDM0QsTUFBckIsSUFBK0IyRCxNQUFNLENBQUNhLEdBQVAsQ0FBVyxpQkFBaUNKLEtBQWpDLEVBQTJDO0FBQUEsUUFBekMxQixLQUF5QyxTQUF6Q0EsS0FBeUM7QUFBQSxRQUFsQ21CLE1BQWtDLFNBQWxDQSxNQUFrQztBQUFBLFFBQTFCQyxLQUEwQixTQUExQkEsS0FBMEI7QUFBQSxRQUFuQkMsTUFBbUIsU0FBbkJBLE1BQW1CO0FBQ2xGLFFBQU1VLFFBQVEsR0FBR0wsS0FBSyxLQUFLSixNQUEzQjtBQUVBLHdCQUNJO0FBQUssZUFBUyxFQUFFVSxpREFBVSxDQUFDLFlBQUQsRUFBZTtBQUFDVixjQUFNLEVBQUVTO0FBQVQsT0FBZjtBQUExQixPQUVLLGFBQWF0RCxVQUFiLGlCQUNEO0FBQUssZUFBUyxFQUFDO0FBQWYsb0JBQ0ksZ0NBQUtpRCxLQUFLLEdBQUcsQ0FBYixRQUFrQjFCLEtBQWxCLENBREosRUFHS2lCLE1BQU0sQ0FBQzNELE1BQVAsR0FBZ0IsQ0FBaEIsaUJBQ0Q7QUFBUSxVQUFJLEVBQUUsUUFBZDtBQUF3QixlQUFTLEVBQUUsMkJBQW5DO0FBQ1EsYUFBTyxFQUFFO0FBQUEsZUFBTW1FLFdBQVcsQ0FBQ0MsS0FBRCxDQUFqQjtBQUFBO0FBRGpCLG9CQUVJO0FBQUcsZUFBUyxFQUFDO0FBQWIsTUFGSixDQUpKLGVBVUk7QUFBUSxVQUFJLEVBQUUsUUFBZDtBQUF3QixlQUFTLEVBQUUsdUJBQW5DO0FBQ1EsYUFBTyxFQUFFO0FBQUEsZUFBTUgsU0FBUyxDQUFDUSxRQUFRLEdBQUcsSUFBSCxHQUFVTCxLQUFuQixDQUFmO0FBQUE7QUFEakIsb0JBRUk7QUFBRyxlQUFTLEVBQUVNLGlEQUFVLENBQUMsV0FBRCxFQUFjO0FBQUMscUNBQTZCLENBQUNEO0FBQS9CLE9BQWQsRUFBd0Q7QUFBQyxtQ0FBMkJBO0FBQTVCLE9BQXhEO0FBQXhCLE1BRkosQ0FWSixDQUhKLEVBcUJLLENBQUNBLFFBQVEsSUFBSSxhQUFhdEQsVUFBMUIsa0JBQ0Q7QUFBSyxlQUFTLEVBQUM7QUFBZixvQkFDSTtBQUFLLGVBQVMsRUFBQztBQUFmLG9CQUNJLG9CQUFDLFdBQUQ7QUFDSSxXQUFLLEVBQUUsT0FEWDtBQUVJLFdBQUssRUFBRXVCLEtBRlg7QUFHSSxjQUFRLEVBQUUsa0JBQUFBLEtBQUs7QUFBQSxlQUFJaEIsWUFBWSxDQUFDO0FBQUNnQixlQUFLLEVBQUxBO0FBQUQsU0FBRCxDQUFoQjtBQUFBLE9BSG5CO0FBSUksVUFBSSxFQUFFO0FBSlYsTUFESixDQURKLGVBVUk7QUFBSyxlQUFTLEVBQUM7QUFBZixvQkFFSSxvQkFBQyxhQUFEO0FBQ0ksV0FBSyxFQUFFLFFBRFg7QUFFSSxXQUFLLEVBQUVtQixNQUZYO0FBR0ksYUFBTyxFQUFFLENBQ0w7QUFBQ3BDLGFBQUssRUFBRSxTQUFSO0FBQW1CeEMsYUFBSyxFQUFFO0FBQTFCLE9BREssRUFFTDtBQUFDd0MsYUFBSyxFQUFFLFlBQVI7QUFBc0J4QyxhQUFLLEVBQUU7QUFBN0IsT0FGSyxFQUdMO0FBQUN3QyxhQUFLLEVBQUUsVUFBUjtBQUFvQnhDLGFBQUssRUFBRTtBQUEzQixPQUhLLEVBSUw7QUFBQ3dDLGFBQUssRUFBRSxPQUFSO0FBQWlCeEMsYUFBSyxFQUFFO0FBQXhCLE9BSkssRUFLTDtBQUFDd0MsYUFBSyxFQUFFLFFBQVI7QUFBa0J4QyxhQUFLLEVBQUU7QUFBekIsT0FMSyxFQU1MO0FBQUN3QyxhQUFLLEVBQUUsWUFBUjtBQUFzQnhDLGFBQUssRUFBRTtBQUE3QixPQU5LLEVBT0w7QUFBQ3dDLGFBQUssRUFBRSxRQUFSO0FBQWtCeEMsYUFBSyxFQUFFO0FBQXpCLE9BUEssRUFRTDtBQUFDd0MsYUFBSyxFQUFFLGFBQVI7QUFBdUJ4QyxhQUFLLEVBQUU7QUFBOUIsT0FSSyxFQVNMO0FBQUN3QyxhQUFLLEVBQUUsVUFBUjtBQUFvQnhDLGFBQUssRUFBRTtBQUEzQixPQVRLLEVBVUw7QUFBQ3dDLGFBQUssRUFBRSxTQUFSO0FBQW1CeEMsYUFBSyxFQUFFO0FBQTFCLE9BVkssRUFXTDtBQUFDd0MsYUFBSyxFQUFFLGFBQVI7QUFBdUJ4QyxhQUFLLEVBQUU7QUFBOUIsT0FYSyxDQUhiO0FBZ0JJLGNBQVEsRUFBRSxrQkFBQTRFLE1BQU07QUFBQSxlQUFJbkMsWUFBWSxDQUFDO0FBQUNtQyxnQkFBTSxFQUFOQTtBQUFELFNBQUQsQ0FBaEI7QUFBQSxPQWhCcEI7QUFpQkksVUFBSSxFQUFFO0FBakJWLE1BRkosQ0FWSixlQWlDSTtBQUFLLGVBQVMsRUFBQztBQUFmLE9BQ0ssaUJBQWlCQSxNQUFqQixnQkFDRyxvQkFBQyxpREFBRDtBQUNJLFdBQUssRUFBRUMsS0FEWDtBQUVJLGNBQVEsRUFBRSxrQkFBQTNCLEtBQUs7QUFBQSxlQUFJVCxZQUFZLENBQUM7QUFBQ29DLGVBQUssRUFBRTNCLEtBQUssQ0FBQ2hEO0FBQWQsU0FBRCxDQUFoQjtBQUFBLE9BRm5CO0FBR0ksWUFBTSxFQUFFO0FBQ0p1RCxhQUFLLEVBQUUsY0FESDtBQUVKRSxZQUFJLEVBQUUsT0FGRjtBQUdKRSxZQUFJLEVBQUUsZ0JBSEY7QUFJSnJCLGFBQUssRUFBRSxjQUpIO0FBS0o4QixZQUFJLEVBQUU7QUFMRjtBQUhaLE1BREgsZ0JBYUcsb0JBQUMsV0FBRDtBQUNJLFdBQUssRUFBRSxXQURYO0FBRUksV0FBSyxFQUFFTyxLQUZYO0FBR0ksY0FBUSxFQUFFLGtCQUFBQSxLQUFLO0FBQUEsZUFBSXBDLFlBQVksQ0FBQztBQUFDb0MsZUFBSyxFQUFMQTtBQUFELFNBQUQsQ0FBaEI7QUFBQSxPQUhuQjtBQUlJLFVBQUksRUFBRTtBQUpWLE1BZFIsQ0FqQ0osZUF3REk7QUFBSyxlQUFTLEVBQUU7QUFBaEIsb0JBQ0ksb0JBQUMsaURBQUQ7QUFDSSxXQUFLLEVBQUVDLE1BRFg7QUFFSSxjQUFRLEVBQUUsa0JBQUE1QixLQUFLO0FBQUEsZUFBSVQsWUFBWSxDQUFDO0FBQUNxQyxnQkFBTSxFQUFFNUIsS0FBSyxDQUFDaEQ7QUFBZixTQUFELENBQWhCO0FBQUEsT0FGbkI7QUFHSSxZQUFNLEVBQUU7QUFDSnVELGFBQUssRUFBRSxjQURIO0FBRUpFLFlBQUksRUFBRSxPQUZGO0FBR0pFLFlBQUksRUFBRSxnQkFIRjtBQUlKckIsYUFBSyxFQUFFLGNBSkg7QUFLSjhCLFlBQUksRUFBRTtBQUxGO0FBSFosTUFESixDQXhESixDQXRCSixDQURKO0FBaUdILEdBcEcrQixDQUZwQyxFQXlHSyxhQUFhcEMsVUFBYixpQkFDRDtBQUFLLGFBQVMsRUFBQztBQUFmLGtCQUNJO0FBQVEsUUFBSSxFQUFFLFFBQWQ7QUFBd0IsYUFBUyxFQUFFdUQsaURBQVUsQ0FBQyxnQkFBRCxDQUE3QztBQUNRLFdBQU8sRUFBRSxtQkFBTTtBQUNYZCxlQUFTLDhCQUFLRCxNQUFMLElBQWEsRUFBYixHQUFUO0FBQ0FNLGVBQVMsQ0FBQ04sTUFBTSxDQUFDM0QsTUFBUixDQUFUO0FBQ0g7QUFKVCxrQkFLSTtBQUFHLGFBQVMsRUFBQztBQUFiLElBTEosZUFNSSxrREFOSixDQURKLENBMUdKLENBSEosQ0FESjtBQThISCxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNwS0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLGtCQUE4QlUsRUFBRSxDQUFDK0MsT0FBakM7QUFBQSxJQUFPRCxRQUFQLGVBQU9BLFFBQVA7QUFBQSxJQUFpQm1CLFNBQWpCLGVBQWlCQSxTQUFqQjtBQUNBLElBQU8vRCxPQUFQLEdBQWtCRixFQUFFLENBQUNDLFVBQXJCLENBQU9DLE9BQVA7O0FBRUEsSUFBTWdFLE9BQU8sR0FBRyxTQUFWQSxPQUFVLE9BQWdCO0FBQUEsTUFBZEMsUUFBYyxRQUFkQSxRQUFjO0FBQzVCLE1BQU12RCxNQUFNLEdBQUdDLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixTQUF4QixFQUFtQ3ZDLEtBQWxEOztBQUVBLGtCQUFzQnVFLFFBQVEsQ0FBQyxRQUFELENBQTlCO0FBQUE7QUFBQSxNQUFPc0IsR0FBUDtBQUFBLE1BQVlDLE1BQVo7O0FBQ0EsbUJBQTRCdkIsUUFBUSxDQUFDLEVBQUQsQ0FBcEM7QUFBQTtBQUFBLE1BQU9HLE1BQVA7QUFBQSxNQUFlQyxTQUFmOztBQUNBLG1CQUF3QkosUUFBUSxDQUFDLE9BQUQsQ0FBaEM7QUFBQTtBQUFBLE1BQU93QixJQUFQO0FBQUEsTUFBYUMsT0FBYjs7QUFDQSxtQkFBMEN6QixRQUFRLENBQUMsRUFBRCxDQUFsRDtBQUFBO0FBQUEsTUFBTzBCLGFBQVA7QUFBQSxNQUFzQkMsZ0JBQXRCOztBQUNBLG1CQUFvQzNCLFFBQVEsQ0FBQyxJQUFELENBQTVDO0FBQUE7QUFBQSxNQUFPckMsVUFBUDtBQUFBLE1BQW1CVixhQUFuQjs7QUFDQSxvQkFBc0MrQyxRQUFRLENBQUMsQ0FBQyxDQUFDakMsUUFBUSxDQUFDQyxjQUFULENBQXdCLE9BQXhCLEVBQWlDdkMsS0FBbkMsR0FBMkNzQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsT0FBeEIsRUFBaUN2QyxLQUE1RSxHQUFvRixjQUFyRixDQUE5QztBQUFBO0FBQUEsTUFBT21HLFdBQVA7QUFBQSxNQUFvQkMsY0FBcEI7O0FBRUEsb0JBQTBCN0IsUUFBUSxDQUFDO0FBQy9CeEMsUUFBSSxFQUFFLElBRHlCO0FBRS9CQyxZQUFRLEVBQUUsS0FGcUI7QUFHL0JDLFlBQVEsRUFBRTtBQUhxQixHQUFELENBQWxDO0FBQUE7QUFBQSxNQUFPSCxLQUFQO0FBQUEsTUFBY3VFLFFBQWQ7O0FBTUEsTUFBTWxFLFVBQVUsR0FBRyxTQUFiQSxVQUFhLEdBQU07QUFFckJrRSxZQUFRLGlDQUFLdkUsS0FBTDtBQUFZRSxjQUFRLEVBQUU7QUFBdEIsT0FBUjtBQUVBUCxNQUFFLENBQUM2RSxRQUFILENBQVk7QUFDUkMsWUFBTSxFQUFFLE1BREE7QUFFUkMsVUFBSSxpQ0FBMEJuRSxNQUExQixDQUZJO0FBR1JvRSxhQUFPLEVBQUU7QUFDTCx3QkFBZ0Isa0JBRFg7QUFFTCxzQkFBYy9ELEtBQUssQ0FBQ2dFO0FBRmYsT0FIRDtBQVFSQyxVQUFJLEVBQUU7QUFBQ2pDLGNBQU0sRUFBTkEsTUFBRDtBQUFTckMsY0FBTSxFQUFOQSxNQUFUO0FBQWlCSCxrQkFBVSxFQUFWQSxVQUFqQjtBQUE2QmlFLG1CQUFXLEVBQVhBO0FBQTdCO0FBUkUsS0FBWixFQVVHUyxJQVZILENBVVEsWUFBTTtBQUNWUCxjQUFRLGlDQUFLdkUsS0FBTDtBQUFZRSxnQkFBUSxFQUFFO0FBQXRCLFNBQVI7QUFDQWYsNkVBQVMsQ0FBQzJFLFFBQUQsQ0FBVDtBQUNILEtBYkQ7QUFjSCxHQWxCRDs7QUFvQkEsTUFBTWlCLE9BQU8sR0FBRyxTQUFWQSxPQUFVLEdBQU07QUFFbEJwRixNQUFFLENBQUM2RSxRQUFILENBQVk7QUFDUkUsVUFBSSxpQ0FBMEJuRSxNQUExQjtBQURJLEtBQVosRUFFR3VFLElBRkgsQ0FFUSxpQkFBK0M7QUFBQSw2QkFBN0NELElBQTZDO0FBQUEsVUFBdENqQyxNQUFzQyxjQUF0Q0EsTUFBc0M7QUFBQSxVQUE5QnhDLFVBQThCLGNBQTlCQSxVQUE4QjtBQUFBLFVBQWxCaUUsV0FBa0IsY0FBbEJBLFdBQWtCOztBQUVuRCxVQUFJLENBQUMsQ0FBQ3pCLE1BQU4sRUFBYztBQUNWQyxpQkFBUyxvQkFBS0QsTUFBTCxFQUFUO0FBQ0g7O0FBRURsRCxtQkFBYSxDQUFDVSxVQUFELENBQWI7QUFDQWtFLG9CQUFjLENBQUNELFdBQUQsQ0FBZDtBQUVBRSxjQUFRLGlDQUFLdkUsS0FBTDtBQUFZQyxZQUFJLEVBQUU7QUFBbEIsU0FBUjtBQUNILEtBWkQ7QUFhSCxHQWZEOztBQWlCQTJELFdBQVMsQ0FBQyxZQUFNO0FBQ1ptQixXQUFPOztBQUdQdkUsWUFBUSxDQUFDQyxjQUFULENBQXdCLE9BQXhCLEVBQWlDdUUsT0FBakMsR0FBMkMsVUFBQzFGLENBQUQsRUFBTztBQUM5Q2dGLG9CQUFjLENBQUNoRixDQUFDLENBQUNpRCxNQUFGLENBQVNyRSxLQUFWLENBQWQ7QUFDQStHLFlBQU0sQ0FBQzVHLE1BQUQsQ0FBTixDQUFlNkcsR0FBZixDQUFtQixjQUFuQjtBQUNILEtBSEQ7QUFJSCxHQVJRLEVBUU4sRUFSTSxDQUFUO0FBV0Esc0JBQ0k7QUFBSyxhQUFTLEVBQUV2QixpREFBVSxDQUFDLGVBQUQsd0JBQWlDdkQsVUFBakM7QUFBMUIsS0FFS0osS0FBSyxDQUFDQyxJQUFOLGdCQUFhLG9CQUFDLE9BQUQsT0FBYixnQkFDRywwQ0FDSyxDQUFDLENBQUNHLFVBQUYsaUJBQWdCLG9CQUFDLG1EQUFEO0FBQVksaUJBQWEsRUFBRVY7QUFBM0IsSUFEckIsRUFHSyxDQUFDLENBQUNVLFVBQUYsaUJBQ0QsdURBQ0ksb0JBQUMsNENBQUQ7QUFBSyxjQUFVLEVBQUVBLFVBQWpCO0FBQTZCLGlCQUFhLEVBQUVWLGFBQTVDO0FBQTJELGNBQVUsRUFBRVcsVUFBdkU7QUFDSyxTQUFLLEVBQUVMO0FBRFosSUFESixlQUtJO0FBQUssYUFBUyxFQUFDO0FBQWYsa0JBRUk7QUFBUSxRQUFJLEVBQUUsUUFBZDtBQUF3QixhQUFTLEVBQUUsYUFBYStELEdBQWIsSUFBb0IsUUFBdkQ7QUFDUSxXQUFPLEVBQUU7QUFBQSxhQUFNQyxNQUFNLENBQUMsUUFBRCxDQUFaO0FBQUE7QUFEakIsa0JBRUk7QUFBRyxhQUFTLGdDQUF5QixhQUFhNUQsVUFBYixHQUEwQixPQUExQixHQUFvQyxVQUE3RDtBQUFaLElBRkosRUFHSyxhQUFhQSxVQUFiLEdBQTBCLE9BQTFCLEdBQW9DLFFBSHpDLENBRkosZUFRSTtBQUFRLFFBQUksRUFBRSxRQUFkO0FBQXdCLGFBQVMsRUFBRSxXQUFXMkQsR0FBWCxJQUFrQixRQUFyRDtBQUNRLFdBQU8sRUFBRTtBQUFBLGFBQU1DLE1BQU0sQ0FBQyxNQUFELENBQVo7QUFBQTtBQURqQixrQkFFSTtBQUFHLGFBQVMsRUFBQztBQUFiLElBRkosVUFSSixlQWFJO0FBQVEsUUFBSSxFQUFFLFFBQWQ7QUFBd0IsYUFBUyxFQUFFLG9CQUFvQkQsR0FBcEIsSUFBMkIsUUFBOUQ7QUFDUSxXQUFPLEVBQUU7QUFBQSxhQUFNQyxNQUFNLENBQUMsZUFBRCxDQUFaO0FBQUE7QUFEakIsa0JBRUk7QUFBRyxhQUFTLEVBQUM7QUFBYixJQUZKLG1CQWJKLENBTEosZUEwQkk7QUFBSyxhQUFTLEVBQUM7QUFBZixLQUNLLGFBQWFELEdBQWIsaUJBQ0Qsb0JBQUMsK0NBQUQ7QUFDSSxVQUFNLEVBQUVuQixNQURaO0FBRUksYUFBUyxFQUFFQyxTQUZmO0FBR0ksY0FBVSxFQUFFekM7QUFIaEIsSUFGSixDQTFCSixDQUpKLENBSFIsQ0FESjtBQWtESCxDQWxIRDs7QUFxSEEsSUFBTStFLEdBQUcsR0FBRzNFLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixtQkFBeEIsQ0FBWjs7QUFFQSxJQUFJMEUsR0FBSixFQUFTO0FBQ0wsTUFBTXJCLFFBQVEsR0FBR3FCLEdBQUcsQ0FBQ0MsWUFBSixDQUFpQixnQkFBakIsQ0FBakI7QUFFQXpGLElBQUUsQ0FBQytDLE9BQUgsQ0FBVzJDLE1BQVgsZUFBa0Isb0JBQUMsT0FBRDtBQUFTLFlBQVEsRUFBRXZCO0FBQW5CLElBQWxCLEVBQWtEcUIsR0FBbEQ7QUFDSCxDOzs7Ozs7Ozs7OztBQ3BJRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBRUMsYUFBWTtBQUNaOztBQUVBLE1BQUlHLE1BQU0sR0FBRyxHQUFHQyxjQUFoQjs7QUFFQSxXQUFTNUIsVUFBVCxHQUFzQjtBQUNyQixRQUFJNkIsT0FBTyxHQUFHLEVBQWQ7O0FBRUEsU0FBSyxJQUFJeEcsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3lHLFNBQVMsQ0FBQ3hHLE1BQTlCLEVBQXNDRCxDQUFDLEVBQXZDLEVBQTJDO0FBQzFDLFVBQUkwRyxHQUFHLEdBQUdELFNBQVMsQ0FBQ3pHLENBQUQsQ0FBbkI7QUFDQSxVQUFJLENBQUMwRyxHQUFMLEVBQVU7QUFFVixVQUFJQyxPQUFPLEdBQUcsT0FBT0QsR0FBckI7O0FBRUEsVUFBSUMsT0FBTyxLQUFLLFFBQVosSUFBd0JBLE9BQU8sS0FBSyxRQUF4QyxFQUFrRDtBQUNqREgsZUFBTyxDQUFDSSxJQUFSLENBQWFGLEdBQWI7QUFDQSxPQUZELE1BRU8sSUFBSUcsS0FBSyxDQUFDQyxPQUFOLENBQWNKLEdBQWQsQ0FBSixFQUF3QjtBQUM5QixZQUFJQSxHQUFHLENBQUN6RyxNQUFSLEVBQWdCO0FBQ2YsY0FBSThHLEtBQUssR0FBR3BDLFVBQVUsQ0FBQ3FDLEtBQVgsQ0FBaUIsSUFBakIsRUFBdUJOLEdBQXZCLENBQVo7O0FBQ0EsY0FBSUssS0FBSixFQUFXO0FBQ1ZQLG1CQUFPLENBQUNJLElBQVIsQ0FBYUcsS0FBYjtBQUNBO0FBQ0Q7QUFDRCxPQVBNLE1BT0EsSUFBSUosT0FBTyxLQUFLLFFBQWhCLEVBQTBCO0FBQ2hDLFlBQUlELEdBQUcsQ0FBQ08sUUFBSixLQUFpQmpJLE1BQU0sQ0FBQ2tJLFNBQVAsQ0FBaUJELFFBQXRDLEVBQWdEO0FBQy9DLGVBQUssSUFBSWxJLEdBQVQsSUFBZ0IySCxHQUFoQixFQUFxQjtBQUNwQixnQkFBSUosTUFBTSxDQUFDYSxJQUFQLENBQVlULEdBQVosRUFBaUIzSCxHQUFqQixLQUF5QjJILEdBQUcsQ0FBQzNILEdBQUQsQ0FBaEMsRUFBdUM7QUFDdEN5SCxxQkFBTyxDQUFDSSxJQUFSLENBQWE3SCxHQUFiO0FBQ0E7QUFDRDtBQUNELFNBTkQsTUFNTztBQUNOeUgsaUJBQU8sQ0FBQ0ksSUFBUixDQUFhRixHQUFHLENBQUNPLFFBQUosRUFBYjtBQUNBO0FBQ0Q7QUFDRDs7QUFFRCxXQUFPVCxPQUFPLENBQUN0RyxJQUFSLENBQWEsR0FBYixDQUFQO0FBQ0E7O0FBRUQsTUFBSSxTQUFpQ2tILE1BQU0sQ0FBQ0MsT0FBNUMsRUFBcUQ7QUFDcEQxQyxjQUFVLENBQUMyQyxPQUFYLEdBQXFCM0MsVUFBckI7QUFDQXlDLFVBQU0sQ0FBQ0MsT0FBUCxHQUFpQjFDLFVBQWpCO0FBQ0EsR0FIRCxNQUdPLElBQUksSUFBSixFQUFrRjtBQUN4RjtBQUNBNEMscUNBQXFCLEVBQWYsbUNBQW1CLFlBQVk7QUFDcEMsYUFBTzVDLFVBQVA7QUFDQSxLQUZLO0FBQUEsb0dBQU47QUFHQSxHQUxNLE1BS0EsRUFFTjtBQUNELENBbERBLEdBQUQsQyIsImZpbGUiOiJhZG1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcbiIsImltcG9ydCAnLi9tZXRhYm94JztcclxuIiwiZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVBhcmFtKHBhcmFtKSB7XHJcbiAgICBjb25zdCBrZXkgPSBPYmplY3Qua2V5cyhwYXJhbSlbMF07XHJcbiAgICBjb25zdCB2YWx1ZSA9IHBhcmFtW2tleV07XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkT3JSZXBsYWNlUGFyYW0ocGFyYW0sIHZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XHJcblxyXG4gICAgICAgIGNvbnN0IHN0cmluZ1RvQWRkID0gYCR7cGFyYW19PWAgKyB2YWx1ZTtcclxuXHJcbiAgICAgICAgY29uc3QgaGFzX3BhcmFtID0gdXJsLm1hdGNoKC9cXD8uLyk7XHJcblxyXG4gICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uc2VhcmNoID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgJHt1cmx9JHtoYXNfcGFyYW0gPyAnJicgOiAnPyd9JHtzdHJpbmdUb0FkZH1gO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guaW5kZXhPZihgJHtwYXJhbX09YCkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgJHt1cmx9JHtoYXNfcGFyYW0gPyAnJicgOiAnPyd9JHtzdHJpbmdUb0FkZH1gO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2VhcmNoUGFyYW1zID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSkuc3BsaXQoXCImXCIpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlYXJjaFBhcmFtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoc2VhcmNoUGFyYW1zW2ldLmluZGV4T2YoYCR7cGFyYW19PWApID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIHNlYXJjaFBhcmFtc1tpXSA9IGAke3BhcmFtfT1gICsgdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHVybC5zcGxpdChcIj9cIilbMF0gKyBcIj9cIiArIHNlYXJjaFBhcmFtcy5qb2luKFwiJlwiKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVVUkwoYWRkT3JSZXBsYWNlUGFyYW0oa2V5LCB2YWx1ZSkpO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVVSTCh1cmwpIHtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGhpc3RvcnkucHVzaFN0YXRlKCcnLCAnJywgdXJsKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgIH1cclxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBsYXllclR5cGUoe3NldFBsYXllclR5cGV9KSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXsnYWlvdnAtbWV0YWJveC1ib2R5IHBsYXllcnR5cGUtc2VsZWN0aW9uJ30+XHJcbiAgICAgICAgICAgIDxoMz5QbGF5ZXIgVHlwZTwvaDM+XHJcblxyXG4gICAgICAgICAgICA8aDQ+U2VsZWN0IHRoZSBwbGF5ZXIgdHlwZSB0byBvcHRpbWl6ZSB0aGUgcGxheWVyIGZvciB5b3VyIHVzYWdlLjwvaDQ+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYXllci10eXBlc1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwbGF5ZXItdHlwZVwiIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRQbGF5ZXJUeXBlKCdzaW5nbGUnKVxyXG4gICAgICAgICAgICAgICAgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZGFzaGljb25zIGRhc2hpY29ucy1tZWRpYS12aWRlb1wiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TaW5nbGUgVmlkZW8gUGxheWVyPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwbGF5ZXItdHlwZVwiIG9uQ2xpY2s9eygpID0+IHNldFBsYXllclR5cGUoJ3BsYXlsaXN0Jyl9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImRhc2hpY29ucyBkYXNoaWNvbnMtcGxheWxpc3QtdmlkZW9cIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+VmlkZW8gUGxheWxpc3QgUGxheWVyPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufSIsImNvbnN0IHtTcGlubmVyLCBTZWxlY3RDb250cm9sfSA9IHdwLmNvbXBvbmVudHM7XHJcblxyXG5jb25zdCBUb3AgPSAoe3N0YXRlOiB7aW5pdCwgdXBkYXRpbmcsIGRlbGV0aW5nfSwgcGxheWVyVHlwZSwgc2V0UGxheWVyVHlwZSwgdXBkYXRlRGF0YSwgZGVsZXRlUGxheWVyfSkgPT4ge1xyXG4gICAgY29uc3QgcG9zdElEID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvc3RfSUQnKS52YWx1ZTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWlvdnAtbWV0YWJveC10b3BcIj5cclxuXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGxheWVyX3Nob3J0Y29kZVwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0b29sdGlwLXdyYXBcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0b29sdGlwLXRleHRcIj5TaG9ydGNvZGU8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZGFzaGljb25zIGRhc2hpY29ucy1zaG9ydGNvZGVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPVwicGxheWVyX3Nob3J0Y29kZVwiIGNsYXNzTmFtZT1cInNob3J0Y29kZVwiIHR5cGU9XCJ0ZXh0XCIgcmVhZE9ubHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2BbYWlvdnAgaWQ9XCIke3Bvc3RJRH1cIl1gfS8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYXllcl90eXBlXCI+XHJcbiAgICAgICAgICAgICAgICA8U2VsZWN0Q29udHJvbFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPXsnUGxheWVyIFR5cGUgOiAnfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtwbGF5ZXJUeXBlfVxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e1tcclxuICAgICAgICAgICAgICAgICAgICAgICAge2xhYmVsOiAnUGxheWxpc3QnLCB2YWx1ZTogJ3BsYXlsaXN0J30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtsYWJlbDogJ1NpbmdsZScsIHZhbHVlOiAnc2luZ2xlJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgXX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17cGxheWVyVHlwZSA9PiBzZXRQbGF5ZXJUeXBlKHBsYXllclR5cGUpfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICB7KGluaXQgfHwgdXBkYXRpbmcpICYmIDxTcGlubmVyLz59XHJcblxyXG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9J2J1dHRvbidcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUNoYW5nZSh7dXBkYXRpbmc6IHRydWV9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBhaW92cC5hZG1pbl91cmwgKyAnL2VkaXQucGhwP3Bvc3RfdHlwZT1haW92cCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidXR0b25cIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9vbHRpcC13cmFwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidG9vbHRpcC10ZXh0XCI+QmFjayB0byBhbGwgcGxheWVyczwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJkYXNoaWNvbnMgZGFzaGljb25zLWFycm93LWxlZnQtYWx0MlwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICB7ZGVsZXRpbmcgPyAnRGVsZXRpbmcuLi4nIDogJ0JhY2snfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG5cclxuICAgICAgICAgICAgeyEhd2luZG93LmxvY2F0aW9uLmhyZWYubWF0Y2goL3Bvc3QtbmV3LnBocC8pIHx8XHJcbiAgICAgICAgICAgIDxidXR0b24gdHlwZT0nYnV0dG9uJyBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB5ZXMgPSBjb25maXJtKCdBcmUgeW91IHN1cmUsIHdhbnQgdG8gZGVsZXRlIHRoZSBwbGF5ZXI/Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHllcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZVBsYXllcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfX0gY2xhc3NOYW1lPVwiYnV0dG9uLWxpbmstZGVsZXRlIGJ1dHRvblwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0b29sdGlwLXdyYXBcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0b29sdGlwLXRleHRcIj5EZWxldGUgUGxheWVyPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImRhc2hpY29ucyBkYXNoaWNvbnMtdHJhc2hcIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAge2RlbGV0aW5nID8gJ0RlbGV0aW5nLi4uJyA6ICdEZWxldGUnfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB7LyogIFByZXZpZXcgICovfVxyXG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9J2J1dHRvbidcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZURhdGEoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oYWlvdnAuc2l0ZV91cmwgKyBgP2FsbF9pbl9vbmVfdmlkZW9fcGxheWVyPSR7cG9zdElEfSZwcmV2aWV3YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidXR0b25cIj5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvb2x0aXAtd3JhcFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRvb2x0aXAtdGV4dFwiPlBsYXllciBQcmV2aWV3PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImRhc2hpY29ucyBkYXNoaWNvbnMtdmlzaWJpbGl0eVwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICB7dXBkYXRpbmcgPyAnU2F2aW5nLi4uJyA6ICdQcmV2aWV3J31cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPC9idXR0b24+XHJcblxyXG4gICAgICAgICAgICB7LyogU2F2ZSBjaGFuZ2VzICovfVxyXG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9J2J1dHRvbicgb25DbGljaz17dXBkYXRlRGF0YX0gY2xhc3NOYW1lPVwiYnV0dG9uLXByaW1hcnkgYnV0dG9uXCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJkYXNoaWNvbnMgZGFzaGljb25zLXllc1wiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIHt1cGRhdGluZyA/ICdTYXZpbmcuLi4nIDogJ1NhdmUgQ2hhbmdlcyd9XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVG9wOyIsImNvbnN0IHtUZXh0Q29udHJvbH0gPSB3cC5jb21wb25lbnRzO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVXBsb2FkZXIoe21lZGlhLCBvbkNoYW5nZSwgY29uZmlnfSkge1xyXG5cclxuXHJcbiAgICBjb25zdCBvcGVuVXBsb2FkZXIgPSAoZSkgPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBtZWRpYSBmcmFtZS5cclxuICAgICAgICBjb25zdCBmaWxlX2ZyYW1lID0gd3AubWVkaWEuZnJhbWVzLmZpbGVfZnJhbWUgPSB3cC5tZWRpYSh7XHJcbiAgICAgICAgICAgIHRpdGxlOiBjb25maWcudGl0bGUsXHJcbiAgICAgICAgICAgIGxpYnJhcnk6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IGNvbmZpZy50eXBlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJ1dHRvbjoge1xyXG4gICAgICAgICAgICAgICAgdGV4dDogY29uZmlnLnRleHQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG11bHRpcGxlOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmaWxlX2ZyYW1lLm9uKCdzZWxlY3QnLCAoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBhdHRhY2htZW50ID0gZmlsZV9mcmFtZS5zdGF0ZSgpLmdldCgnc2VsZWN0aW9uJykuZmlyc3QoKS50b0pTT04oKTtcclxuICAgICAgICAgICAgb25DaGFuZ2UoYXR0YWNobWVudCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEZpbmFsbHksIG9wZW4gdGhlIG1vZGFsXHJcbiAgICAgICAgZmlsZV9mcmFtZS5vcGVuKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZGVsZXRlTWVkaWEgPSAoZSkgPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgb25DaGFuZ2UoJycpXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aHVtYm5haWwtbWV0YWJveC1hY3Rpb25zXCI+XHJcbiAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cIlwiPntjb25maWcubGFiZWx9PC9sYWJlbD5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICB7J2ltYWdlJyA9PT0gY29uZmlnLnR5cGUgJiYgISFtZWRpYSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXttZWRpYX0gY2xhc3NOYW1lPXsnbWVkaWEtcHJldmlldyd9Lz5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHZhbHVlPXttZWRpYX0gb25DaGFuZ2U9e2UgPT4gb25DaGFuZ2UoZS50YXJnZXQudmFsdWUpfS8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9eydidXR0b24nfSBjbGFzc05hbWU9XCJidXR0b24gYnV0dG9uLXByaW1hcnkgc2VsZWN0X3ZpZGVvXCIgb25DbGljaz17b3BlblVwbG9hZGVyfT5cclxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJkYXNoaWNvbnMgZGFzaGljb25zLXBsdXMtYWx0XCI+IDwvaT5cclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG5cclxuICAgICAgICAgICAgICAgIHshIW1lZGlhICYmXHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9eydidXR0b24nfSBjbGFzc05hbWU9XCJidXR0b24gYnV0dG9uLWxpbmstZGVsZXRlIHJlbW92ZV92aWRlb1wiIG9uQ2xpY2s9e2RlbGV0ZU1lZGlhfT5cclxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJkYXNoaWNvbnMgZGFzaGljb25zLXRyYXNoXCI+IDwvaT48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZGVzY3JpcHRpb25cIj57Y29uZmlnLmRlc2N9PC9wPlxyXG5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxuXHJcbn0iLCJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tIFwiY2xhc3NuYW1lc1wiO1xyXG5cclxuaW1wb3J0IFVwbG9hZGVyIGZyb20gJy4vVXBsb2FkZXInXHJcblxyXG5jb25zdCB7dXNlU3RhdGV9ID0gd3AuZWxlbWVudDtcclxuY29uc3Qge1NlbGVjdENvbnRyb2wsIFRleHRDb250cm9sfSA9IHdwLmNvbXBvbmVudHM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBWaWRlb3Moe3ZpZGVvcywgc2V0VmlkZW9zLCBwbGF5ZXJUeXBlfSkge1xyXG5cclxuICAgIHZpZGVvcyA9ICEhdmlkZW9zLmxlbmd0aCA/IHZpZGVvcyA6IFt7XHJcbiAgICAgICAgdGl0bGU6ICcnLFxyXG4gICAgICAgIHNvdXJjZTogJ1lvdVR1YmUnLFxyXG4gICAgICAgIHZpZGVvOiAnJyxcclxuICAgICAgICBwb3N0ZXI6ICcnLFxyXG4gICAgfV1cclxuXHJcbiAgICBjb25zdCBbYWN0aXZlLCBzZXRBY3RpdmVdID0gdXNlU3RhdGUoISF2aWRlb3MgJiYgdmlkZW9zLmxlbmd0aCA9PT0gMSA/IDAgOiBudWxsKTtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2UgPSAob2JqKSA9PiB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gT2JqZWN0LmtleXMob2JqKVswXTtcclxuICAgICAgICB2aWRlb3NbYWN0aXZlXVtrZXldID0gb2JqW2tleV07XHJcblxyXG4gICAgICAgIHNldFZpZGVvcyhbLi4udmlkZW9zXSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmVtb3ZlVmlkZW8gPSAoaW5kZXgpID0+IHtcclxuICAgICAgICBjb25zdCBjb25mID0gY29uZmlybSgnQXJlIHlvdSBzdXJlIHdhbnQgdG8gZGVsZXRlIHRoZSB0cmFjaz8nKVxyXG5cclxuICAgICAgICBpZiAoY29uZikge1xyXG4gICAgICAgICAgICBzZXRWaWRlb3ModmlkZW9zLmZpbHRlcigoaXRlbSwgaSkgPT4gaSAhPT0gaW5kZXgpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCdzaW5nbGUnID09PSBwbGF5ZXJUeXBlKSB7XHJcbiAgICAgICAgdmlkZW9zID0gW3suLi52aWRlb3NbMF19XTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29udGVudC10YWInPlxyXG4gICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGFiX3RpdGxlXCI+eydzaW5nbGUnID09PSBwbGF5ZXJUeXBlID8gJ1ZpZGVvJyA6ICdWaWRlb3MnfTwvaDM+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpZGVvLWl0ZW1zXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgeyEhdmlkZW9zICYmICEhdmlkZW9zLmxlbmd0aCAmJiB2aWRlb3MubWFwKCh7dGl0bGUsIHNvdXJjZSwgdmlkZW8sIHBvc3Rlcn0sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNBY3RpdmUgPSBpbmRleCA9PT0gYWN0aXZlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcygndmlkZW8taXRlbScsIHthY3RpdmU6IGlzQWN0aXZlfSl9PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsnc2luZ2xlJyAhPT0gcGxheWVyVHlwZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWRlby1pdGVtLWhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoND57aW5kZXggKyAxfS4ge3RpdGxlfTwvaDQ+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2aWRlb3MubGVuZ3RoID4gMSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT17XCJidXR0b25cIn0gY2xhc3NOYW1lPXsnYnV0dG9uIGJ1dHRvbi1saW5rLWRlbGV0ZSd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiByZW1vdmVWaWRlbyhpbmRleCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJkYXNoaWNvbnMgZGFzaGljb25zLXRyYXNoXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPXtcImJ1dHRvblwifSBjbGFzc05hbWU9eydidXR0b24gYnV0dG9uLXByaW1hcnknfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0QWN0aXZlKGlzQWN0aXZlID8gbnVsbCA6IGluZGV4KX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnZGFzaGljb25zJywgeydkYXNoaWNvbnMtYXJyb3ctZG93bi1hbHQyJzogIWlzQWN0aXZlfSwgeydkYXNoaWNvbnMtYXJyb3ctdXAtYWx0Mic6IGlzQWN0aXZlfSl9PjwvaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGlzQWN0aXZlIHx8ICdzaW5nbGUnID09PSBwbGF5ZXJUeXBlKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWRlby1pdGVtLWJvZHlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZmllbGRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRDb250cm9sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17J1RpdGxlJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aXRsZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aXRsZSA9PiBoYW5kbGVDaGFuZ2Uoe3RpdGxlfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwPXsnRW50ZXIgdGhlIHZpZGVvIHRpdGxlLid9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1maWVsZFwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdENvbnRyb2xcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXsnU291cmNlJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtzb3VyY2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zPXtbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2xhYmVsOiAnWW91VHViZScsIHZhbHVlOiAnWW91VHViZSd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsYWJlbDogJ1NvdW5kQ2xvdWQnLCB2YWx1ZTogJ1NvdW5kQ2xvdWQnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGFiZWw6ICdGYWNlYm9vaycsIHZhbHVlOiAnRmFjZWJvb2snfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGFiZWw6ICdWaW1lbycsIHZhbHVlOiAnVmltZW8nfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGFiZWw6ICdUd2l0Y2gnLCB2YWx1ZTogJ1R3aXRjaCd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsYWJlbDogJ1N0cmVhbWFibGUnLCB2YWx1ZTogJ1N0cmVhbWFibGUnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGFiZWw6ICdXaXN0aWEnLCB2YWx1ZTogJ1dpc3RpYSd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsYWJlbDogJ0RhaWx5TW90aW9uJywgdmFsdWU6ICdEYWlseU1vdGlvbid9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsYWJlbDogJ01peGNsb3VkJywgdmFsdWU6ICdNaXhjbG91ZCd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsYWJlbDogJ1ZpZHlhcmQnLCB2YWx1ZTogJ1ZpZHlhcmQnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGFiZWw6ICdTZWxmIEhvc3RlZCcsIHZhbHVlOiAnU2VsZkhvc3RlZCd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtzb3VyY2UgPT4gaGFuZGxlQ2hhbmdlKHtzb3VyY2V9KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHA9eydTZWxlY3QgdmlkZW8gc291cmNlIHlvdSB3YW50IHRvIHVzZS4nfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZmllbGRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeydTZWxmSG9zdGVkJyA9PT0gc291cmNlID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxVcGxvYWRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhPXt2aWRlb31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17bWVkaWEgPT4gaGFuZGxlQ2hhbmdlKHt2aWRlbzogbWVkaWEudXJsfSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnU2VsZWN0IFZpZGVvJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3ZpZGVvJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1VzZSB0aGlzIHZpZGVvJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdTZWxlY3QgVmlkZW8nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAnRW50ZXIgdGhlIHNlbGYgaG9zdGVkIHZpZGVvIHVybCBvciBzZWxlY3QgYW4gdmlkZW8gZnJvbSBtZWRpYSBsaWJyYXJ5LidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0Q29udHJvbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXsnVmlkZW8gVVJMJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmlkZW99XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3ZpZGVvID0+IGhhbmRsZUNoYW5nZSh7dmlkZW99KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwPXsnRW50ZXIgdGhlIHZpZGVvIFVSTC4nfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17J2Zvcm0tZmllbGQnfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFVwbG9hZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYT17cG9zdGVyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e21lZGlhID0+IGhhbmRsZUNoYW5nZSh7cG9zdGVyOiBtZWRpYS51cmx9KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZz17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnU2VsZWN0IEltYWdlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW1hZ2UnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdVc2UgdGhpcyBpbWFnZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdQb3N0ZXIgSW1hZ2UnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICdFbnRlciB0aGUgaW1hZ2UgdXJsIG9yIHNlbGVjdCBhbiBpbWFnZSBmcm9tIG1lZGlhIGxpYnJhcnkuJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgfSl9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIHsnc2luZ2xlJyAhPT0gcGxheWVyVHlwZSAmJlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhZGQtbmV3LWJ0bi13cmFwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPXtcImJ1dHRvblwifSBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2FkZC1uZXcgYnV0dG9uJyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmlkZW9zKFsuLi52aWRlb3MsIHt9XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0QWN0aXZlKHZpZGVvcy5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImRhc2hpY29ucyBkYXNoaWNvbnMtcGx1cy1hbHRcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkFkZCBOZXcgVmlkZW88L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG5cclxufVxyXG5cclxuIiwiaW1wb3J0IHt1cGRhdGVVUkx9IGZyb20gXCIuLi9jb21wb25lbnRzL2Z1bmN0aW9uc1wiO1xyXG5pbXBvcnQgVG9wIGZyb20gJy4vVG9wJztcclxuaW1wb3J0IFZpZGVvcyBmcm9tIFwiLi9WaWRlb3NcIjtcclxuaW1wb3J0IFBsYXllclR5cGUgZnJvbSBcIi4vUGxheWVyVHlwZVwiO1xyXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tIFwiY2xhc3NuYW1lc1wiO1xyXG5cclxuY29uc3Qge3VzZVN0YXRlLCB1c2VFZmZlY3R9ID0gd3AuZWxlbWVudDtcclxuY29uc3Qge1NwaW5uZXJ9ID0gd3AuY29tcG9uZW50cztcclxuXHJcbmNvbnN0IE1ldGFib3ggPSAoe2VkaXRMaW5rfSkgPT4ge1xyXG4gICAgY29uc3QgcG9zdElEID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvc3RfSUQnKS52YWx1ZTtcclxuXHJcbiAgICBjb25zdCBbdGFiLCBzZXRUYWJdID0gdXNlU3RhdGUoJ3ZpZGVvcycpO1xyXG4gICAgY29uc3QgW3ZpZGVvcywgc2V0VmlkZW9zXSA9IHVzZVN0YXRlKFtdKTtcclxuICAgIGNvbnN0IFtza2luLCBzZXRTa2luXSA9IHVzZVN0YXRlKCdza2luMScpO1xyXG4gICAgY29uc3QgW2N1c3RvbWl6YXRpb24sIHNldEN1c3RvbWl6YXRpb25dID0gdXNlU3RhdGUoe30pO1xyXG4gICAgY29uc3QgW3BsYXllclR5cGUsIHNldFBsYXllclR5cGVdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBbcGxheWVyVGl0bGUsIHNldFBsYXllclRpdGxlXSA9IHVzZVN0YXRlKCEhZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpdGxlJykudmFsdWUgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGl0bGUnKS52YWx1ZSA6ICdQbGF5ZXIgVGl0bGUnKTtcclxuXHJcbiAgICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKHtcclxuICAgICAgICBpbml0OiB0cnVlLFxyXG4gICAgICAgIHVwZGF0aW5nOiBmYWxzZSxcclxuICAgICAgICBkZWxldGluZzogZmFsc2UsXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB1cGRhdGVEYXRhID0gKCkgPT4ge1xyXG5cclxuICAgICAgICBzZXRTdGF0ZSh7Li4uc3RhdGUsIHVwZGF0aW5nOiB0cnVlfSlcclxuXHJcbiAgICAgICAgd3AuYXBpRmV0Y2goe1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgcGF0aDogYGFpb3ZwL3YxL3BsYXllci1kYXRhLyR7cG9zdElEfWAsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgICAnWC1XUC1Ob25jZSc6IGFpb3ZwLm5vbmNlXHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBkYXRhOiB7dmlkZW9zLCBwb3N0SUQsIHBsYXllclR5cGUsIHBsYXllclRpdGxlfVxyXG5cclxuICAgICAgICB9KS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgc2V0U3RhdGUoey4uLnN0YXRlLCB1cGRhdGluZzogZmFsc2V9KTtcclxuICAgICAgICAgICAgdXBkYXRlVVJMKGVkaXRMaW5rKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBnZXREYXRhID0gKCkgPT4ge1xyXG5cclxuICAgICAgICB3cC5hcGlGZXRjaCh7XHJcbiAgICAgICAgICAgIHBhdGg6IGBhaW92cC92MS9wbGF5ZXItZGF0YS8ke3Bvc3RJRH1gXHJcbiAgICAgICAgfSkudGhlbigoe2RhdGE6IHt2aWRlb3MsIHBsYXllclR5cGUsIHBsYXllclRpdGxlfX0pID0+IHtcclxuXHJcbiAgICAgICAgICAgIGlmICghIXZpZGVvcykge1xyXG4gICAgICAgICAgICAgICAgc2V0VmlkZW9zKFsuLi52aWRlb3NdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0UGxheWVyVHlwZShwbGF5ZXJUeXBlKTtcclxuICAgICAgICAgICAgc2V0UGxheWVyVGl0bGUocGxheWVyVGl0bGUpO1xyXG5cclxuICAgICAgICAgICAgc2V0U3RhdGUoey4uLnN0YXRlLCBpbml0OiBmYWxzZX0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgZ2V0RGF0YSgpO1xyXG5cclxuXHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpdGxlJykub25pbnB1dCA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgIHNldFBsYXllclRpdGxlKGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgICAgICAgICBqUXVlcnkod2luZG93KS5vZmYoJ2JlZm9yZXVubG9hZCcpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIFtdKTtcclxuXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnYWlvdnAtbWV0YWJveCcsIGBwbGF5ZXItdHlwZS0ke3BsYXllclR5cGV9YCl9PlxyXG5cclxuICAgICAgICAgICAge3N0YXRlLmluaXQgPyA8U3Bpbm5lci8+IDpcclxuICAgICAgICAgICAgICAgIDw+XHJcbiAgICAgICAgICAgICAgICAgICAgeyEhcGxheWVyVHlwZSB8fCA8UGxheWVyVHlwZSBzZXRQbGF5ZXJUeXBlPXtzZXRQbGF5ZXJUeXBlfS8+fVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB7ISFwbGF5ZXJUeXBlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFRvcCBwbGF5ZXJUeXBlPXtwbGF5ZXJUeXBlfSBzZXRQbGF5ZXJUeXBlPXtzZXRQbGF5ZXJUeXBlfSB1cGRhdGVEYXRhPXt1cGRhdGVEYXRhfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlPXtzdGF0ZX0vPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgey8qIHNpZGViYXIgdGFicyAqL31cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhaW92cC1tZXRhYm94LXNpZGViYXJcIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9eydidXR0b24nfSBjbGFzc05hbWU9eyd2aWRlb3MnID09PSB0YWIgJiYgJ2FjdGl2ZSd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFRhYigndmlkZW9zJyl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT17YGRhc2hpY29ucyBkYXNoaWNvbnMtJHsnc2luZ2xlJyA9PT0gcGxheWVyVHlwZSA/ICdtZWRpYScgOiAncGxheWxpc3QnfS12aWRlb2B9PjwvaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J3NpbmdsZScgPT09IHBsYXllclR5cGUgPyAnVmlkZW8nIDogJ1ZpZGVvcyd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9eydidXR0b24nfSBjbGFzc05hbWU9eydza2luJyA9PT0gdGFiICYmICdhY3RpdmUnfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRUYWIoJ3NraW4nKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZGFzaGljb25zIGRhc2hpY29ucy1mb3JtYXQtdmlkZW9cIj48L2k+IFNraW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT17J2J1dHRvbid9IGNsYXNzTmFtZT17J2N1c3RvbWl6YXRpb24nID09PSB0YWIgJiYgJ2FjdGl2ZSd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFRhYignY3VzdG9taXphdGlvbicpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJkYXNoaWNvbnMgZGFzaGljb25zLWFkbWluLWFwcGVhcmFuY2VcIj48L2k+IEN1c3RvbWl6YXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7LyogbWV0YWJveCBib2R5ICovfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFpb3ZwLW1ldGFib3gtYm9keVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyd2aWRlb3MnID09PSB0YWIgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWaWRlb3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWRlb3M9e3ZpZGVvc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRWaWRlb3M9e3NldFZpZGVvc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJUeXBlPXtwbGF5ZXJUeXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxuXHJcbn1cclxuXHJcblxyXG5jb25zdCBhcHAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWlvdnBfbWV0YWJveF9hcHAnKTtcclxuXHJcbmlmIChhcHApIHtcclxuICAgIGNvbnN0IGVkaXRMaW5rID0gYXBwLmdldEF0dHJpYnV0ZSgnZGF0YS1lZGl0X2xpbmsnKTtcclxuXHJcbiAgICB3cC5lbGVtZW50LnJlbmRlcig8TWV0YWJveCBlZGl0TGluaz17ZWRpdExpbmt9Lz4sIGFwcCk7XHJcbn0iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE4IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcygpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0aWYgKGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRpZiAoYXJnLnRvU3RyaW5nID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKSB7XG5cdFx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZy50b1N0cmluZygpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=